(function () {
    var modules = [
        "ui.router"
                , "ct.ui.router.extras"
                , "ngAnimate"
                , "ngTouch"
                , "ui.bootstrap"
                , "ui.select"
                , "ngSanitize"
                , "ui.mask"
                , "ui.tinymce"
                , "ncy-angular-breadcrumb"
                , "cfp.hotkeys"
                , "daterangepicker"
                , "ngCsv"
                , "angucomplete-alt"
                , "coreModule"
                , "navModule"
                , "authModule"
                , "dashboardModule"
                , "photolibModule"
                , "workorderModule"
                , "manualModule"
                , "hrModule"
                , "procModule"
                , "opsModule"
                , "salesrepdocsModule"
                , "salesrepModule"
                , "sysadminModule"
                , "sysadminlogsModule"
                , "slideshowModule"
                , "techschedModule"
                , "itcquotesModule"
                , "quotelookupsModule"
                , 'angular-confirm'
                , 'quoteproductModule'
                , 'quotepropertyModule'
                , "quotepropertypreviewModule"
                , "constantModule"
                , "producttypeModule"
                , "producttypepropertyModule"
                , "myDatepicker"
                , "locationModule"
                , "industryModule"
                , "leadoriginModule"
                , "clauseModule"
                , "quotecustomersModule"
                , "drawingrequestModule"
                , "drawingrequestviewModule"
                , "fileUpload"
                , "drawingModule"
                , "drawingviewModule"
                , "salesorderModule"
                , "salesorderlookupsModule"
                , "salesorderviewModule"
                , "cgBusy"
    ]
    var app = angular.module("sprungv2", modules)
    app.config(["$stateProvider", "$urlRouterProvider", "$locationProvider", "$httpProvider",
        function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
            $locationProvider.html5Mode(true)
            $httpProvider.interceptors.push(["$q", "$rootScope", function ($q, $rootScope) {
                    return {
                        'request': function (config) {
                            return config || $q.when(config);
                        }
                        , 'response': function (response) {
                            return response || $q.when(response)
                        }
                    }
                }])

        }])
    app.run(["coreService", "$state", "$rootScope", "$location", function (coreService, $state, $rootScope, $location) {
            "ngInject";

            coreService.clearAll()



//            coreService.setApi('http://localhost/sprung/api/')
//            coreService.setBaseUrl('http://localhost/sprung/')
            coreService.setApi('http://sprung.loc/api/')
            coreService.setBaseUrl('http://sprung.loc/')

            coreService.setVersion('5.0.5')


            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                coreService.setCurrentState(toState.name);
                coreService.setPreviousState(fromState.name);
                coreService.setCurrentParams(toParams);
                if (coreService.getStates() === null && toState.name !== "auth") {
                    event.preventDefault();
                    $state.go("auth");
                }
            })
        }])
}())
;(function () {
    var module = angular.module('authModule', ['ui.router', 'forgotpasswordModule', 'repocustomerModule'])
    module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise("/")
        $stateProvider
            .state("auth", {
                url: "/",
                templateUrl: "app/authModule/views/auth.html",
                controller: "AuthController",
                ncyBreadcrumb: {
                    label: 'Login'
                },
                params: {
                    state: null,
                    id: null
                }
            })
            .state("replogin", {
                url: "/replogin",
                templateUrl: "app/authModule/views/replogin.html",
                controller: "RepLoginController",
                ncyBreadcrumb: {
                    label: 'Login'
                },
                params: {
                    state: null,
                    id: null
                }
            })

        }])
}());(function () {
    var module = angular.module('clauseModule', ['coreModule', 'tableModule'])
    module.config(['$stateProvider', "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise("/clause");
            $stateProvider
                    .state("clause", {
                        url: "^/clause",
                        templateUrl: "app/clauseModule/views/clause.html",
                        controller: "clauseController",
                        ncyBreadcrumb: {
                            label: 'Clauses Manager'
                        }
                    })
                      .state("clausedetails", {
                        url: "^/clausedetails",
                        templateUrl: "app/clauseModule/views/clausedetails.html",
                        controller: "clausedetailsController",
                        ncyBreadcrumb: {
                            label: 'Clauses Details Manager'
                        }
                    })
        }]);
}());;(function () {
    angular.module("constantModule",[])
}())


;(function () {
    angular.module("coreModule",[])
}());(function () {
    var module = angular.module('dashboardModule', ['ui.router'])
    module.config(["$stateProvider",function($stateProvider){
            $stateProvider
                    .state("dashboard",{
                        url: "^/dashboard",
                templateUrl: "app/dashboardModule/views/dashboard.html",
                controller: "DashboardController",
                ncyBreadcrumb: {
                          label: 'Dashboard'  
                        }
            })
    }])
}());/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


(function () {
    var module = angular.module('drawingModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('drawing', {
                        url: '^/drawing',
                        templateUrl: 'app/drawingModule/views/drawing.html',
                        controller: 'drawingController',
                        ncyBreadcrumb: {
                            label: 'Drawings'
                        }
                    })
        }])
}());(function () {
    var module = angular.module('drawingrequestModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('drawingrequest', {
                        url: '^/drawingrequest',
                        templateUrl: 'app/drawingrequestModule/views/drawingrequest.html',
                        controller: 'drawingrequestController',
                        ncyBreadcrumb: {
                            label: 'Drawing Requests'
                        }
                    })
        }])
}());(function () {
    var module = angular.module('drawingrequestviewModule', ['coreModule', "ui.select", "ui.checkbox", 'uploadModule', "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('drawingrequestview', {
                        url: '^/drawingrequestview',
                        templateUrl: 'app/drawingrequestviewModule/views/drawingrequestview.html',
                        controller: 'drawingrequestviewController',
                        ncyBreadcrumb: {
                            label: 'Drawing Request Details'
                        }
                    })
                    .state('drawingrequestview.adddrawingrequest', {
                        templateUrl: 'app/drawingrequestviewModule/views/adddrawingrequest.html',
                        ncyBreadcrumb: {
                            label: 'Details'
                        }
                    })
                    .state('drawingrequestview.attachment', {
                        templateUrl: 'app/drawingrequestviewModule/views/attachment.html',
                        controller: 'drawingrequestfilesController',
                        ncyBreadcrumb: {
                            label: 'Add Attachments'
                        }
                    })
                    .state('drawingrequestview.extravalues', {
                        templateUrl: 'app/drawingrequestviewModule/views/extravalues.html',
                        ncyBreadcrumb: {
                            label: 'Extra Values'
                        }
                    })
        }])
}());(function () {
    var module = angular.module('drawingviewModule', ['coreModule', "ui.select", "ui.checkbox", 'uploadModule',"tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('adddrawing', {
                        url: '^/adddrawing',
                        templateUrl: 'app/drawingviewModule/views/adddrawing.html',
                        controller: 'drawingviewController',
                        ncyBreadcrumb: {
                            label: 'Drawing Details'
                        }
                    })                 
        }])
}());(function(){
  angular.module('emailModule',['ui.tinymce','ui.select','coreModule'])
}());(function () {
    angular.module('filecollectionModule', ['coreModule','emailModule'])  
}());(function () {
    angular.module('filelistModule', ['coreModule'])  
}());;(function(){
  var module = angular.module('forgotpasswordModule',['coreModule'])  
  
  module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("forgotpassword", {
                        url: "^/forgotpassword",
                        templateUrl: "app/forgotpasswordModule/views/forgotpassword.html",
                        controller: "ForgotpasswordController",
                        ncyBreadcrumb: {
                            label: 'Forgot Password'
                        }
                    })
                    
        }])
}());(function () {
    var module = angular.module('hrModule', ['treeModule','filelistModule','filecollectionModule','uploadModule','coreModule'])  
    module.config(['$stateProvider',function($stateProvider){
            $stateProvider
                    .state("hr",{
                        url: "^/hr",
                templateUrl: "app/hrModule/views/hr.html",
                controller: "HrController",
                ncyBreadcrumb: {
                          label: 'Human resources'  
                        }
            })
    }])
}());(function () {
    var module = angular.module('industryModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("industry", {
                        url: "^/industry",
                        templateUrl: "app/industryModule/views/industry.html",
                        controller: "industryController",
                        ncyBreadcrumb: {
                            label: 'Industry Manager'
                        }
                    })
                 
        }]);
}());;(function () {
    var module = angular.module('itcquoteModule', ["coreModule", "ui.router.tabs", "ui.checkbox", "ui.select", "uiSwitch"])

    module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {

            $stateProvider
                    .state('itcquote', {
                        url: '^/itcquote',
                        templateUrl: 'app/itcquoteModule/views/itcquote.html',
                        controller: 'ItcquoteController',
                        ncyBreadcrumb: {
                            label: 'Quote'
                        }
                    })
                    .state('itcquote.customerinfo', {
                        // url: '^/itcquote/customerinfo',
                        templateUrl: 'app/itcquoteModule/views/customerinfo.html',
                        controller: 'ItcquoteController',
                        ncyBreadcrumb: {
                            label: 'Customer info'
                        }
                    })
                    .state('itcquote.managrialinfo', {
                        //  url: '^/itcquote/managrialinfo',
                        templateUrl: 'app/itcquoteModule/views/managrialinfo.html',
                        ncyBreadcrumb: {
                            label: 'Managrial info'
                        }
                    })
                    .state('itcquote.technicalinfo', {
                        // url: '^/itcquote/technicalinfo',
                        templateUrl: 'app/itcquoteModule/views/technicalinfo.html',
                        ncyBreadcrumb: {
                            label: 'Technical info'
                        }
                    })
                    .state('itcquote.quoteitems', {
                        // url: '^/itcquote/quoteitems',
                        templateUrl: 'app/itcquoteModule/views/quoteitems.html',
                        controller: 'quoteitemsController',
                        ncyBreadcrumb: {
                            label: 'Quote items'
                        }
                    })
                    .state('itcquote.summary', {
                        //  url: '^/itcquote/summary',
                        templateUrl: 'app/itcquoteModule/views/summary.html',
                        controller: 'quotesummaryController',
                        ncyBreadcrumb: {
                            label: 'Summary'
                        }
                    })
                    .state('itcquote.notes', {
                        //  url: '^/itcquote/notes',
                        templateUrl: 'app/itcquoteModule/views/notes.html',
                        controller: 'ItcquoteController',
                        ncyBreadcrumb: {
                            label: 'Notes'
                        }
                    })
                    .state('itcquote.drawingrequests', {
                        //url: '^/itcanquote/drawingrequests',
                        templateUrl: 'app/itcquoteModule/views/drawingrequests.html',
                        controller: 'ItcquoteController',
                        ncyBreadcrumb: {
                            label: 'Drawing requests'
                        }
                    })
        }])
}());(function(){
  var module = angular.module('itcquotesModule',['coreModule','itcquoteModule'])  
  
  module.config(["$stateProvider",function($stateProvider){
            $stateProvider
                    .state("itcquotes",{
                        url: "^/itcquotes",
                templateUrl: "app/itcquotesModule/views/itcquotes.html",
                controller: "ItcquotesController",
                ncyBreadcrumb: {
                          label: 'Quotes'  
                        }
            })
    }])
}());(function () {
    var module = angular.module('leadoriginModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("leadorigin", {
                        url: "^/leadorigin",
                        templateUrl: "app/leadoriginModule/views/leadorigin.html",
                        controller: "leadoriginController",
                        ncyBreadcrumb: {
                            label: 'Lead Origins Manager'
                        }
                    })
                 
        }]);
}());;(function () {
    var module = angular.module('locationModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("location", {
                        url: "^/location",
                        templateUrl: "app/locationModule/views/location.html",
                        controller: "locationController",
                        ncyBreadcrumb: {
                            label: 'Locations Manager'
                        }
                    })
                 
        }]);
}());;(function () {
    var module = angular.module('manualModule', ['treeModule','filelistModule','filecollectionModule','uploadModule','coreModule'])  
    module.config(['$stateProvider',function($stateProvider){
            $stateProvider
                    .state("manual",{
                        url: "^/manual",
                templateUrl: "app/manualModule/views/manual.html",
                controller: "ManualController",
                ncyBreadcrumb: {
                          label: 'Manuals'  
                        }
            })
    }])
}());(function () {
    var module = angular.module('manufacturersrepModule', ['manufacturersrepviewModule','coreModule','tableModule'])  
    module.config(["$stateProvider",function($stateProvider){
            $stateProvider
                    .state("manufacturersrep",{
                        url: "^/manufacturersrep",
                templateUrl: "app/manufacturersrepModule/views/manufacturersrep.html",
                controller: "ManufacturersrepController",
                ncyBreadcrumb: {
                          label: 'Manufacturers Reps'  
                        }
            })
    }])
}());(function () {
    var module = angular.module('manufacturersrepviewModule', ["ui.router.tabs","ui.checkbox","ngFileUpload"])
    module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise("/manufacturersrepmain")
            $stateProvider
                    .state("manufacturersrepview", {
                        url: "^/manufacturersrepview",
                        controller: "ManufacturersrepviewController",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepview.html"
                    })
                    .state("manufacturersrepview.manufacturersrepmain", {
                        url: "^/manufacturersrepview/manufacturersrepmain",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepmain.html"
                    })
                    .state("manufacturersrepview.manufacturersrepaddress", {
                        url: "^/manufacturersrepview/manufacturersrepaddress",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepaddress.html"
                    })
                    .state("manufacturersrepview.manufacturersrepaction", {
                        url: "^/manufacturersrepview/manufacturersrepaction",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepaction.html"
                    })
                    .state("manufacturersrepview.manufacturersrepemail", {
                        url: "^/manufacturersrepview/manufacturersrepemail",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepemail.html"
                    })
                    .state("manufacturersrepview.manufacturersrepnote", {
                        url: "^/manufacturersrepview/manufacturersrepnote",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepnote.html"
                    })
                    .state("manufacturersrepview.manufacturersrepphone", {
                        url: "^/manufacturersrepview/manufacturersrepphone",
                        templateUrl: "app/manufacturersrepviewModule/views/manufacturersrepphone.html"
                    })
        }])
}());(function () {
    angular.module('navModule', ['resetpasswordModule', 'userprofileModule', 'quotelookupsModule', 'techschedModule', 'repoModule'])
}());(function () {
    var module = angular.module('opsModule', ['treeModule', 'filelistModule', 'filecollectionModule', 'uploadModule', 'coreModule'])
    module.config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state("ops", {
                url: "^/ops",
                templateUrl: "app/opsModule/views/ops.html",
                controller: "OpsController",
                ncyBreadcrumb: {
                    label: 'Ops Directory'
                }
            })
    }])
}());(function () {
    angular.module('photocollectionModule', ['coreModule','emailModule'])  
}());(function () {
    var module = angular.module('photolibModule', ['treeModule','photolistModule','photocollectionModule','uploadModule','coreModule'])
    module.config(["$stateProvider",function($stateProvider){
            $stateProvider
                    .state("photolib",{
                        url: "^/photolib",
                templateUrl: "app/photolibModule/views/photolib.html",
                controller: "PhotolibController",
                ncyBreadcrumb: {
                          label: 'Photo Library'  
                        }
            })
    }])
}());(function () {
    angular.module('photolistModule', ['coreModule'])  
}());(function () {
    var module = angular.module('procModule', ['treeModule', 'filelistModule', 'filecollectionModule', 'uploadModule', 'coreModule'])
    module.config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state("proc", {
                url: "^/proc",
                templateUrl: "app/procModule/views/proc.html",
                controller: "ProcController",
                ncyBreadcrumb: {
                    label: 'Sales Directory'
                }
            })
    }])
}());(function () {
    var module = angular.module('producttypeModule', ['coreModule', 'tableModule'])
    module.config(['$stateProvider', "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise("/producttype");
            $stateProvider
                    .state("producttype", {
                        url: "^/producttype",
                        templateUrl: "app/producttypeModule/views/producttype.html",
                        controller: "producttypeController",
                        ncyBreadcrumb: {
                            label: 'Product Types'
                        }
                    })
        }]);
}());;(function () {
    var module = angular.module('producttypepropertyModule', ["ui.router.tabs", 'coreModule', 'tableModule'])
    module.config(['$stateProvider', "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise("/addproducttype");
             $stateProvider
                    .state("addproducttype", {
                        url: "^/addproducttype",
                        templateUrl: "app/producttypepropertyModule/views/addproducttype.html",
                        controller: "producttypepropertyController",
                        ncyBreadcrumb: {
                            label: 'Add Product Type'
                        }
                    })

        }]);
}());;(function(){
  var module = angular.module('profilesModule',['ui.bootstrap','coreModule']);  
}());(function () {
    var module = angular.module('quotecustomerModule', ["ui.router.tabs", "ui.checkbox", "ui.select", "coreModule", "tableModule", 'quotecustomercontactModule'])

    module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('quotecustomer', {
                        url: '^/quotecustomer',
                        templateUrl: 'app/quotecustomerModule/views/quotecustomer.html',
                        controller: 'quotecustomerController',
                        ncyBreadcrumb: {
                            label: 'Customers'
                        }
                    })
//                    .state('quotecustomer.main', {
//                        //  url: '^/quotecustomer/main',
//                        templateUrl: 'app/quotecustomerModule/views/quotecustomermain.html',
//                        ncyBreadcrumb: {
//                            label: 'Main'
//                        }
//                    })
//                    .state('quotecustomer.contacts', {
//                        // url: '^/quotecustomer/contacts',
//                        templateUrl: 'app/quotecustomerModule/views/quotecustomercontacts.html',
//                        controller: 'quotecustomerController',
//                        ncyBreadcrumb: {
//                            label: 'Contacts'
//                        }
//                    })

        }])
}());(function () {
    var module = angular.module('quotecustomercontactModule', ['ui.router.tabs', 'coreModule', 'ui.checkbox', 'ui.select', 'tableModule'])

    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('quotecustomercontact', {
                        url: '^/quotecustomercontact',
                        templateUrl: 'app/quotecustomercontactModule/views/quotecustomercontact.html',
                        controller: 'QuotecustomercontactController',
                        ncyBreadcrumb: {
                            label: 'Customer Contacts'
                        }
                    })
                    .state('quotecustomercontact.main', {
                       // url: '^/quotecustomercontact/main',
                        templateUrl: 'app/quotecustomercontactModule/views/main.html',
                        ncyBreadcrumb: {
                            label: 'Main'
                        }
                    })
                    .state('quotecustomercontact.address', {
                       // url: '^/quotecustomercontact/address',
                        templateUrl: 'app/quotecustomercontactModule/views/address.html',
                        ncyBreadcrumb: {
                            label: 'Addresses'
                        }
                    })
                    .state('quotecustomercontact.phone', {
                      //  url: '^/quotecustomercontact/phone',
                        templateUrl: 'app/quotecustomercontactModule/views/phone.html',
                        ncyBreadcrumb: {
                            label: 'Phones'
                        }
                    })
                    .state('quotecustomercontact.email', {
                       // url: '^/quotecustomercontact/email',
                        templateUrl: 'app/quotecustomercontactModule/views/email.html',
                        ncyBreadcrumb: {
                            label: 'Emails'
                        }
                    })
        }])
}());(function () {
    var module = angular.module('quotecustomersModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule", "quotecustomerModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('quotecustomers', {
                        url: '^/quotecustomers',
                        templateUrl: 'app/quotecustomersModule/views/quotecustomers.html',
                        controller: 'quotecustomersController',
                        ncyBreadcrumb: {
                            label: 'Customers'
                        }
                    })
        }])
}());(function () {
    var module = angular.module('quotelookupsModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule", "constantModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("quotelookups", {
                        url: "^/quotelookups",
                        templateUrl: "app/quotelookupsModule/views/quotelookups.html",
                        controller: "quotelookupsController",
                        ncyBreadcrumb: {
                            label: 'Lookups'
                        }
                    })
                    .state('quotelookups.locationtype', {
                       // url: '^/quotelookups/locationtype',
                        templateUrl: 'app/quotelookupsModule/views/locationtype.html',
                        controller: "locationtypeController",
                        ncyBreadcrumb: {
                            label: 'Location Types'
                        }
                    })
                    .state('quotelookups.pricingpolicy', {
                       // url: '^/quotelookups/pricingpolicy',
                        templateUrl: 'app/quotelookupsModule/views/pricingpolicy.html',
                        controller: "pricingpolicyController",
                        ncyBreadcrumb: {
                            label: 'Pricing Policies'
                        }
                    })
                    .state('quotelookups.pricingtype', {
                      //  url: '^/quotelookups/pricingtype',
                        templateUrl: 'app/quotelookupsModule/views/pricingtype.html',
                        controller: "pricingtypeController",
                        ncyBreadcrumb: {
                            label: 'Pricing Types'
                        }
                    })

                    .state('quotelookups.addpricingpolicy', {
                      //  url: '^/quotelookups/addpricingpolicy',
                        templateUrl: 'app/quotelookupsModule/views/addpricingpolicy.html',
                        controller: "pricingpolicyController",
                        ncyBreadcrumb: {
                            label: 'Add Pricing Policies'
                        }
                    })
                    .state('quotelookups.purchasetype', {
                       // url: '^/quotelookups/purchasetype',
                        templateUrl: 'app/quotelookupsModule/views/purchasetype.html',
                        controller: "purchasetypeController",
                        ncyBreadcrumb: {
                            label: 'Purchase Types'
                        }
                    })
                    .state('quotelookups.contacttype', {
                       // url: '^/quotelookups/contacttype',
                        templateUrl: 'app/quotelookupsModule/views/contacttype.html',
                        controller: "contacttypeController",
                        ncyBreadcrumb: {
                            label: 'Contact Types'
                        }
                    })

                    .state('quotelookups.territory', {
                        //url: '^/quotelookups/territory',
                        templateUrl: 'app/quotelookupsModule/views/territory.html',
                        controller: "territoryController",
                        ncyBreadcrumb: {
                            label: 'Territories'
                        }
                    })
                    .state('quotelookups.scope', {
                       // url: '^/quotelookups/scope',
                        templateUrl: 'app/quotelookupsModule/views/scope.html',
                        controller: "scopeController",
                        ncyBreadcrumb: {
                            label: 'Scopes'
                        }
                    })
                    .state('quotelookups.unit', {
                      //  url: '^/quotelookups/unit',
                        templateUrl: 'app/quotelookupsModule/views/unit.html',
                        controller: "unitController",
                        ncyBreadcrumb: {
                            label: 'Units'
                        }
                    })
                    .state('quotelookups.buildingcode', {
                     //   url: '^/quotelookups/buildingcode',
                        templateUrl: 'app/quotelookupsModule/views/buildingcode.html',
                        controller: "buildingcodeController",
                        ncyBreadcrumb: {
                            label: 'Building Codes'
                        }
                    })

                    .state('quotelookups.propertytype', {
                      //  url: '^/quotelookups/propertytype',
                        templateUrl: 'app/quotelookupsModule/views/propertytype.html',
                        controller: "propertytypeController",
                        ncyBreadcrumb: {
                            label: 'Properties Types'
                        }
                    })
                    .state('quotelookups.addunit', {
                      //  url: '^/quotelookups/addunit',
                        templateUrl: 'app/quotelookupsModule/views/addunit.html',
                        controller: "unitController",
                        ncyBreadcrumb: {
                            label: 'Add Units'
                        }
                    })
                    .state('quotelookups.addpurchasetype', {
                       // url: '^/quotelookups/addpurchasetype',
                        templateUrl: 'app/quotelookupsModule/views/addpurchasetype.html',
                        controller: "purchasetypeController",
                        ncyBreadcrumb: {
                            label: 'Add Purchase type'
                        }
                    })
                    .state('quotelookups.addpricingtype', {
                      //  url: '^/quotelookups/addpricingtype',
                        templateUrl: 'app/quotelookupsModule/views/addpricingtype.html',
                        controller: "pricingtypeController",
                        ncyBreadcrumb: {
                            label: 'Add Pricing Type'
                        }
                    })
                    .state('quotelookups.addbuildingcode', {
                       // url: '^/quotelookups/addbuildingcode',
                        templateUrl: 'app/quotelookupsModule/views/addbuildingcode.html',
                        controller: "buildingcodeController",
                        ncyBreadcrumb: {
                            label: 'Add Building Code'
                        }
                    })
                    .state('quotelookups.addpropertytype', {
                       // url: '^/quotelookups/addpropertytype',
                        templateUrl: 'app/quotelookupsModule/views/addpropertytype.html',
                        controller: "propertytypeController",
                        ncyBreadcrumb: {
                            label: 'Add Property Type'
                        }
                    })
                    .state('quotelookups.addlocationtype', {
                       // url: '^/quotelookups/addlocationtype',
                        templateUrl: 'app/quotelookupsModule/views/addlocationtype.html',
                        controller: "locationtypeController",
                        ncyBreadcrumb: {
                            label: 'Add Location Type'
                        }
                    })
                    .state('quotelookups.addscope', {
                       // url: '^/quotelookups/addscope',
                        templateUrl: 'app/quotelookupsModule/views/addscope.html',
                        controller: "scopeController",
                        ncyBreadcrumb: {
                            label: 'Add Scope'
                        }
                    })
                    .state('quotelookups.addterritory', {
                       // url: '^/quotelookups/addterritory',
                        templateUrl: 'app/quotelookupsModule/views/addterritory.html',
                        controller: "territoryController",
                        ncyBreadcrumb: {
                            label: 'Add Territory'
                        }
                    })
        }]);
}());;(function () {
    var module = angular.module('quoteproductModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("quoteproduct", {
                        url: "^/quoteproduct",
                        templateUrl: "app/quoteproductModule/views/quoteproduct.html",
                        controller: "quoteproductController",
                        ncyBreadcrumb: {
                            label: 'Product Manager'
                        }
                    })
                    .state('quoteproduct.productdetails', {
//                        url: '^/quoteproduct/productdetails',
                        templateUrl: 'app/quoteproductModule/views/productdetails.html',
                        controller: "quoteproductController",
                        ncyBreadcrumb: {
                            label: 'General'
                        }
                    })

                    .state('quoteproduct.productproperties', {
//                        url: '^/quoteproduct/productproperties',
                        templateUrl: 'app/quoteproductModule/views/productproperties.html',
                        controller: "productpropertiesController",
                        ncyBreadcrumb: {
                            label: 'Properties'
                        }
                    })
                    .state('quoteproduct.productprices', {
//                        url: '^/quoteproduct/productprices',
                        templateUrl: 'app/quoteproductModule/views/productprices.html',
                        controller: "productpricesController",
                        ncyBreadcrumb: {
                            label: 'Prices'
                        }
                    })
        }]);
}());;(function () {
    var module = angular.module('quotepropertyModule', ["ui.router.tabs", 'coreModule', 'tableModule'])
    module.config(['$stateProvider', function ($stateProvider) {
            $stateProvider
                    .state("quoteproperty", {
                        url: "^/quoteproperty",
                        templateUrl: "app/quotepropertyModule/views/quoteproperty.html",
                        controller: "quotepropertyController",
                        ncyBreadcrumb: {
                            label: 'Properties Manager'
                        }
                    })          
        }]);
}());;(function () {
    var module = angular.module('quotepropertypreviewModule', ["ui.router.tabs", 'coreModule', 'tableModule'])
    module.config(['$stateProvider', "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise("/quotepropertypreview");
            $stateProvider
                    .state("addProperty", {
                        url: "^/addProperty",
                        templateUrl: "app/quotepropertypreviewModule/views/addProperty.html",
                        controller: "quotepropertypreviewController",
                        ncyBreadcrumb: {
                            label: 'Add Property'
                        }
                    })       
        }]);
}());;var module = angular.module('repoModule', ['treeModule', 'filelistModule', 'filecollectionModule', 'uploadModule', 'coreModule'])

module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
    $stateProvider.state('repo', {
        url: '^/repo'
        , templateUrl: 'app/repoModule/views/repo.html'
        , controller: 'RepoController'
    })
}]);(function () {
    var module = angular.module("repocustomerModule", ["coreModule", "uploadModule", "filelistModule", "treeModule"])

    module.config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('repocustomer', {
            url: '^/repocustomer/:id',
            templateUrl: 'app/repocustomerModule/views/repocustomer.html',
            controller: 'RepocustomerController',
            params: {
                id: null
            }
        })
    }])
}());(function(){
  var module = angular.module('resetpasswordModule',['coreModule'])  
  
  module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("resetpassword", {
                        url: "^/resetpassword",
                        templateUrl: "app/resetpasswordModule/views/resetpassword.html",
                        controller: "ResetpasswordController",
                        ncyBreadcrumb: {
                            label: 'Reset Password'
                        }
                    })
                    
        }])
}());/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


(function () {
    var module = angular.module('salesorderModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('salesorder', {
                        url: '^/salesorder',
                        templateUrl: 'app/salesorderModule/views/salesorder.html',
                        controller: 'salesorderController',
                        ncyBreadcrumb: {
                            label: 'Sales Order Manager'
                        }
                    })
        }])
}());(function () {
    var module = angular.module('salesorderlookupsModule', ['coreModule', "ui.select", "ui.checkbox", "tableModule", "constantModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("salesorderlookups", {
                        url: "^/salesorderlookups",
                        templateUrl: "app/salesorderlookupsModule/views/salesorderlookups.html",
                        controller: "salesorderlookupsController",
                        ncyBreadcrumb: {
                            label: 'Sales Order Lookups'
                        }
                    })
                    .state('salesorderlookups.salesorderstatus', {
                        templateUrl: 'app/salesorderlookupsModule/views/salesorderstatus.html',
                        controller: "salesorderstatusController",
                        ncyBreadcrumb: {
                            label: 'Sales Order Status Manager'
                        }
                    })

                    .state('salesorderlookups.addsalesorderstatus', {
                        templateUrl: 'app/salesorderlookupsModule/views/addsalesorderstatus.html',
                        controller: "salesorderstatusController",
                        ncyBreadcrumb: {
                            label: 'Add Sales Order Status'
                        }
                    })

                    .state('salesorderlookups.salesordertype', {
                        templateUrl: 'app/salesorderlookupsModule/views/salesordertype.html',
                        controller: "salesordertypeController",
                        ncyBreadcrumb: {
                            label: 'Sales Order Types Manager'
                        }
                    })

                    .state('salesorderlookups.addsalesordertype', {
                        templateUrl: 'app/salesorderlookupsModule/views/addsalesordertype.html',
                        controller: "salesordertypeController",
                        ncyBreadcrumb: {
                            label: 'Add Sales Order Type'
                        }
                    })

                    .state('salesorderlookups.paymentterm', {
                        templateUrl: 'app/salesorderlookupsModule/views/paymentterm.html',
                        controller: "paymenttermController",
                        ncyBreadcrumb: {
                            label: 'Payment Terms Manager'
                        }
                    })

                    .state('salesorderlookups.addpaymentterm', {
                        templateUrl: 'app/salesorderlookupsModule/views/addpaymentterm.html',
                        controller: "paymenttermController",
                        ncyBreadcrumb: {
                            label: 'Add Payment Term'
                        }
                    })

        }]);
}());;(function () {
    var module = angular.module('salesorderviewModule', ['coreModule', "ui.select", "ui.checkbox", 'uploadModule',"tableModule"])
    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('addsalesorder', {
                        url: '^/addsalesorder',
                        templateUrl: 'app/salesorderviewModule/views/addsalesorder.html',
                        controller: 'salesorderviewController',
                        ncyBreadcrumb: {
                            label: 'Sales Order Details'
                        }
                    })                 
        }])
}());(function () {
    var module = angular.module('salesrepModule', ['salesrepviewModule','coreModule','tableModule'])  
    module.config(["$stateProvider",function($stateProvider){
            $stateProvider
                    .state("salesrep",{
                        url: "^/salesrep",
                templateUrl: "app/salesrepModule/views/salesrep.html",
                controller: "SalesrepController",
                ncyBreadcrumb: {
                          label: 'Sales Reps'  
                        }
            })
    }])
}());(function () {
    var module = angular.module('salesrepdocsModule', ['treeModule', 'filelistModule', 'filecollectionModule', 'uploadModule', 'coreModule'])
    module.config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state("salesrep_docs", {
                url: "^/salesrepdocs",
                templateUrl: "app/salesrepdocsModule/views/salesrepdocs.html",
                controller: "SalesrepDocsController",
                ncyBreadcrumb: {
                    label: 'Sales Rep Directory'
                }
            })
    }])
}());(function () {
    var module = angular.module('salesrepviewModule', ["ui.router.tabs","ui.checkbox","ngFileUpload"])
    module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $urlRouterProvider.otherwise("/salesrepmain")
            $stateProvider
                    .state("salesrepview", {
                        url: "^/salesrepview",
                        controller: "SalesrepviewController",
                        templateUrl: "app/salesrepviewModule/views/salresrepview.html"
                    })
                    .state("salesrepview.salesrepmain", {
                        url: "^/salesrepview/salesrepmain",
                        templateUrl: "app/salesrepviewModule/views/salesrepmain.html"
                    })
                    .state("salesrepview.salesrepaddress", {
                        url: "^/salesrepview/salesrepaddress",
                        templateUrl: "app/salesrepviewModule/views/salesrepaddress.html"
                    })
                    .state("salesrepview.salesrepaction", {
                        url: "^/salesrepview/salesrepaction",
                        templateUrl: "app/salesrepviewModule/views/salesrepaction.html"
                    })
                    .state("salesrepview.salesrepemail", {
                        url: "^/salesrepview/salesrepemail",
                        templateUrl: "app/salesrepviewModule/views/salesrepemail.html"
                    })
                    .state("salesrepview.salesrepnote", {
                        url: "^/salesrepview/salesrepnote",
                        templateUrl: "app/salesrepviewModule/views/salesrepnote.html"
                    })
                    .state("salesrepview.salesrepphone", {
                        url: "^/salesrepview/salesrepphone",
                        templateUrl: "app/salesrepviewModule/views/salesrepphone.html"
                    })
        }])
}());(function(){
  var module = angular.module('slideshowModule',['ui.router','coreModule'])  
  module.config(["$stateProvider",function($stateProvider){
          $stateProvider
                  .state('slideshow',{
                      url: '^/slideshow/:id',
              templateUrl: 'app/slideshowModule/views/slideshow.html',
              controller: 'SlideshowController'
          })
  }])
}());(function(){
  var module = angular.module("sysadminModule",["ui.router","ui.checkbox","sysadminusersModule","sysadmingroupsModule","sysadminmessagesModule","coreModule"])
  module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $stateProvider
                  .state('sysadmin',{
                      url: '^/sysadmin',
              templateUrl: 'app/sysadminModule/views/sysadmin.html',
              controller: 'SysadminController',
              ncyBreadcrumb: {
                          label: 'Admin'  
                        }
          })
                  
  }])
}());(function(){
  var module = angular.module("sysadmingroupModule",["ui.router.tabs","ui.checkbox","coreModule","dndLists"]) 
  module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadmingroupmain')
          $stateProvider
                  .state('sysadmingroup',{
                      url: '^/sysadmingroup',
              templateUrl: 'app/sysadmingroupModule/views/sysadmingroup.html',
              controller: 'SysadmingroupController'
          })
                  .state('sysadmingroup.sysadmingroupmain',{
                      url: '^/sysadmingroup/sysadmingroupmain',
              templateUrl: 'app/sysadmingroupModule/views/sysadmingroupmain.html'
          })
                  .state("sysadmingroup.sysadmingroupusers",{
                      url: '^/sysadmingroup/sysadmingroupusers',
              templateUrl: 'app/sysadmingroupModule/views/sysadmingroupusers.html'
          })
  }])
}());(function(){
  var module = angular.module('sysadmingroupsModule',["ui.router","ui.checkbox","sysadmingroupModule","coreModule","tableModule"])
  module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadmingroupmain')
          $stateProvider
                  .state('sysadmin.sysadmingroups',{
                      url: '^/sysadmingroups',
              templateUrl: 'app/sysadmingroupsModule/views/sysadmingroups.html',
              controller: 'SysadmingroupsController'
          })
  }])
}());(function () {
    var module = angular.module('sysadminlogModule', ['coreModule'])

    module.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state('sysadminlog', {
                        url: '^/sysadminlog',
                        templateUrl: 'app/sysadminlogModule/views/sysadminlog.html',
                        controller: 'SysadminlogController'
                    })
        }])
}());(function(){
  var module = angular.module('sysadminlogsModule',["ui.router","ui.checkbox","sysadminlogModule","coreModule","tableModule"])
  module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadmingroupmain')
          $stateProvider
                  .state('sysadmin.sysadminlogs',{
                      url: '^/sysadminlogs',
              templateUrl: 'app/sysadminlogsModule/views/sysadminlogs.html',
              controller: 'SysadminlogsController'
          })
  }])
}());(function () {
    var module = angular.module('sysadminmessageModule', ['ui.router','coreModule','ui.tinymce'])
    module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadminmessage')
          $stateProvider
                  .state('sysadminmessage',{
                      url: '^/sysadminmessage',
              templateUrl: 'app/sysadminmessageModule/views/sysadminmessage.html',
              controller: 'SysadminmessageController'
          })
  }])
}());(function () {
    var module = angular.module('sysadminmessagesModule', ["coreModule","ui.router","sysadminmessageModule","tableModule"])  
    module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadminmessage')
          $stateProvider
                  .state('sysadmin.sysadminmessages',{
                      url: '^/sysadminmessages',
              templateUrl: 'app/sysadminmessagesModule/views/sysadminmessages.html',
              controller: 'SysadminmessagesController'
          })
  }])
}());(function(){
  var module = angular.module("sysadminuserModule",["ui.router.tabs","ui.checkbox","coreModule","dndLists"]) 
  module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadminusermain')
          $stateProvider
                  .state('sysadminuser',{
                      url: '^/sysadminuser',
              templateUrl: 'app/sysadminuserModule/views/sysadminuser.html',
              controller: 'SysadminuserController'
          })
                  .state('sysadminuser.sysadminusermain',{
                      url: '^/sysadminuser/sysadminusermain',
              templateUrl: 'app/sysadminuserModule/views/sysadminusermain.html'
          })
                  .state("sysadminuser.sysadminusersecurity",{
                      url: '^/sysadminuser/sysadminusersecurity',
              templateUrl: 'app/sysadminuserModule/views/sysadminusersecurity.html'
          })
                  .state('sysadminuser.sysadminusergroups',{
                      url: '^/sysadminuser/sysadminusergroups',
              templateUrl: 'app/sysadminuserModule/views/sysadminusergroups.html'
          })
  }])
}());(function(){
  var module = angular.module("sysadminusersModule",["ui.router","ui.checkbox","sysadminuserModule","coreModule","tableModule"]) 
  module.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){
          $urlRouterProvider.otherwise('/sysadminusermain')
          $stateProvider
                  .state('sysadmin.sysadminusers',{
                      url: '^/sysadminusers',
              templateUrl: 'app/sysadminusersModule/views/sysadminusers.html',
              controller: 'SysadminusersController'
          })
  }])
}());(function(){
  var module = angular.module('tableModule',['ui.bootstrap','coreModule']);  
}());(function () {
    var module = angular.module('techschedModule', ['coreModule', 'tableModule', 'profilesModule'])
    module.config(["$stateProvider",'$urlRouterProvider',function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.when('/techsched','/techsched/shedule');

        $stateProvider
                .state("techsched", {
                    url: "^/techsched",
                    templateUrl: "app/techschedModule/views/schedule.html",
                    controller: "ScheduleController"
                })

            .state("techsched.shedule", {
                url: "^/techsched/shedule"
                , controller: "TableController"
                , templateUrl: "app/tableModule/views/table.html"
            })
            .state("techsched.techschedwo", {
                url: "^/techsched/techschedwo"
                , controller: "TechSchedWOController"
                , templateUrl: "app/techschedModule/views/techschedwo.html"
            })
            .state("techsched.techschedwonote", {
                url: "^/techsched/techschedwonote"
                , controller: "TechSchedWONoteController"
                , templateUrl: "app/techschedModule/views/techschedwonote.html"
            })
            .state("techsched.techschedshipping", {
                url: "^/techsched/techschedshipping"
                , controller: "TechSchedShippingController"
                , templateUrl: "app/techschedModule/views/techschedshipping.html"
            })
    }]);
}())
;(function () {
    var module = angular.module('techschedviewModule', ["ui.router.tabs", 'coreModule', 'tableModule']);
    module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $urlRouterProvider.otherwise("/techschedview")
        $stateProvider
            .state("techschedview", {
                url: "^/techschedview"
                , controller: "TechSchedViewController"
                , templateUrl: "app/techschedviewModule/views/techschedview.html"
            })
            .state("techschedview.techschedmain", {
                url: "^/techschedview/techschedmain"
                , controller: "TechSchedMainController"
                , templateUrl: "app/techschedviewModule/views/techschedmain.html"
            })
            .state("techschedview.techschedwo", {
                url: "^/techschedview/techschedwo"
                , controller: "TechSchedWOController"
                , templateUrl: "app/techschedviewModule/views/techschedwo.html"
            })
            .state("techschedview.techschedwonote", {
                url: "^/techschedview/techschedwonote"
                , controller: "TechSchedWONoteController"
                , templateUrl: "app/techschedviewModule/views/techschedwonote.html"
            })
            .state("techschedview.techschedshipping", {
                url: "^/techschedview/techschedshipping"
                , controller: "TechSchedShippingController",
                templateUrl: "app/techschedviewModule/views/techschedshipping.html"
            });
}]);
}());(function () {
    angular.module('treeModule', ['treeControl','ui.bootstrap.contextMenu'])  
}());(function () {
    angular.module('uploadModule', ['ngFileUpload','coreModule','ui.bootstrap'])  
}());(function(){
  var module = angular.module('userprofileModule',['coreModule'])  
  
  module.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
            $stateProvider
                    .state("userprofile", {
                        url: "^/userprofile",
                        templateUrl: "app/userprofileModule/views/userprofile.html",
                        controller: "UserprofileController",
                        ncyBreadcrumb: {
                            label: 'User Profile'
                        }
                    })
                    
        }])
}());(function () {
    var module = angular.module('workorderModule', ['treeModule','photolistModule','photocollectionModule','filelistModule','filecollectionModule','uploadModule','coreModule'])
    module.config(["$stateProvider",function($stateProvider){
            $stateProvider
                    .state("workorder",{
                        url: "^/workorder/:search/:from",
                templateUrl: "app/workorderModule/views/workorder.html",
                controller: "WorkorderController",
                ncyBreadcrumb: {
                          label: 'Workorder PDF'  
                        },
                params: {
                    search: null,
                    from: null
                }
            })
    }])
}());(function () {
    var factory = function ($http) {
        var message = {
            loadModule: 'Initializing module .. please wait',
            loadGrid: 'Fetching data .. Please wait',
            tree_level_valid: 'This Tree Level already exist, Please enter another one.',
            location_type_name_valid: 'This Location Type already exist, Please enter another one.',
            deleteRecord: 'This record is deleted successfully',
            property_type_name_valid: 'This Property Type already exist, Please enter another one.',
            building_code_name_valid: 'This Building Code already exist, Please enter another one.',
            pricing_policy_name_valid: 'This Pricing Policy already exist, Please enter another one.',
            pricing_type_name_valid: 'This Pricing Type already exist, Please enter another one.',
            purchase_type_name_valid: 'This Purchase Type already exist, Please enter another one.',
            scope_name_valid: 'This Scope already exist, Please enter another one.',
            territory_name_valid: 'This Territory already exist, Please enter another one.',
            unit_name_valid: 'This Unit Name already exist, Please enter another one.',
            number_valid: 'Please enter numbers only.',
            phone_valid: 'Invalid phone number!',
            update_product: 'Product is updated successfully',
            deleteChild_valid: 'You cannot delete parent items.',
            product_name_valid: 'This Product Name already exist, Please enter another one.',
            product_type_name_valid: 'This Product Type already exist, Please enter another one.',
            deletepropertyvalues: 'You have removed Some Values from this property type, do you want to proceed?.',
            changepropertytype: 'The property values will be deleted if you change the Property Type.',
            cannotdeleteRecord: 'You can\'t delete this record, This record has relations.',
            disabled_property_type: 'You can\'t change the Property Type for this property because it have some used values.',
            property_name_valid: 'This Property Name already exist, Please enter another one.',
            the_value_valid: 'This Value already exist, Please enter another one.',
            decimal_valid: 'Please enter decimal only upto 2 decimal',
            property_name_empty: 'Please add Property Name',
            deleteassignedproperties: 'You\'ve removed some properties from this product type, do you want to proceed?',
            cannotdeletePropertyValue: 'You can\'t delete this value, This value is used in a product.',
            cannotremoveallPropertyValues: 'You can\'t delete these values, These values are used in a product.',
            decimal4_valid: 'Please enter numbers only', //'Please enter decimal only upto 4 decimal',
            policy_price_valid: 'This Policy and this Type already exist fot this product, Please select other types.',
            changeproducttype: 'Changing current product\'s type will affect product\'s properties',
            location_name_valid: 'This Location Name already exist, Please enter another one.',
            update_location: 'Location is updated successfully',
            application_name_valid: 'This Name already exist, Please enter another one.',
            update_industry: 'Industry is updated successfully',
            update_leadorigin: 'Lead Origin is updated successfully',
            lead_origin_name_valid: 'This Lead Origin Name already exist, Please enter another one.',
            clause_name_valid: 'This Clauses Name already exist, Please enter another one.',
            pricing_policy_id_valid: 'This Pricing Policy already exist for this Clause, Please enter another one.',
            selectparent_valid: 'You cannot select parent items.',
            item_name_valid: 'This Item name already exist for this Clause, Please enter another one.',
            productdetails_valid: 'This Item not based on a product from products Catalog!',
            update_customer: 'Customer is updated successfully',
            contact_name_valid: 'This contact name already exist, Please enter another one.',
            savingLoad: 'Saving data .. Please wait',
            customer_name_valid: 'This customer name already exist, Please enter another one.',
            selectCustomer: 'Please add customer first.',
            emptyAddress: 'Please add at least one address for this contact',
            emptyEmail: 'Please add at least one email for this contact',
            emptyPhone: 'Please add at least one phone for this contact',
            checkEmail: ' Not valid email!',
            empty_length: 'Please insert length for the product.',
            norelated_products: 'No related products were added, Do you want to continue?',
            valid_address: 'Please insert address.',
            valid_city: 'Please insert city.',
            valid_phone: 'Please insert phone.',
            valid_email: 'Please insert email.',
            valid_customer_name: 'Please insert contact name.',
            changequote: 'Changing the Quote will affect on the extra values',
            changerereferencedrawing: 'Changing the Reference Drawing will affect on the extra values',
            the_name_valid: 'This Name already exist, Please enter another one.',
        }

        var productForm = {
            sort_order: 'Sort Order',
            product_type_id: 'Product Type',
            product_code: 'Code',
            product_name: 'Name',
            unit_id: 'Unit',
            quote_letter_product_name: 'Quote letter Name',
            is_displayed_inreports: 'Display in Quote Letter',
            parent_id: 'Parent',
            btnSave: 'Save',
            btnCancel: 'Cancel',
            general: 'General',
            price: 'Prices',
            descgeneral: 'go to General',
            descprice: 'go to Prices',
            descproperty: 'go to Properties'
        };
        var locationForm = {
            sort_order: 'Sort Order',
            location_type_id: 'Location Type',
            abbreviation: 'Abbreviation',
            location_name: 'Name',
            building_code_id: 'Building Code',
            wind_speed: 'Wind Speed',
            mile_age: 'Mileage',
            parent_id: 'Parent',
            airfare_charge: 'AirFare',
            alt_airfare_charge: 'Alt AirFare',
            half_load_charge: 'Half Load',
            full_load_charge: 'Full Load',
            team_load_charge: 'Team Load',
            danger_pay: 'Danger Ppay',
            description: 'Description',
            price: 'Prices',
            btnSave: 'Save',
            btnCancel: 'Cancel'
        };

        var industryForm = {
            sort_order: 'Sort Order',
            abbreviation: 'Abbreviation',
            application_name: 'Name',
            air_charge_rate: 'Air Charge Rate',
            parent_id: 'Parent',
            description: 'Description',
            btnSave: 'Save',
            btnCancel: 'Cancel'
        };

        var leadoriginForm = {
            sort_order: 'Sort Order',
            abbreviation: 'Abbreviation',
            lead_origin_name: 'Name',
            parent_id: 'Parent',
            description: 'Description',
            btnSave: 'Save',
            btnCancel: 'Cancel'
        };

        var clauseForm = {
            clause_name: 'Clause Name',
            description: 'Description',
            btnSave: 'Save',
            btnCancel: 'Cancel'
        };
        var clauseetailsForm = {
            clause_name: 'Clause Name',
            description: 'Description',
            btnSave: 'Save',
            btnCancel: 'Cancel',
            pricing_policy_id: 'Pricing Policy',
            clause_wording: 'Clause Wording',
            btnBack: 'Back'
        };



        return {
            getMessage: function (code) {
                return message[code];
            },
            getproductFormLabels: function () {
                return productForm;
            },
            getlocationFormLabels: function () {
                return locationForm;
            },
            getIndustryFormLabels: function () {
                return industryForm;
            },
            getleadoriginFormLabels: function () {
                return leadoriginForm;
            },
            getclauseFormLabels: function () {
                return clauseForm;
            },
            getclausedetailsFormLabels: function () {
                return clauseetailsForm;
            }
        }
    }
    factory.$inject = ['$http']
    angular.module('constantModule')
            .factory('constantService', factory)
}())
;(function () {
    var controller = function ($scope, coreService, authService, $stateParams, $state) {
        $scope.invalid = true
        $scope.user = {
            username: '',
            password: ''
        }
        var checkPassword = function (password) {
            if (!angular.isDefined(password))
                return false
            if (password.length < 8)
                return false
            if (!password.match(/[A-Z]+/))
                return false
            if (!password.match(/\d+/))
                return false
            return true
        }
        var checkUserName = function (username) {
            if (!angular.isDefined(username))
                return 0;
            if (username.match(/-/)) {
                return 2;
                $scope.username = false
            } else {
                return 1;
                $scope.username = true
            }
        }
        $scope.$watch('user', function (newVal, oldVal) {
            if (newVal !== oldVal) {
                var username = newVal.username;
                var password = newVal.password;
                if (username !== '' && password !== '') {
                    /*
                    if (checkPassword(password)) {
                        $scope.somewrong = false;
                        $scope.invalid = false;
                    } else {
                        $scope.errorMessage = "The password you've typed is not compliant with the system strong password"
                        $scope.somewrong = true;
                        $scope.invalid = true;
                    }
                    */
                } else {
                    $scope.invalid = true;
                    $scope.somewrong = true;
                    $scope.errorMessage = "Please enter your user name and password"
                }
            }
        }, true)
        $scope.login = function () {
            authService.login($scope.user)
                .then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        if (response.data.hasOwnProperty('groups')) {
                            coreService.resetAlert()
                            coreService.setUser(response.data)
                            authService.setUserGroups(response.data)

                        } else if (response.data.hasOwnProperty('slideshow_id')) {
                            $state.go('slideshow', {
                                id: response.data.slideshow_id
                            })
                        } else if (response.data.hasOwnProperty('customerfolder_id')) {
                            $state.go('repocustomer', {
                                id: response.data.customerfolder_id
                            })
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'error',
                                message: 'User name or password not correct'
                            })
                        }
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'authService', '$stateParams', "$state"]
    angular.module('authModule')
        .controller('AuthController', controller)
}());(function () {
    var controller = function ($scope, coreService, authService, $stateParams, $state) {
        $scope.invalid = true
        $scope.user = {
            username: '',
            password: ''
        }
        var checkPassword = function (password) {
            if (!angular.isDefined(password))
                return false
            if (password.length < 8)
                return false
            if (!password.match(/[A-Z]+/))
                return false
            if (!password.match(/\d+/))
                return false
            return true
        }
        var checkUserName = function (username) {
            if (!angular.isDefined(username))
                return 0;
            if (username.match(/-/)) {
                return 2;
                $scope.username = false
            } else {
                return 1;
                $scope.username = true
            }
        }
        $scope.$watch('user', function (newVal, oldVal) {
            if (newVal !== oldVal) {
                var username = newVal.username;
                var password = newVal.password;
                if (username !== '' && password !== '') {
                    /*
                    if (checkPassword(password)) {
                        $scope.somewrong = false;
                        $scope.invalid = false;
                    } else {
                        $scope.errorMessage = "The password you've typed is not compliant with the system strong password"
                        $scope.somewrong = true;
                        $scope.invalid = true;
                    }
                    */
                } else {
                    $scope.invalid = true;
                    $scope.somewrong = true;
                    $scope.errorMessage = "Please enter your user name and password"
                }
            }
        }, true)
        $scope.login = function () {
            authService.replogin($scope.user)
                .then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        if (response.data.hasOwnProperty('groups')) {
                            coreService.resetAlert()
                            coreService.setUser(response.data)
                            authService.setUserGroups(response.data)
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'error',
                                message: 'User name or password not correct'
                            })
                        }
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'authService', '$stateParams', "$state"]
    angular.module('authModule')
        .controller('RepLoginController', controller)
}());(function () {
    var factory = function ($http, coreService, $filter) {
        var usergroups = {
            privileges: {
                woadmin: false,
                wouser: false,
                wodel: false,
                financial: false,
                pos: false,
                /* manual groups */
                manadmin: false,
                manuser: false,
                mandel: false,
                manreadonly: false,
                /* photolib groups */
                photoadmin: false,
                photouser: false,
                /* salesrep group */
                salesrep: false,
                /* sysadmin */
                sysadmin: false,
                /* techsched */
                schedadmin: false,
                schedship: false,
                schedcontract: false,
                schedtech: false,
                schedviewer: false,
                
                quoteadmin: false,
                quoteuser: false,
                procadmin: false,
                procuser: false,
                procdel: false,
                procreadonly: false,
                hradmin: false,
                hruser: false,
                hrdel: false,
                hrreadonly: false,
                repoadmin: false,
                repouser: false,
                repodel: false,
                reporeadonly: false,
                repolistreadonly: false,
                sales: false,
                /* primary group */
                primary: "",
                /* techschedule group */
                techschedule: true,
                /* ops group */
                opsadmin: false,
                opsuser: false,
                opsdel: false,
                opsreadonly:false,
                /* salesrepdocs group */
                salesrepdocsadmin: false,
                salesrepdocsuser: false
            },
            states: []
        }
        return {
            setUserGroups: function (user) {
                usergroups.states = []
                usergroups.privileges = {}
                if ($filter('filter')(user.groups, {
                        group_name: 'SysAdmin'
                    }).length)
                    usergroups.privileges.sysadmin = true
                else
                    usergroups.privileges.sysadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'WOAdmin'
                    }).length)
                    usergroups.privileges.woadmin = true;
                else
                    usergroups.privileges.woadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'WOUser'
                    }).length)
                    usergroups.privileges.wouser = true;
                else
                    usergroups.privileges.wouser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'WODel'
                    }).length)
                    usergroups.privileges.wodel = true;
                else
                    usergroups.privileges.wodel = false
                if ($filter('filter')(user.groups, {
                        group_name: 'Financial'
                    }).length)
                    usergroups.privileges.financial = true;
                else
                    usergroups.privileges.financial = false
                if ($filter('filter')(user.groups, {
                        group_name: 'POS'
                    }).length)
                    usergroups.privileges.pos = true;
                else
                    usergroups.privileges.pos = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ManAdmin'
                    }).length)
                    usergroups.privileges.manadmin = true;
                else
                    usergroups.privileges.manadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ManUser'
                    }).length)
                    usergroups.privileges.manuser = true;
                else
                    usergroups.privileges.manuser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ManDel'
                    }).length)
                    usergroups.privileges.mandel = true;
                else
                    usergroups.privileges.mandel = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ManReadOnly'
                    }).length)
                    usergroups.privileges.manreadonly = true;
                else
                    usergroups.privileges.manreadonly = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ProcAdmin'
                    }).length)
                    usergroups.privileges.procadmin = true;
                else
                    usergroups.privileges.procadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ProcUser'
                    }).length)
                    usergroups.privileges.procuser = true;
                else
                    usergroups.privileges.procuser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ProcDel'
                    }).length)
                    usergroups.privileges.procdel = true;
                else
                    usergroups.privileges.procdel = false
                if ($filter('filter')(user.groups, {
                        group_name: 'ProcReadOnly'
                    }).length)
                    usergroups.privileges.procreadonly = true;
                else
                    usergroups.privileges.procreadonly = false;
                if ($filter('filter')(user.groups, {
                        group_name: 'OpsAdmin'
                    }).length)
                    usergroups.privileges.opsadmin = true;
                else
                    usergroups.privileges.opsadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'OpsUser'
                    }).length)
                    usergroups.privileges.opsuser = true;
                else
                    usergroups.privileges.opsuser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'OpsDel'
                    }).length)
                    usergroups.privileges.opsdel = true;
                else
                    usergroups.privileges.opsdel = false
                if ($filter('filter')(user.groups, {
                        group_name: 'OpsReadOnly'
                    }).length)
                    usergroups.privileges.opsreadonly = true;
                else
                    usergroups.privileges.opsreadonly = false;
                if ($filter('filter')(user.groups, {
                        group_name: 'SalesrepDocsAdmin'
                    }).length)
                    usergroups.privileges.salesrepdocsadmin = true;
                else
                    usergroups.privileges.salesrepdocsadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'SalesrepDocsUser'
                    }).length)
                    usergroups.privileges.salesrepdocsuser = true;
                else
                    usergroups.privileges.salesrepdocsuser = false
//                if ($filter('filter')(user.groups, {
//                        group_name: 'SalesrepDocsDel'
//                    }).length)
//                    usergroups.privileges.salesrepdocsdel = true;
//                else
//                    usergroups.privileges.salesrepdocsdel = false
//                if ($filter('filter')(user.groups, {
//                        group_name: 'SalesrepDocsReadOnly'
//                    }).length)
//                    usergroups.privileges.salesrepdocsreadonly = true;
//                else
//                    usergroups.privileges.salesrepdocsreadonly = false;
                if ($filter('filter')(user.groups, {
                        group_name: 'HRAdmin'
                    }).length)
                    usergroups.privileges.hradmin = true;
                else
                    usergroups.privileges.hradmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'HRUser'
                    }).length)
                    usergroups.privileges.hruser = true;
                else
                    usergroups.privileges.hruser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'HRDel'
                    }).length)
                    usergroups.privileges.hrdel = true;
                else
                    usergroups.privileges.hrdel = false
                if ($filter('filter')(user.groups, {
                        group_name: 'HRReadOnly'
                    }).length)
                    usergroups.privileges.hrreadonly = true;
                else
                    usergroups.privileges.hrreadonly = false

                if ($filter('filter')(user.groups, {
                        group_name: 'RepoAdmin'
                    }).length)
                    usergroups.privileges.repoadmin = true;
                else
                    usergroups.privileges.repoadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'RepoUser'
                    }).length)
                    usergroups.privileges.repouser = true;
                else
                    usergroups.privileges.repouser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'RepoDel'
                    }).length)
                    usergroups.privileges.repodel = true;
                else
                    usergroups.privileges.repodel = false
                if ($filter('filter')(user.groups, {
                        group_name: 'RepoReadOnly'
                    }).length)
                    usergroups.privileges.reporeadonly = true;
                else
                    usergroups.privileges.reporeadonly = false
                if ($filter('filter')(user.groups, {
                        group_name: 'RepoListUpload'
                    }).length)
                    usergroups.privileges.repolistupload = true
                else
                    usergroups.privileges.repolistupload = false
                if ($filter('filter')(user.groups, {
                        group_name: 'PhotoAdmin'
                    }).length)
                    usergroups.privileges.photoadmin = true;
                else
                    usergroups.privileges.photoadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'PhotoUser'
                    }).length)
                    usergroups.privileges.photouser = true;
                else
                    usergroups.privileges.photouser = false
                if ($filter('filter')(user.groups, {
                        group_name: 'SR'
                    }).length && !$filter('filter')(user.groups, {
                        group_name: 'SalesRepDocsUser'
                    }).length)
                    usergroups.privileges.salesrep = true;
                else
                    usergroups.privileges.salesrep = false;
                if ($filter('filter')(user.groups, {
                        group_name: 'SchedAdmin'
                    }).length)
                    usergroups.privileges.schedadmin = true
                else
                    usergroups.privileges.schedadmin = false
                if ($filter('filter')(user.groups, {
                        group_name: 'SchedContract'
                    }).length)
                    usergroups.privileges.schedcontract = true
                else
                    usergroups.privileges.schedcontract = false
                if ($filter('filter')(user.groups, {
                        group_name: 'SchedShip'
                    }).length)
                    usergroups.privileges.schedship = true
                else
                    usergroups.privileges.schedship = false
                if ($filter('filter')(user.groups, {
                        group_name: 'SchedTech'
                    }).length)
                    usergroups.privileges.schedtech = true
                else
                    usergroups.privileges.schedtech = false
                if ($filter('filter')(user.groups, {
                        group_name: 'SchedViewer'
                    }).length)
                    usergroups.privileges.schedviewer = true
                else
                    usergroups.privileges.schedviewer = false
                if ($filter('filter')(user.groups, {
                        group_name: 'QuoteAdmin'
                    }).length)
                    usergroups.privileges.quoteadmin = true
                else
                    usergroups.privileges.quoteadmin = false

                if ($filter('filter')(user.groups, {
                        group_name: 'QuoteUser'
                    }).length)
                    usergroups.privileges.quoteuser = true
                else
                    usergroups.privileges.quoteuser = false

                usergroups.privileges.primary = $filter('filter')(user.groups, {
                        is_primary: 1
                    }).length ?
                    $filter('filter')(user.groups, {
                        is_primary: 1
                    })[0].group_name : "";
                if (usergroups.privileges.primary.match(/^t\d/i))
                    usergroups.privileges.sales = true
                else
                    usergroups.privileges.sales = false

                if (usergroups.privileges.sysadmin === true)
                    usergroups.states.push({
                        name: 'Admin',
                        module: 'sysadmin',
                        publication: false
                    })

                if (usergroups.privileges.photoadmin === true || usergroups.privileges.photouser === true)
                    usergroups.states.push({
                        name: 'Photo Library',
                        module: 'photolib',
                        publication: false
                    })

                if (usergroups.privileges.woadmin === true || usergroups.privileges.wouser === true || usergroups.privileges.wodel === true)
                    usergroups.states.push({
                        name: 'Work Order PDF',
                        module: 'workorder',
                        publication: false
                    })

                if (usergroups.privileges.salesrep === true)
                    usergroups.states.push({
                        name: 'Sales Reps',
                        module: 'salesrep',
                        publication: false
                    })

                if (usergroups.privileges.manadmin === true || usergroups.privileges.manuser === true || usergroups.privileges.mandel === true || usergroups.privileges.manreadonly === true)
                    usergroups.states.push({
                        name: 'TC manuals',
                        module: 'manual',
                        publication: true
                    })

                if (usergroups.privileges.procadmin === true || usergroups.privileges.procuser === true || usergroups.privileges.procdel === true || usergroups.privileges.procreadonly === true)
                    usergroups.states.push({
                        name: 'Sales directory',
                        module: 'proc',
                        publication: true
                    })

                if (usergroups.privileges.opsadmin === true || usergroups.privileges.opsuser === true || usergroups.privileges.opsdel === true || usergroups.privileges.opsreadonly === true)
                    usergroups.states.push({
                        name: 'Ops directory',
                        module: 'ops',
                        publication: true
                    });
                if (usergroups.privileges.salesrepdocsadmin === true || usergroups.privileges.salesrepdocsuser === true)
                    usergroups.states.push({
                        name: 'Sales Rep directory',
                        module: 'salesrep_docs',
                        publication: true
                    });

                if (usergroups.privileges.hradmin === true || usergroups.privileges.hruser === true || usergroups.privileges.hrdel === true || usergroups.privileges.hrreadonly === true)
                    usergroups.states.push({
                        name: 'Human resources',
                        module: 'hr',
                        publication: true
                    })

                if (usergroups.privileges.repoadmin === true || usergroups.privileges.repouser === true || usergroups.privileges.repodel === true || usergroups.privileges.reporeadonly === true)
                    usergroups.states.push({
                        name: 'Repository',
                        module: 'repo',
                        publication: false
                    })

                if (usergroups.privileges.schedadmin === true || usergroups.privileges.schedcontract === true || usergroups.privileges.schedship === true || usergroups.privileges.schedtech === true || usergroups.privileges.schedviewer === true)
                    usergroups.states.push({
                        name: 'Master Schedule',
                        module: 'techsched',
                        publication: false
                    })

                if (usergroups.privileges.quoteadmin === true || usergroups.privileges.quoteuser === true) {
                    usergroups.states.push({
                        name: 'ITC Quotes',
                        module: 'itcquotes',
                        publication: false
                    })
                }
                coreService.setPrivileges(usergroups.privileges)
                coreService.setStates(usergroups.states)
            },
            login: function (user) {
                return $http.post(coreService.getApi() + 'login', user)
            },
            replogin: function (user) {
                return $http.post(coreService.getApi() + 'replogin', user)
            }
        }
    }
    factory.$inject = ['$http', 'coreService', '$filter']
    angular.module('authModule')
        .factory('authService', factory)
}());(function () {
    var controller = function ($scope, $rootScope, coreService, constantService, clauseService, $state, $filter, $q) {


        var init = function () {
            $scope.clauseLabels = {};
            $scope.frmlabels = constantService.getclauseFormLabels();
            angular.forEach($scope.frmlabels, function (value, key) {
                $scope.clauseLabels[key] = value;
            });
        };
        init();

        var items = []
        var fields = [
            {name: 'clause_name', display: 'Clauses Name', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbclause = coreService.getParentDB('clause');
            if (coreService.getCurrentState() === 'clause') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.selectedclause !== null && angular.isDefined($scope.db.selectedclause)) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'clause';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        clauseService.getClause(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedclause';
                                    $scope.db.selectedProfile.uisref = "clause";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedclause';
                            $scope.db.selectedProfile.uisref = "clause";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.db.selectedclause.clause_id);
            console.log($scope.dbclause.selectedclause.clause_id);
            clauseService.deleteClause($scope.db.selectedclause.clause_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbclause.refresh = true;
                            $state.go('clause');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

        $scope.saveClause = function () {
            $scope.dbclause.selectedclause = $scope.db.selectedclause;
            console.log('clause_id: ' + $scope.dbclause.selectedclause.clause_id);
            $scope.action = false;
            if ($scope.dbclause.selectedclause.clause_id !== null && angular.isDefined($scope.dbclause.selectedclause.clause_id)) {
                $scope.updateClauseAction();
            }
            else {
                coreService.getUuid().then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        var uuid = response.data.success;
                        $scope.dbclause.selectedclause.clause_id = uuid;
                        $scope.updateClauseAction();
                    } else {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                });
            }
        };

        $scope.updateClauseAction = function () {
            clauseService.writeClause($scope.db.selectedclause).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.clause_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.clause_name_valid = constantService.getMessage('clause_name_valid');
                    } else {
                        $scope.dbclause.refresh = true;
                        $state.go('clause');

                        $scope.restClauseForm();
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.restClauseForm = function () {
            if ($scope.dbclause.selectedclause !== null && angular.isDefined($scope.dbclause.selectedclause)) {
                $scope.dbclause.refresh = true;
                $state.go('clause');
            }
            $scope.db[$scope.db.selectedProfile.selected] = null;
            $scope.addclause.clause_name.$valid = true;
            $scope.addclause.clause_name.$error.required = false;
            $scope.clause_name_valid = '';
        }

        $scope.getClauseDetails = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            $rootScope.clause_id = item.clause_id;
            $rootScope.clause_name = item.clause_name;
            console.log('clause_id: ' + $rootScope.clause_id);
            // $state.go('clausedetails');
        }

    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'constantService', 'clauseService', '$state', '$filter', '$q'];
    angular.module('clauseModule')
            .controller('clauseController', controller);
}());;/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


(function () {
    var controller = function ($scope, $rootScope, coreService, constantService, clauseService, quoteproductService, $state, $filter, $q) {
        var init = function () {
            $scope.clausedetailsLabels = {};
            $scope.frmlabels = constantService.getclausedetailsFormLabels();
            angular.forEach($scope.frmlabels, function (value, key) {
                $scope.clausedetailsLabels[key] = value;
            });

            $scope.clause_name = $rootScope.clause_name;
        };
        init();

        var items = []
        var fields = [
            {name: 'clause_name', display: 'Clauses Name', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'pricing_policy_name', display: 'Pricing Policy', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'clause_wording', display: 'Clause Wording', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.refresh = true;
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbClauseDetailsDetails = coreService.getParentDB('clausedetails');
            if (coreService.getCurrentState() === 'clausedetails') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    console.log('  $scope.updateDetails: ' + $scope.updateDetails);
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                }
                if ($rootScope.oldClauseId2 !== $rootScope.clause_id || $scope.refresh) {
                    $scope.refresh = false;
                    $rootScope.oldClauseId2 = $rootScope.clause_id;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'clause';
                    $scope.db.small = true;
                    $scope.db.profile = {};

                    $q.all([
                        clauseService.getClauseDetails($rootScope.clause_id),
                        coreService.getTableProfiles($scope.db.module),
                        quoteproductService.getPolicyList()
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        $scope.db.pricingpolicy = queues[2].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedClauseDetails'
                                    $scope.db.selectedProfile.uisref = "clausedetails";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;

                                    $scope.db.selectedProfile.filters['clause_id'] = $rootScope.clause_id;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedClauseDetails'
                            $scope.db.selectedProfile.uisref = "clausedetails";
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters['clause_id'] = $rootScope.clause_id;
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }

                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                        coreService.setAlert({type: 'exception', message: errors[2].data});
                    });
                }
            } else {
                return;
            }
        }, true);
        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            clauseService.deleteClauseDetails(item)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.refresh = true;
                            $scope.db.refresh = true;
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

        $scope.saveClauseDetails = function () {
            $scope.db.selectedClauseDetails.clause_id = $rootScope.clause_id;
  
            if ($scope.db.selectedClauseDetails !== null && angular.isDefined($scope.db.selectedClauseDetails)) {
                console.log($scope.db.selectedClauseDetails.id_for_view);
                if ($scope.db.selectedClauseDetails.id_for_view === null || !angular.isDefined($scope.db.selectedClauseDetails.id_for_view)) {
                    $scope.db.selectedClauseDetails.id_for_view = '';
                }
            }
                
            clauseService.writeClauseDetails($scope.db.selectedClauseDetails).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.pricing_policy_id_valid = '';
                    if (response.data.success === 2) {
                        $scope.pricing_policy_id_valid = constantService.getMessage('pricing_policy_id_valid');
                    } else {
                        $scope.refresh = true;
                        $scope.update = false;
                        $scope.updateDetails = false;
                        $scope.db[$scope.db.selectedProfile.selected] = null;
                        $scope.pricing_policy_id_valid = '';
                        if ($scope.db.selectedClauseDetails !== null && angular.isDefined($scope.db.selectedClauseDetails)) {
                            $scope.db.selectedClauseDetails.Oldpricing_policy_id = '';
                        }
                        $state.go('clausedetails');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }
    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'constantService', 'clauseService', 'quoteproductService', '$state', '$filter', '$q'];
    angular.module('clauseModule')
            .controller('clausedetailsController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getClause: function () {
                return $http.get(coreService.getApi() + 'getClause');
            },
            deleteClause: function (clause_id) {
                return $http.get(coreService.getApi() + 'deleteClause/' + clause_id);
            },
            writeClause: function (clause) {
                return $http.post(coreService.getApi() + 'updateClause', clause);
            },
            getClauseDetails: function (clause_id) {
                return $http.get(coreService.getApi() + 'getClauseDetails/' + clause_id);
            },
            deleteClauseDetails: function (clause) {
                return $http.post(coreService.getApi() + 'deleteClauseDetails', clause);
            },
            writeClauseDetails: function (clause) {
                return $http.post(coreService.getApi() + 'updateClauseDetails', clause);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('clauseModule')
            .factory('clauseService', factory);
}());;(function () {
    var controller = function ($scope, constantService) {
        $scope.$watch(function(code){
            console.log('code: '+ constantService.getMessage(code));
            return constantService.getMessage(code);
        })       
    }  
    controller.$inject = ['$scope', 'constantService'];
    angular.module('constantModule')
            .controller('constantController', controller);
}());(function () {
    var controller = function ($scope, coreService,$location) {
        $scope.$watch(function(){
            return coreService.getAlert()
        },function(newValue){
            $scope.alerts = newValue
        })
        $scope.closeAlert = function(index){
            $scope.alerts.splice(index,1)
        }
    }  
    controller.$inject = ['$scope', 'coreService','$location']
    angular.module('coreModule')
            .controller('CoreController', controller)
}());(function(){
  var directive = function($timeout){
      return {
          restrict: 'AC',
          link: function(scope,elm){
              $timeout(function(){
                  elm[0].focus()
              },0)
          }
      }
  }  
  directive.$inject = ['$timeout']
  angular.module('coreModule')
          .directive("focusMe",directive)
}());angular.module('coreModule')
        .directive("loadingIndicator", function () {
            return {
                restrict: "A",
                template: "<div  class='loadingPage'>\n\
                                <div class='sk-circle'>\n\
                                    <div class='sk-circle1 sk-child'></div>\n\
                                        <div class='sk-circle2 sk-child'></div>\n\
                                        <div class='sk-circle3 sk-child'></div> \n\
                                        <div class='sk-circle4 sk-child'></div> \n\
                                        <div class='sk-circle5 sk-child'></div> \n\
                                        <div class='sk-circle6 sk-child'></div> \n\
                                        <div class='sk-circle7 sk-child'></div>  \n\
                                        <div class='sk-circle8 sk-child'></div> \n\
                                        <div class='sk-circle9 sk-child'></div> \n\
                                        <div class='sk-circle10 sk-child'></div> \n\
                                        <div class='sk-circle11 sk-child'></div> \n\
                                        <div class='sk-circle12 sk-child'></div>\n\
                                </div>\n\
                                <h1>Sprung Portal V2</h1><span>Please Wait....</span>\n\
                        </div>",
                link: function (scope, element, attrs) {
                    scope.$on("loading-started", function (e) {
                        element.css({"display": "inline"});
                    });
                    scope.$on("loading-complete", function (e) {
                        element.css({"display": "none"});
                    });
                }
            };
        });
;(function(){
    var directive = function(){
        return function(scope,element,attrs){
            element.bind('keydown keypress',function(event){
                if(event.which === 13){
                    scope.$apply(function(){
                        scope.$eval(attrs.ngEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    };
    angular.module('coreModule')
            .directive('ngEnter',directive);
}());;(function () {
    var directive = function () {
        return {
            restrict: 'A',
            transclude: true,
            template:
                    '<a ng-click="onClick()">' +
                    '<span class="headtitle" ng-transclude ></span>' +
                    '<div class="sort-items">'
                    + '<i class="fa fa-caret-up" ng-hide="order === by && !reverse"></i> <i  class="fa fa-caret-down" ng-hide="order === by && reverse"></i>' + '</div>' +
                    '</a>',
//                template:
//                        '<a ng-click="onClick()">' +
//                        '<span ng-transclude></span>' +
//                        '<i class="fa fa-caret-up" ng-hide="order === by && !reverse"></i> <i  class="fa fa-caret-down" ng-hide="order === by && reverse"></i>'+
//                        '</a>',
            scope: {
                order: '=',
                by: '=',
                reverse: '='
            },
            link: function (scope, element, attrs) {
                scope.onClick = function () {
                    if (scope.order === scope.by) {
                        scope.reverse = !scope.reverse
                    } else {
                        scope.by = scope.order;
                        scope.reverse = false;
                    }
                }
            }
        }
    };
    angular.module('coreModule')
            .directive('ngSort', directive);
}());;(function () {
    var directive = function ($filter) {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                scope.$watch(function () {
                    return ngModel.$modelValue
                }, function (modelValue) {
                    if (modelValue !== null && angular.isDefined(modelValue)) {
                        var value = $filter('phoneNumber')(modelValue)
                        ngModel.$setViewValue(value)
                        ngModel.$render()
                    }
                })
            }
        }
    }
    directive.$inject = ['$filter']
    angular.module('coreModule')
            .directive('myPhone', directive)
}());(function(){
  var filter = function(){
      return function(postalcode){
          if (angular.isDefined(postalcode) && postalcode !== null && postalcode !== '') {
                postalcode = postalcode.replace(/[\W_]+/g, '')
            }
            return postalcode.toUpperCase().substr(0,3)+' '+postalcode.toUpperCase().substr(3)
      }
  }  
  angular.module('coreModule')
          .filter('canadaPostal',filter)
}());(function(){
    var filter = function(){
      return function(items,fields,filters){
          return items
      }
  }  
  filter.$inject = ['$filter']
  angular.module('coreModule')
          .filter('complexFilter',filter)
}());(function(){
    var filter = function($filter){
        return function(value,source){
            return $filter('filter')(source,{id: value},true)[0].name
        }
    }
    filter.$inject = ["$filter"]
    angular.module('coreModule')
            .filter('genericFilter',filter)
}());(function () {
    if (!String.prototype.repeat) {
        String.prototype.repeat = function (count) {
            'use strict';
            if (this == null) {
                throw new TypeError('can\'t convert ' + this + ' to object');
            }
            var str = '' + this;
            count = +count;
            if (count != count) {
                count = 0;
            }
            if (count < 0) {
                throw new RangeError('repeat count must be non-negative');
            }
            if (count == Infinity) {
                throw new RangeError('repeat count must be less than infinity');
            }
            count = Math.floor(count);
            if (str.length == 0 || count == 0) {
                return '';
            }
            // Ensuring count is a 31-bit integer allows us to heavily optimize the
            // main part. But anyway, most current (August 2014) browsers can't handle
            // strings 1 << 28 chars or longer, so:
            if (str.length * count >= 1 << 28) {
                throw new RangeError('repeat count must not overflow maximum string size');
            }
            var rpt = '';
            for (;;) {
                if ((count & 1) == 1) {
                    rpt += str;
                }
                count >>>= 1;
                if (count == 0) {
                    break;
                }
                str += str;
            }
            // Could we try:
            // return Array(count + 1).join(this);
            return rpt;
        }
    }
    var filter = function () {
        return function (input, n) {
            if (input === undefined) {
                input = '';
                return input;
            }
            if (input.length >= n) {
                return input;
            }
            var zeros = "0".repeat(n);
            return (zeros + input).slice(-1 * n);
        }
    }
    angular.module('coreModule')
        .filter('leftPad', filter)
}());(function(){
  var filter = function(){
      return function(items,item,prop){
          var exists = false;
          angular.forEach(items,function(itm){
              if(itm[prop].toLowerCase() === item[prop].toLowerCase()){
                  exists = true;
              }
          })
          return exists;
      }
  }  
  angular.module('coreModule')
          .filter('lowerCaseCompare',filter)
}());(function () {
    var filter = function () {
        return function (phone) {
            phone = phone.toString().trim();
            var newphone;
            if (angular.isDefined(phone) && phone !== null && phone !== '') {
                phone = phone.replace(/\D/g, '')
            }
            if(phone.length > 10){
                newphone = phone.substr(0,3)+' '+phone.substr(3,3)+' '+phone.substr(6,4)+' '+phone.substr(10)
            } else if(phone.length == 10) {
                newphone = '('+phone.substr(0,3)+')'+' '+phone.substr(3,3)+'-'+phone.substr(6)
            }
            else {
                newphone = phone
            }
            return newphone
        }
    }
    angular.module('coreModule')
            .filter('phoneNumber', filter)
}());(function () {
    Number.isFinite = Number.isFinite || function (value) {
        return typeof value === "number" && isFinite(value);
    }
    var filter = function () {
        return function (val) {
            if (Number.isFinite(val)) {
                return Math.round(val)
            } else {
                return val
            }
        }
    }
    angular.module('coreModule')
        .filter('roundSize', filter)
}());(function(){
  var filter = function(){
      return function(items,propin,propout,value){
          var val = null;
          angular.forEach(items,function(item){
              if(item[propin] === value){
                  val = item[propout]
              }
          })
          return val
      }
  }  
  angular.module('coreModule')
          .filter('singleValue',filter)
}());(function () {
    var filter = function () {
        return function (items, prop, letters) {
            if (angular.isDefined(items) && items.length) {
                var tempItems = []
                var re = RegExp("^" + letters, 'i')

                if (letters.toString().length > 0) {
                    if (Array.isArray(items)) {
                        angular.forEach(items, function (item) {
                            if (item[prop].toString().match(re)) {
                                tempItems.push(item)
                            }
                        })
                        return tempItems
                    }
                } else {
                    return items
                }
            }
            else
                return items
        }
    }
    angular.module('coreModule')
            .filter('startsWith', filter)
}());(function(){
    var filter = function(){
        return function(string){
            if(string.length > 0){
                return string.replace(/\.[a-z]{3,4}$/,"")
            }else{
                return string
            }
        }
    }
    angular.module('coreModule')
            .filter('stripExtension',filter)
}());(function () {
    var filter = function () {
        return function (int) {
            return int == 1 || int === true? 'Yes' : 'No';
        };
    };
    angular.module('coreModule')
            .filter('trueFalse', filter);
}());;(function () {
    var filter = function () {
        return function (myDate, type) {
            if (myDate === null || myDate === '') {
                return '';
            } else if (myDate !== null) {
                var localTime = moment.utc(myDate).toDate();
                if (type === 'datetime') {
                    if (moment(localTime).format('YYYY-MM-DD HH:mm:ss') == 'Invalid date')
                        return '';
                    else
                        return moment(localTime).format('YYYY-MM-DD HH:mm:ss');
                } else {
                    if (moment(localTime).format('YYYY-MM-DD') == 'Invalid date')
                        return '';
                    else
                        return moment(localTime).format('YYYY-MM-DD');
                }
            }
            else {
                return myDate
            }
        }
    }
    angular.module('coreModule')
            .filter('utcToLocal', filter);
}());

(function () {
    var filter = function () {
        return function (myDate, type) {
            if (myDate !== null) {
                if (type === 'datetime') {
                    return moment.utc(myDate).format('YYYY-MM-DD HH:mm:ss')
                }
                else {
                    return moment.utc(myDate).format('YYYY-MM-DD')
                }
            } else {
                return myDate
            }
        }
    }
    angular.module('coreModule')
            .filter('localToUtc', filter)
}());

// with format MM-DD-YYYY
(function () {
    var filter = function () {
        return function (myDate, type) {
            if (myDate === null || myDate === '') {
                return '';
            } else if (myDate !== null) {
                var localTime = moment.utc(myDate).toDate();
//                localTime.setDate(localTime.getDate() + 1);
                if (type === 'datetime') {
                    if (moment(localTime).format('MM-DD-YYYY HH:mm:ss') == 'Invalid date')
                        return '';
                    else
                        return moment(localTime).format('MM-DD-YYYY HH:mm:ss');
                } else {
                    if (moment(localTime).format('MM-DD-YYYY') == 'Invalid date')
                        return '';
                    else
                        return moment(localTime).format('MM-DD-YYYY');
                }
            }
            else {
                return myDate
            }
        }
    }
    angular.module('coreModule')
            .filter('utcToLocal2', filter);
}());

(function () {
    var filter = function () {
        return function (myDate, type) {
            if (myDate !== null) {
                if (type === 'datetime') {
                    return moment(myDate).format('MM-DD-YYYY HH:mm:ss')
                }
                else {
                    return moment(myDate).format('MM-DD-YYYY')
                }
            } else {
                return myDate
            }
        }
    }
    angular.module('coreModule')
            .filter('localToUtc2', filter)
}());;(function () {
    var factory = function ($http) {
        var service = {
            currentState: null,
            previousState: null,
            currentParams: null,
            privileges: null,
            user: null,
            states: [],
            api: null,
            baseUrl: null,
            version: null,
            alerts: [],
            photolib: null,
            workorder: null,
            manual: null,
            salesrep: null,
            sysadmin_users: null,
            sysadmin_groups: null,
            sysadmin_messages: null,
            sysadmin_logs: null,
            warnings: null,
            profileData: null
        }
        var alertSet = function (alert) {
            var m
            var type
            switch (alert.type) {
            case "exception":
                m = 'Exception: ';
                angular.forEach(alert.message, function (value, key) {
                    if (key !== 'type') {
                        if (key === 'file') {
                            m += key + ':' + value.replace(/\/data\/www\/api\//, '') + ' ';
                        } else
                            m += key + '' + value + '';
                    }
                });
                type = 'danger';
                break;
            case "error":
                m = alert.message;
                type = 'danger';
                break;
            case "success":
            case "info":
                m = alert.message;
                type = 'success';
                break;
            case "wait":
                m = alert.message;
                type = 'info';
                break;
            }
            return {
                type: type,
                message: m,
                timeout: type === 'info' || type === 'success' ? 5000 : 1000000
            }
        }
        return {
            clearAll: function () {
                angular.forEach(service, function (val, key) {
                    if (Array.isArray(val)) {
                        service[key] = []
                    } else {
                        if (key !== 'api' && key !== 'baseUrl' && key !== 'version')
                            service[key] = null
                    }
                })
            },
            setCurrentState: function (val) {
                service.currentState = val
            },
            getCurrentState: function () {
                return service.currentState
            },
            setPreviousState: function (val) {
                service.previousState = val
            },
            getPreviousState: function () {
                return service.previousState
            },
            setCurrentParams: function (val) {
                service.currentParams = val
            },
            getCurrentParams: function () {
                return service.currentParams
            },
            setDB: function (val) {
                service[service.currentState.replace(".", '_')] = val
            },
            getDB: function () {
                return service[service.currentState.replace(".", '_')]
            },
            getParentDB: function (parent) {
                return service[parent]
            },
            setPrivileges: function (val) {
                service.privileges = val
            },
            getPrivileges: function () {
                return service.privileges
            },
            setUser: function (val) {
                service.user = val
            },
            getUser: function () {
                return service.user
            },
            setStates: function (val) {
                service.states = val
            },
            getStates: function () {
                return service.states
            },
            setApi: function (val) {
                service.api = val
            },
            getApi: function () {
                return service.api
            },
            setBaseUrl: function (val) {
                service.baseUrl = val
            },
            getBaseUrl: function () {
                return service.baseUrl
            },
            setVersion: function (val) {
                service.version = val
            },
            getVersion: function () {
                return service.version
            },
            setAlert: function (val) {
                service.alerts.push(alertSet(val))
            },
            getAlert: function () {
                return service.alerts
            },
            resetAlert: function () {
                service.alerts = []
            },
            filterRecords: function (post) {
                return $http.post(service.api + 'filter', post)
            },
            getUuid: function () {
                return $http.get(service.api + 'uuid')
            },
            setWarnings: function (val) {
                service.warnings.push(val)
            },
            getWarnings: function () {
                return service.warnings
            },
            resetWarnings: function () {
                service.warnings = null
            },
            removeWarning: function (val) {
                service.warnings.splice(service.warnings.indexOf(val), 1)
            },
            zipCollection: function (collection, module) {
                var post = {
                    db: module,
                    collection: collection
                }
                return $http.post(service.api + 'zipcollection', post)
            },
            getCanDel: function (module) {
                switch (module) {
                case "workorder":
                    if (service.privileges.woadmin === true || service.privileges.wodel === true)
                        return true
                    else
                        return false
                    break;
                case "photolib":
                    if (service.privileges.photoadmin === true)
                        return true
                    else
                        return false
                    break;
                case "manual":
                    if (service.privileges.manadmin === true || service.privileges.mandel === true)
                        return true
                    else
                        return false
                    break;
                case "hr":
                    if (service.privileges.hradmin === true || service.privileges.hrdel === true)
                        return true
                    else
                        return false
                    break;
                case "proc":
                    if (service.privileges.procadmin === true || service.privileges.procdel === true)
                        return true
                    else
                        return false
                    break;
                case "repo":
                    if (service.privileges.repoadmin === true || service.privileges.repodel === true)
                        return true
                    else
                        return false
                    break;
                case "ops":
                    if (service.privileges.opsadmin === true || service.privileges.opsdel === true)
                        return true
                    else
                        return false
                    break;
                case "salesrep_docs":
                    if (service.privileges.salesrepdocsadmin === true)
                        return true
                    else
                        return false
                    break;
                }
            },
            getTableProfiles: function (module) {
                return $http.get(service.api + 'tableprofiles/' + module + '/' + service.user.user_id)
            },
            writeTableProfile: function (profile) {
                return $http.post(service.api + 'tableprofile', profile)
            },
            updateTableProfile: function (profile) {
                return $http.put(service.api + 'tableprofile', profile)
            },
            deleteTableProfile: function(profileid){
                return $http.delete(service.api+'tableprofile/'+profileid);
            },
            exportData: function(post){
                return $http.post(service.api+'export',post)
            },
            getTerritoryId: function (territory) {
                return $http.get(service.api + 'territoryid/' + territory)
            },
            getPhoneTypes: function () {
                return $http.get(service.api + 'phonetypes')
            },
            getAddressTypes: function () {
                return $http.get(service.api + 'addresstypes')
            },
            getEmailTypes: function () {
                return $http.get(service.api + 'emailtypes')
            },
            getCountries: function () {
                return $http.get(service.api + 'salesrepcountries')
            },
            getCountryStates: function (countryid) {
                return $http.get(service.api + 'salesrepstates/' + countryid)
            },
            getCities: function (stateid) {
                return $http.get(service.api + 'salesrepcities/' + stateid)
            },
            addCity: function (city) {
                return $http.post(service.api + 'addcity', city)
            },
            getAllTechs: function(){
                return $http.get(service.api + 'getalltechs');
            },
            getSalesEmails: function(type,salesoffice){
                return $http.get(service.api + 'getsalesemails/'+type+'/'+salesoffice);
            },
            setProfileData: function(profileData){
                service.profileData = profileData;
            },
            getProfileData: function(){
                return service.profileData;
            }
        }
    }
    factory.$inject = ['$http']
    angular.module('coreModule')
        .factory('coreService', factory)
}());(function () {
    var controller = function ($scope, coreService,dashboardService,$filter) {
        var getMessages = function(){
          dashboardService.getMessages()
                  .then(function(response){
              if(!response.data.hasOwnProperty('file'))        {
                  $scope.items = response.data;
                 angular.forEach($scope.items,function(item){
                      switch(item.msg_priority){
                          case 0:
                              item.panelclass = 'panel-danger'
                              break
                          case 1:
                              item.panelclass = 'panel-warning'
                              break;
                          case 2:
                              item.panelclass = 'panel-success'
                              break;
                          case 3:
                              item.panelclass = 'panel-info'
                              break;
                      }
                      //item.msg_expire = moment(item.msg_expire,'YYYY-MM-DD hh:mm:ss').toDate()
                  })
                  
              } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
              }
          },function(response){
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
          })
      }
      getMessages()
      
    }  
    
    controller.$inject = ['$scope', 'coreService','dashboardService','$filter']
    angular.module('dashboardModule')
            .controller('DashboardController', controller)
}());(function(){
  var directive = function($compile){
      return {
          restrict: 'E',
          replace: true,
          link: function($scope,$element,$attrs){
              var body = '<div>'+$scope.$eval($attrs.messageBody)+'</div>'
              var $e = $compile(body)($scope)
              $element.replaceWith($e)
          }
      }
  }  
  directive.$inject = ['$compile']
  angular.module('dashboardModule')
          .directive('panelTemplate',directive)
}());(function () {
    var factory = function ($http, coreService,$filter) {
        return {
            getMessages: function(){
              return $http.get(coreService.getApi()+'messages/'+$filter('date')(new Date(),'Z'))
            }
        }
    }  
    factory.$inject = ['$http', 'coreService','$filter']
    angular.module('dashboardModule')
            .factory('dashboardService', factory)
}());/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


(function () {
    var controller = function ($scope, coreService, constantService, drawingService,$state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'dwg_number', display: 'Drawing Number', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'customer', display: 'Customer', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'customer1', display: 'Customer1', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'caption', display: 'Title',  type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'width', display: 'Width',  type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'length', display: 'Length',  type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'comments', display: 'Comments',  type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = coreService.getParentDB('drawing');
            if (coreService.getCurrentState() === 'drawing') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'drawing';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    var post = {user_id: coreService.getUser().user_id};
                    $q.all([
                        drawingService.getDrawingGrid(post),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedDrawing'
                                    $scope.db.selectedProfile.uisref = "adddrawing";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedDrawing';
                            $scope.db.selectedProfile.uisref = "adddrawing";
                            $scope.db.selectedProfile.filters = {};
                          
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            drawingService.deleteDrawing($scope.db.selectedDrawing.drawing_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            if (response.data.success == '1' || response.data.success == 1) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                                $scope.db.selectedDrawing = $scope.db.selectedDrawing;
                                $scope.db.refresh = true;
                                $state.go('drawing');
                            } else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'drawingService','$state', '$filter', '$q'];
    angular.module('drawingModule')
            .controller('drawingController', controller);
}());;/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
(function () {
    var factory = function ($http, coreService) {
        return {
            getDrawingGrid: function () {
                return $http.get(coreService.getApi() + 'drawinggrid');
            },
            deleteDrawing: function (drawing_id) {
                return $http.get(coreService.getApi() + 'deletedrawing/' + drawing_id);
            }
        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('drawingModule')
            .factory('drawingService', factory);
}());(function () {
    var controller = function ($scope, coreService, constantService, drawingrequestService, drawingrequestviewService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'DrawingRequestNO', display: 'ID', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'CompanyName', display: 'Company', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'Caption', display: 'Drawing Title', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'CreateDate', display: 'Creation Date', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'expirydates', filter_id: 'id', filter_name: 'name', filter_default: 0},
            {name: 'PromisedDeliveryDate', display: 'Promised Date', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'expirydates', filter_id: 'id', filter_name: 'name', filter_default: 0},
            {name: 'DrawingsNum', display: 'Drawing No', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'StatusName', display: 'Status', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'DrawingStatus', filter_id: 'status_id', filter_name: 'status_name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = coreService.getParentDB('drawingrequest');
            if (coreService.getCurrentState() === 'drawingrequest') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'drawingrequest';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    var post = {user_id: coreService.getUser().user_id};
                    $scope.promise = $q.all([
                        drawingrequestService.getDrawingRequestGrid(post),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedDrawingRequest'
                                    $scope.db.selectedProfile.uisref = "drawingrequestview.adddrawingrequest";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;

                                    $scope.db.selectedProfile.filters.expirydates = [
                                        {id: 'All', name: 'All'},
                                        {id: 'today', name: 'today'},
                                        {id: '-7', name: 'last 7 days'},
                                        {id: '-30', name: 'last 30 days'},
                                        {id: '+7', name: 'next 7 days'},
                                        {id: '+30', name: 'next 30 days'}
                                    ];
                                    $scope.db.selectedProfile.filters.DrawingStatus = [
                                        {status_id: 1, status_name: "Open"},
                                        {status_id: 6, status_name: "Submitted"},
                                        {status_id: 4, status_name: "Acknowledged"},
                                        {status_id: 5, status_name: "InProgress"},
                                        {status_id: 3, status_name: "Finished"},
                                        {status_id: 2, status_name: "Cancel"}
                                    ];

                                    $scope.db.selectedProfile.filters.DrawingStatus.unshift({status_name: 'All'});

                                    $scope.db.selectedProfile.filters['StatusName'] = 'All';
                                    $scope.db.selectedProfile.filters['CreateDate'] = 'All';
                                    $scope.db.selectedProfile.filters['PromisedDeliveryDate'] = 'All';
                                    $scope.db.selectedProfile.filters['user_id'] = coreService.getUser().user_id;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedDrawingRequest';
                            $scope.db.selectedProfile.uisref = "drawingrequestview.adddrawingrequest";
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters.expirydates = [
                                {id: 'All', name: 'All'},
                                {id: 'today', name: 'today'},
                                {id: '-7', name: 'last 7 days'},
                                {id: '-30', name: 'last 30 days'},
                                {id: '+7', name: 'next 7 days'},
                                {id: '+30', name: 'next 30 days'}
                            ];
                            $scope.db.selectedProfile.filters.DrawingStatus = [
                                {status_id: 1, status_name: "Open"},
                                {status_id: 6, status_name: "Submitted"},
                                {status_id: 4, status_name: "Acknowledged"},
                                {status_id: 5, status_name: "InProgress"},
                                {status_id: 3, status_name: "Finished"},
                                {status_id: 2, status_name: "Cancel"}
                            ];
                            $scope.db.selectedProfile.filters.DrawingStatus.unshift({status_name: 'All'});

                            $scope.db.selectedProfile.filters['StatusName'] = 'All';
                            $scope.db.selectedProfile.filters['CreateDate'] = 'All';
                            $scope.db.selectedProfile.filters['PromisedDeliveryDate'] = 'All';
                            $scope.db.selectedProfile.filters['user_id'] = coreService.getUser().user_id;
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            drawingrequestService.deleteDrawingRequest($scope.db.selectedDrawingRequest.DrawingRequestID)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            if (response.data.success == '1' || response.data.success == 1) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                                $scope.db.selectedDrawingRequest = $scope.db.selectedDrawingRequest;
                                $scope.db.refresh = true;
                                $state.go('drawingrequest');
                            } else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };


        $scope.printDrawingRequestReport = function (item) {
            var post = {drawing_request_id: item.DrawingRequestID, drawing_request_no: item.DrawingRequestNO};
            drawingrequestviewService.drawingRequestReport(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    console.log(response.data);
                    var path = response.data;
                    console.log(coreService.getBaseUrl());
                    window.open(coreService.getBaseUrl() + 'reports/' + path);
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'drawingrequestService', 'drawingrequestviewService', '$state', '$filter', '$q'];
    angular.module('drawingrequestModule')
            .controller('drawingrequestController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getDrawingRequestGrid: function (post) {
                return $http.post(coreService.getApi() + 'drawingrequestgrid', post);
            },
            deleteDrawingRequest: function (drawing_request_id) {
                return $http.get(coreService.getApi() + 'deletedrawingrequest/' + drawing_request_id);
            }
        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('drawingrequestModule')
            .factory('drawingrequestService', factory);
}());/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

(function () {
    var controller = function ($scope, $rootScope, coreService, drawingrequestviewService, constantService, $filter, $q, $state, $uibModal, Upload, $timeout) {
        $scope.$watch(function () {
            return coreService.getParentDB('drawingrequest');
        }, function (newValue) {
            $scope.db = newValue;
            console.log($rootScope.loadGrid);
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "drawingrequestview.attachment") {
                $scope.drawing_request_id = $rootScope.drawing_request_id;
                $scope.db.selectedDrawingRequest = $rootScope.selectedDrawingRequest;
                if ($rootScope.isNew) {
                    var wind_measure = $scope.db.selectedDrawingRequest.wind_measure;
                    $scope.db.selectedDrawingRequest.wind_KPA = wind_measure === 'KPA' ? 1 : 0;
                    $scope.db.selectedDrawingRequest.wind_KPH = wind_measure === 'KPH' ? 1 : 0;
                    $scope.db.selectedDrawingRequest.wind_MPH = wind_measure === 'MPH' ? 1 : 0;
                    $scope.db.selectedDrawingRequest.modify_date = moment().format('YYYY-MM-DD HH:mm:ss');
                    console.log($scope.db.selectedDrawingRequest);
                    drawingrequestviewService.writeDrawingRequest($scope.db.selectedDrawingRequest).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.getDrawingFiles($scope.drawing_request_id);
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
                }
                else {
                    $scope.getDrawingFiles($scope.drawing_request_id);
                }
            }
        }, true);

        $scope.getDrawingFiles = function (drawing_request_id) {
            drawingrequestviewService.getDrawingRequestFiles(drawing_request_id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.drAttachments = response.data;
                    drawingrequestviewService.setdrAttachments(response.data);
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.getFiles = function ($files) {
            console.log($files.length);
            if ($files.length) {
                console.log($scope.drawing_request_id);
                var filenames = [];
                var names = [];
                var action = {
                    attachments: []
                }
                for (var x = 0; x < $files.length; x++) {
                    filenames.push({filename: $files[x].name, type: $files[x].type})
                    names.push($files[x].name)
                }
                var data = {
                    db: 'drawingrequest',
                    action: action,
                    filenames: filenames,
                    drawing_request_id: $scope.drawing_request_id
                }
                var url = "api/common/receiveupload.php";
                coreService.resetAlert()
                coreService.setAlert({type: 'wait', message: 'Uploading files ... Please wait'})
                var upload = Upload.upload({
                    url: url,
                    methos: "POST",
                    fields: data,
                    fileFormDataNames: names,
                    file: $files
                })
                upload.then(function (response) {
                    if (response.data.hasOwnProperty('success')) {
                        if (response.data.success == 1) {
                            $scope.getDrawingFiles($scope.drawing_request_id);
                            coreService.resetAlert();
                            coreService.setAlert({type: 'info', message: 'Files uploaded successfully.'});
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'error', message: response.data.reason});
                        }
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'error', message: response.data})
                }, function (evt) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'info', message: "progress: " + parseInt(100.0 * evt.loaded / evt.total) + "%0"});
                });
            }
        }

        $scope.DownloadDRFile = function (item) {
            var filePath = coreService.getBaseUrl() + 'drawingfiles/' + item.version_id + item.file_version;
            window.open(filePath, 'Download');
            // window.open(filePath, "_blank");
        }


        $scope.deleteDRFile = function (item) {
            drawingrequestviewService.deletedrawingrequestfile(item).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.getDrawingFiles($scope.drawing_request_id);
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'drawingrequestviewService', 'constantService', '$filter', '$q', '$state', '$uibModal', 'Upload', '$timeout'];
    angular.module('drawingrequestviewModule')
            .controller('drawingrequestfilesController', controller);
}());

;(function () {
    var controller = function ($scope, $rootScope, coreService, drawingrequestviewService, itcquoteService, industryService, constantService, $filter, $q, hotkeys, $state, $timeout, $uibModal, $confirm) {
        $scope.tabData = [{
                heading: "Details"
                , route: "drawingrequestview.adddrawingrequest"
            }, {
                heading: "Add Attachments"
                , route: "drawingrequestview.attachment"
                , disable: true
            }, {
                heading: "Extra Values"
                , route: "drawingrequestview.extravalues"
                , disable: false
            }
        ]
        hotkeys.bindTo($scope).add({
            combo: 'alt+d'
            , description: 'go to Details'
            , callback: function () {
                $state.go('drawingrequestview.adddrawingrequest');
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+e'
            , description: 'go to Extra Values'
            , callback: function () {
                $state.go('drawingrequestview.extravalues');
            }
        })

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getParentDB('drawingrequest');
        }, function (newValue) {
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "drawingrequestview.adddrawingrequest") {
                $scope.db = newValue;
                //  $scope.promise = null;

                if ($scope.db.hasOwnProperty('selectedDrawingRequest') && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.user = coreService.getUser();
                    $scope.privileges = coreService.getPrivileges();
                    $scope.decimal4_valid = constantService.getMessage('decimal4_valid');

                    $scope.promise = $q.all([
                        drawingrequestviewService.getQuotesTitles()
                                , coreService.getUuid()
                                , drawingrequestviewService.getScopes()
                                , drawingrequestviewService.getDrawingRequestValues(81)
                                , drawingrequestviewService.getDrawingRequestValues(83)
                                , drawingrequestviewService.getDrawingRequestValues(84)
                                , drawingrequestviewService.getDrawingRequestValues(122)
                                , drawingrequestviewService.getDrawingRequestValues(85)
                                , drawingrequestviewService.getDrawingRequestValues(86)
                                , drawingrequestviewService.getDrawingRequestTitles()
                                , itcquoteService.getQuoteMembranes()
                                , itcquoteService.getQuoteInsulationPackages()
                                , itcquoteService.getQuoteLineColors()
                                , itcquoteService.getQuoteAncorages()
                                , itcquoteService.getQuoteExposures()
                                , itcquoteService.getSalesTerritories()
                                , itcquoteService.getQuoteCustomers()
                                , drawingrequestviewService.getSeries()

                    ]).then(function (queues) {
                        $scope.quotes = queues[0].data;
                        $scope.scopes = queues[2].data;
                        $scope.DrawingRequestSendTo = queues[3].data;
                        $scope.DrawingRequestSendVia = queues[4].data;
                        $scope.DrawingRequestDrawingTypes = queues[5].data;
                        $scope.DrawingRequestDrawingCategories = queues[6].data;
                        $scope.DrawingRequestDrawingSizes = queues[7].data;
                        $scope.DrawingRequestDrawingUnits = queues[8].data;
                        $scope.DrawingRequestTitles = queues[9].data;
                        $scope.membranchildren = queues[10].data.children;
                        $scope.membranes = queues[10].data.types;
                        $scope.insulations = queues[11].data;
                        $scope.linercolors = queues[12].data;
                        $scope.alllinercolors = queues[12].data;
                        $scope.anchorages = queues[13].data;
                        $scope.exposures = queues[14].data;
                        $scope.purchase_territories = queues[15].data;
                        $scope.contacts = [];
                        $scope.customers = queues[16].data;
                        $scope.series = queues[17].data;

                        $scope.DrawingStatus = [
                            {status_id: 1, status_name: "Open"},
                            {status_id: 6, status_name: "Submitted"},
                            {status_id: 4, status_name: "Acknowledged"},
                            {status_id: 5, status_name: "InProgress"},
                            {status_id: 3, status_name: "Finished"},
                            {status_id: 2, status_name: "Cancel"}
                        ];
                        $scope.getLocationsTree();
                        $scope.getindustryTree();
                        $scope.user = coreService.getUser();

                        console.log($scope.db.selectedDrawingRequest);
                        if ($scope.db.selectedDrawingRequest !== null) {
                            $rootScope.drawing_request_id = $scope.db.selectedDrawingRequest.DrawingRequestID;
                            drawingrequestviewService.getDrawingRequestById($scope.db.selectedDrawingRequest.DrawingRequestID).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    //$scope.promise = null;
                                    $scope.db.selectedDrawingRequest = response.data;
                                    $rootScope.selectedDrawingRequest = $scope.db.selectedDrawingRequest;

                                    //  $rootScope.$broadcast('loading-complete');
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                        else {
                            $rootScope.drawing_request_id = queues[1].data.success;
                            $scope.updatefirst = false;
                            $scope.isNew = true;
                            $rootScope.isNew = true;
                            var drawingrequest = {
                                drawing_request_id: queues[1].data.success
                                , create_account_id: $scope.user.user_id
                                , modify_account_id: $scope.user.user_id
                                , creator_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , modifier_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , create_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , modify_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , attention_id: ''
                                , completed_for_id: ''
                                , requested_by: ''
                                , scope_id: queues[2].data[0].scope_id
                                , quote_id: ''
                                , reference_drawing_request_id: ''
                                , send_to_id: queues[3].data[0].property_value_no
                                , send_via_id: queues[4].data[0].property_value_no
                                , drawing_type_id: queues[5].data[0].property_value_no
                                , drawing_category_id: queues[6].data[0].property_value_no
                                , drawing_size_id: queues[7].data[0].property_value_no
                                , drawing_unit_id: queues[8].data[0].property_value_no
                                , delivery_point: ''
                                , requested_delivery_date: ''
                                , promised_delivery_date: ''
                                , completed_date: ''
                                , is_stamped: ''
                                , status_id: $scope.DrawingStatus[0].status_id
                                , caption: ''
                                , comments: ''
                                , company_id: ''
                                , contact_id: ''
                                , address_id: ''
                                , phone_id: ''
                                , email_id: ''
                                , rep_territory: ''
                                , structure_location: ''
                                , location: ''
                                , structure_width: ''
                                , structure_length: ''
                                , structure_color: ''
                                , anchorage: ''
                                , structure_application: ''
                                , project_name: ''
                                , series_id: ''
                                , wind: ''
                                , wind_MPH: ''
                                , wind_KPH: ''
                                , wind_KPA: ''
                                , snow: ''
                                , exposure: ''
                                , blog_code: ''
                                , sales_manager: ''
                                , is_extra_fields_saved: 0
                                , drawing_number: ''
                                , membrane_type_id: ''
                                , is_insulated: ''
                                , sky_light: ''
                                , insulation_package_id: ''
                            }
                            $scope.db.selectedDrawingRequest = drawingrequest;
                            $rootScope.selectedDrawingRequest = $scope.db.selectedDrawingRequest;
                            //$rootScope.$broadcast('loading-complete');

                            // $scope.promise = null;
                        }


                        $scope.$watch('db.selectedDrawingRequest.company_id', function (newVal, oldVal) {
                            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                                itcquoteService.getCustomerContact(newVal).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.contacts = response.data;
                                        $scope.db.selectedDrawingRequest.address = {};
                                        $scope.db.selectedDrawingRequest.phone = {};
                                        $scope.db.selectedDrawingRequest.email = {};
                                        $scope.addresses = [];
                                        $scope.phones = [];
                                        $scope.emails = [];
                                        
                                        //$scope.db.selectedDrawingRequest.contact_id =  $scope.contacts[0].contact_id;
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                            }
                        });

                        $scope.$watch('db.selectedDrawingRequest.contact_id', function (newVal, oldVal) {
                            console.log(' newVal:' + newVal);
                            console.log(' oldVal:' + oldVal);
                            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                                // $scope.attentionStyle = {color: '#27AE60;'};
                                itcquoteService.getContactDetails(newVal).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.addresses = response.data.addresses;
                                        $scope.phones = response.data.phones;
                                        $scope.emails = response.data.emails;
                                        $scope.db.selectedDrawingRequest.address = {};
                                        $scope.db.selectedDrawingRequest.phone = {};
                                        $scope.db.selectedDrawingRequest.email = {};

                                        if (!$scope.updatefirst) {
                                            if ($scope.addresses.length > 0) {
                                                $scope.db.selectedDrawingRequest.address_id = $scope.addresses[0].address_id;
                                                $scope.db.selectedDrawingRequest.address.addresstype_name = $scope.addresses[0].addresstype_name;
                                                $scope.db.selectedDrawingRequest.address.city_name = $scope.addresses[0].city_name;
                                                $scope.db.selectedDrawingRequest.address.state_name = $scope.addresses[0].state_name;
                                                $scope.db.selectedDrawingRequest.address.country_name = $scope.addresses[0].country_name;
                                                $scope.db.selectedDrawingRequest.address.postal_code = $scope.addresses[0].postal_code;
                                            }
                                            if ($scope.phones.length > 0) {
                                                $scope.db.selectedDrawingRequest.phone_id = $scope.phones[0].phone_id;
                                                $scope.db.selectedDrawingRequest.phone.phonetype_name = $scope.phones[0].phonetype_name;
                                                $scope.db.selectedDrawingRequest.phone.extension = $scope.phones[0].extension;
                                            }
                                            if ($scope.emails.length > 0) {
                                                $scope.db.selectedDrawingRequest.email_id = $scope.emails[0].email_id;
                                                $scope.db.selectedDrawingRequest.email.emailtype_name = $scope.emails[0].emailtype_name;
                                            }
                                        } else {
                                            $scope.updatefirst = false;
                                            if ($scope.addresses.length > 0) {
                                                $scope.db.selectedDrawingRequest.address.addresstype_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].addresstype_name;
                                                $scope.db.selectedDrawingRequest.address.city_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].city_name;
                                                $scope.db.selectedDrawingRequest.address.state_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].state_name;
                                                $scope.db.selectedDrawingRequest.address.country_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].country_name;
                                                $scope.db.selectedDrawingRequest.address.postal_code = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].postal_code;
                                            }
                                            if ($scope.phones.length > 0) {
                                                $scope.db.selectedDrawingRequest.phone.phonetype_name = $filter('filter')($scope.phones, {
                                                    phone_id: $scope.db.selectedDrawingRequest.phone_id
                                                })[0].phonetype_name;
                                                $scope.db.selectedDrawingRequest.phone.extension = $filter('filter')($scope.phones, {
                                                    phone_id: $scope.db.selectedDrawingRequest.phone_id
                                                })[0].extension;
                                            }
                                            if ($scope.emails.length > 0) {
                                                $scope.db.selectedDrawingRequest.email.emailtype_name = $filter('filter')($scope.emails, {
                                                    email_id: $scope.db.selectedDrawingRequest.email_id
                                                })[0].emailtype_name;
                                            }
                                        }

                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                            }
                        });

                    }
                    , function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
                else {
                    return;
                }
            }
        }, true);

        $scope.$watchGroup(['db.selectedDrawingRequest.caption'
                    , 'db.selectedDrawingRequest.requested_delivery_date'
                    , 'db.selectedDrawingRequest.drawing_unit_id'
                    , 'db.selectedDrawingRequest.project_name'
                    , 'db.selectedDrawingRequest.company_id'
                    , 'db.selectedDrawingRequest.contact_id'
                    , 'db.selectedDrawingRequest.blog_code'
                    , 'db.selectedDrawingRequest.location'
                    , 'db.selectedDrawingRequest.wind'
                    , 'db.selectedDrawingRequest.snow'
        ], function (newVals) {
            if ($scope.db !== null && angular.isDefined($scope.db) && $scope.db.selectedDrawingRequest !== null) {
                var enabled = true;
                if ((!angular.isDefined($scope.db.selectedDrawingRequest.caption) || $scope.db.selectedDrawingRequest.caption) == ''
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.requested_delivery_date) || $scope.db.selectedDrawingRequest.requested_delivery_date == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.drawing_unit_id) || $scope.db.selectedDrawingRequest.drawing_unit_id == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.project_name) || $scope.db.selectedDrawingRequest.project_name == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.company_id) || $scope.db.selectedDrawingRequest.company_id == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.contact_id) || $scope.db.selectedDrawingRequest.contact_id == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.blog_code) || $scope.db.selectedDrawingRequest.blog_code == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.location) || $scope.db.selectedDrawingRequest.location == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.wind) || $scope.db.selectedDrawingRequest.wind == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.snow) || $scope.db.selectedDrawingRequest.snow == '')) {
                    enabled = false;
                }

                console.log('enabled 1: ' + enabled);
                $scope.validSave = enabled;

                if (!$scope.isNew) {
                    enabled = true;
                }
                $filter('filter')($scope.tabData, {
                    route: 'drawingrequestview.attachment'
                })[0].disable = !enabled;
            }
        });

        $scope.saveDrawingRequest = function () {
            var wind_measure = $scope.db.selectedDrawingRequest.wind_measure;
            $scope.db.selectedDrawingRequest.wind_KPA = wind_measure === 'KPA' ? 1 : 0;
            $scope.db.selectedDrawingRequest.wind_KPH = wind_measure === 'KPH' ? 1 : 0;
            $scope.db.selectedDrawingRequest.wind_MPH = wind_measure === 'MPH' ? 1 : 0;
            $scope.db.selectedDrawingRequest.modify_date = moment().format('YYYY-MM-DD HH:mm:ss');
            console.log($scope.db.selectedDrawingRequest);

            drawingrequestviewService.writeDrawingRequest($scope.db.selectedDrawingRequest).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.isNew = false;
                    $scope.db.refresh = true;
                    $state.go('drawingrequest');
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.changeReferenceDrawing = function (newValue, oldValue) {
            $confirm({
                text: constantService.getMessage('changerereferencedrawing'),
                title: 'Changing Rereference Drawing',
                cancel: 'No',
                ok: "Yes, I'm sure"
            }).then(function () {
                $scope.populateExtraValuesFromDrawingRequest(newValue);
            }, function () {
                $scope.db.selectedDrawingRequest.reference_drawing_request_id = oldValue;
            });
        }

        $scope.populateExtraValuesFromDrawingRequest = function (newValue) {
            drawingrequestviewService.getDrawingRequestById(newValue).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.quote = response.data;
                    $scope.db.selectedDrawingRequest.company_id = $scope.quote.company_id;
                    $scope.db.selectedDrawingRequest.contact_id = $scope.quote.contact_id;
                    $scope.db.selectedDrawingRequest.address_id = $scope.quote.address_id;
                    $scope.db.selectedDrawingRequest.email_id = $scope.quote.email_id;
                    $scope.db.selectedDrawingRequest.phone_id = $scope.quote.phone_id;
                    $scope.db.selectedDrawingRequest.exposure = $scope.quote.exposure;
                    $scope.db.selectedDrawingRequest.anchorage = $scope.quote.anchorage;
                    $scope.db.selectedDrawingRequest.structure_application = $scope.quote.structure_application;
                    $scope.db.selectedDrawingRequest.structure_length = $scope.quote.structure_length;
                    $scope.db.selectedDrawingRequest.structure_width = $scope.quote.structure_width;
                    $scope.db.selectedDrawingRequest.rep_territory = $scope.quote.rep_territory;
                    $scope.db.selectedDrawingRequest.membrane_color_id = $scope.quote.membrane_color_id;
                    $scope.db.selectedDrawingRequest.wind = $scope.quote.wind;
                    $scope.db.selectedDrawingRequest.snow = $scope.quote.snow;
                    $scope.db.selectedDrawingRequest.wind_KPA = $scope.quote.wind_KPA;
                    $scope.db.selectedDrawingRequest.wind_KPH = $scope.quote.wind_KPH;
                    $scope.db.selectedDrawingRequest.wind_MPH = $scope.quote.wind_MPH;
                    $scope.db.selectedDrawingRequest.project_name = $scope.quote.project_name;
                    $scope.db.selectedDrawingRequest.membrane_type_id = $scope.quote.membrane_type_id;
                    $scope.db.selectedDrawingRequest.is_insulated = $scope.quote.is_insulated;
                    $scope.db.selectedDrawingRequest.series_id = $scope.quote.series_id;
                    $scope.db.selectedDrawingRequest.location = $scope.quote.location;
                    $scope.db.selectedDrawingRequest.structure_location = $scope.quote.structure_location;
                    $scope.db.selectedDrawingRequest.application_name = $scope.quote.application_name;
                    $scope.db.selectedDrawingRequest.blog_code = $scope.quote.blog_code;
                    $scope.db.selectedDrawingRequest.sky_light = $scope.quote.sky_light;
                    $scope.db.selectedDrawingRequest.insulation_package_id = $scope.quote.insulation_package_id;
                    $scope.db.selectedDrawingRequest.structure_color = $scope.quote.structure_color;


                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

        $scope.changeQuote = function (newValue, oldValue) {
            $confirm({
                text: constantService.getMessage('changequote'),
                title: 'Changing Quote',
                cancel: 'No',
                ok: "Yes, I'm sure"
            }).then(function () {
                $scope.populateExtraValuesFromQuote(newValue);
            }, function () {
                $scope.db.selectedDrawingRequest.quote_id = oldValue;
            });
        }

        $scope.populateExtraValuesFromQuote = function (newValue) {
            itcquoteService.getQuote(newValue).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.quote = response.data.quote;
                    $scope.db.selectedDrawingRequest.company_id = $scope.quote.company_id;
                    $scope.db.selectedDrawingRequest.contact_id = $scope.quote.attention_id;
                    $scope.db.selectedDrawingRequest.exposure = $scope.quote.exposure_id;
                    $scope.db.selectedDrawingRequest.anchorage = $scope.quote.anchorage_id;
                    $scope.db.selectedDrawingRequest.structure_application = $scope.quote.application_id;
                    $scope.db.selectedDrawingRequest.structure_length = $scope.quote.structure_length;
                    $scope.db.selectedDrawingRequest.rep_territory = $scope.quote.rep_territory_id;
                    $scope.db.selectedDrawingRequest.structure_location = $scope.quote.location_id;
                    $scope.db.selectedDrawingRequest.membrane_color_id = $scope.quote.membrane_liner_color_id;
                    $scope.db.selectedDrawingRequest.wind = $scope.quote.wind_rate;
                    $scope.db.selectedDrawingRequest.snow = $scope.quote.snow_rate;
                    $scope.db.selectedDrawingRequest.wind_KPA = $scope.quote.wind_KPA;
                    $scope.db.selectedDrawingRequest.wind_KPH = $scope.quote.wind_KPH;
                    $scope.db.selectedDrawingRequest.wind_MPH = $scope.quote.wind_MPH;
                    $scope.db.selectedDrawingRequest.project_name = $scope.quote.title;
                    $scope.db.selectedDrawingRequest.membrane_type_id = $scope.quote.membrane_type_id;
                    $scope.db.selectedDrawingRequest.is_insulated = $scope.quote.insulation_type_id === null || $scope.quote.insulation_type_id === 49 ? 0 : 1;
                    $scope.db.selectedDrawingRequest.sky_light = 0;
                    $scope.db.selectedDrawingRequest.location = $scope.quote.location_name;
                    $scope.db.selectedDrawingRequest.application_name = $scope.quote.application_name;

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

        $scope.$watch('db.selectedDrawingRequest.insulated', function (newVal) {
            if (angular.isDefined(newVal) && newVal !== null) {
                if (!newVal) {
                    angular.copy($scope.linercolors, $scope.alllinercolors);
                    if ($scope.hasOwnProperty('db')
                            && $scope.db.hasOwnProperty('selectedDrawingRequest')
                            && $scope.db.selectedDrawingRequest.hasOwnProperty('insulation_package_id'))
                        $scope.db.selectedDrawingRequest.insulation_package_id = '';
                } else {
                    $scope.linercolors = [];
                    angular.copy($scope.alllinercolors, $scope.linercolors);
                    var index = $scope.alllinercolors.indexOf($filter('filter')($scope.alllinercolors, {
                        name: 'White'
                    })[0]);

                    console.log('index: ' + index);
                    $scope.linercolors.splice(index, 1);
                }
            }
        })

        $scope.getindustryTree = function () {
            industryService.getindustry()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.industry = response.data;
                            $scope.selectedNode = $scope.industry[0];
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };
        $scope.showSelectedIndustry = function (node, parentNode) {
            if (node.children.length > 0) {
                //alert(constantService.getMessage('selectparent_valid'));
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'drawingrequestviewController',
                    scope: $scope
                });
                return false;
            } else {
                $scope.applicationStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentindustry = node;
                $scope.db.selectedDrawingRequest.application_name = node.application_name;
                $scope.db.selectedDrawingRequest.structure_application = node.application_id;
                $("#applicationDiv").hide();
            }
        };
        /* $scope.getProductsTree = function () {
         var data = {search: ''};
         itcquoteService.getQuoteStructures(data).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         $scope.products = response.data;
         $scope.selectedNode = $scope.products[0];
         $scope.currentProduct = $scope.products[0];
         } else {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         }
         }, function (response) {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         });
         };
         $scope.showSelectedProduct = function (node, parentNode) {
         if (node.children.length > 0) {
         alert(constantService.getMessage('selectparent_valid'));
         } else {
         $scope.selected = true;
         $scope.currentProduct = node;
         $scope.db.selectedDrawingRequest.product_name = node.product_name;
         $scope.db.selectedDrawingRequest.structure_id = node.product_id;
         $("#productDiv").hide();
         }
         };*/
        $scope.getLocationsTree = function () {
            drawingrequestviewService.getAllLocationsTree().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.locations = response.data;
                    $scope.selectedNode = $scope.locations[0];
                    $scope.currentlocation = $scope.locations[0];
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        };
        $scope.showSelectedLocation = function (node, parentNode) {
            if (node.children.length > 0) {
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'drawingrequestviewController',
                    scope: $scope
                });
            } else {
                $scope.locationStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentlocation = node;
                $scope.db.selectedDrawingRequest.location = node.location_name;
                $scope.db.selectedDrawingRequest.structure_location = node.location_id;
                $("#locationDiv").hide();
            }
        };
        $scope.showApplicationTree = function () {
            $("#applicationDiv").show();
        }
        $scope.hideApplicationTree = function () {
            $("#applicationDiv").hide();
        }
        $scope.showLocationTree = function () {
            $("#locationDiv").show();
        }
        $scope.hideLocationTree = function () {
            $("#locationDiv").hide();
        }

        $scope.cancel = function () {
            $scope.$uibModalInstance.close('cancel');
        }

        $scope.drawingRequestReport = function () {
            var post = {drawing_request_id: $scope.db.selectedDrawingRequest.drawing_request_id, drawing_request_no: $scope.db.selectedDrawingRequest.drawing_request_no};
            console.log(post);
            drawingrequestviewService.drawingRequestReport(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    console.log(response.data);
                    var path = response.data;
                    console.log(coreService.getBaseUrl());
                    window.open(coreService.getBaseUrl() + 'reports/' + path);
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'drawingrequestviewService', 'itcquoteService', 'industryService', 'constantService', '$filter', '$q', 'hotkeys', '$state', '$timeout', '$uibModal', '$confirm'];
    angular.module('drawingrequestviewModule')
            .controller('drawingrequestviewController', controller);
}());;(function () {
    var controller = function ($scope, $rootScope, coreService, drawingrequestviewService, itcquoteService, industryService, constantService, $filter, $q, hotkeys, $state, $timeout, $uibModal, $confirm) {
        $scope.tabData = [{
                heading: "Details"
                , route: "drawingrequestview.adddrawingrequest"
            }, {
                heading: "Add Attachments"
                , route: "drawingrequestview.attachment"
                , disable: true
            }, {
                heading: "Extra Values"
                , route: "drawingrequestview.extravalues"
                , disable: false
            }
        ]
        hotkeys.bindTo($scope).add({
            combo: 'alt+d'
            , description: 'go to Details'
            , callback: function () {
                $state.go('drawingrequestview.adddrawingrequest');
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+e'
            , description: 'go to Extra Values'
            , callback: function () {
                $state.go('drawingrequestview.extravalues');
            }
        })

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getParentDB('drawingrequest');
        }, function (newValue) {
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "drawingrequestview.adddrawingrequest") {
                $scope.db = newValue;
                //  $scope.promise = null;

                if ($scope.db.hasOwnProperty('selectedDrawingRequest') && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.user = coreService.getUser();
                    $scope.privileges = coreService.getPrivileges();
                    $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
                    $scope.promise = $q.all([
                        drawingrequestviewService.getQuotesTitles()
                                , coreService.getUuid()
                                , drawingrequestviewService.getScopes()
                                , drawingrequestviewService.getDrawingRequestValues(81)
                                , drawingrequestviewService.getDrawingRequestValues(83)
                                , drawingrequestviewService.getDrawingRequestValues(84)
                                , drawingrequestviewService.getDrawingRequestValues(122)
                                , drawingrequestviewService.getDrawingRequestValues(85)
                                , drawingrequestviewService.getDrawingRequestValues(86)
                                , drawingrequestviewService.getDrawingRequestTitles()
                                , itcquoteService.getQuoteMembranes()
                                , itcquoteService.getQuoteInsulationPackages()
                                , itcquoteService.getQuoteLineColors()
                                , itcquoteService.getQuoteAncorages()
                                , itcquoteService.getQuoteExposures()
                                , itcquoteService.getSalesTerritories()
                                , itcquoteService.getQuoteCustomers()
                                , drawingrequestviewService.getSeries()
                                , drawingrequestviewService.getDevelopmentManagersList()

                    ]).then(function (queues) {
                        $scope.quotes = queues[0].data;
                        $scope.scopes = queues[2].data;
                        $scope.DrawingRequestSendTo = queues[3].data;
                        $scope.DrawingRequestSendVia = queues[4].data;
                        $scope.DrawingRequestDrawingTypes = queues[5].data;
                        $scope.DrawingRequestDrawingCategories = queues[6].data;
                        $scope.DrawingRequestDrawingSizes = queues[7].data;
                        $scope.DrawingRequestDrawingUnits = queues[8].data;
                        $scope.DrawingRequestTitles = queues[9].data;
                        $scope.membranchildren = queues[10].data.children;
                        $scope.membranes = queues[10].data.types;
                        $scope.insulations = queues[11].data;
                        $scope.linercolors = queues[12].data;
                        $scope.alllinercolors = queues[12].data;
                        $scope.anchorages = queues[13].data;
                        $scope.exposures = queues[14].data;
                        $scope.purchase_territories = queues[15].data;
                        $scope.contacts = [];
                        $scope.customers = queues[16].data;
                        $scope.series = queues[17].data;
                        $scope.developmentManagers = queues[18].data;
                        $scope.DrawingStatus = [
                            {status_id: 1, status_name: "Open"},
                            {status_id: 6, status_name: "Submitted"},
                            {status_id: 4, status_name: "Acknowledged"},
                            {status_id: 5, status_name: "InProgress"},
                            {status_id: 3, status_name: "Finished"},
                            {status_id: 2, status_name: "Cancel"}
                        ];
                        $scope.getLocationsTree();
                        $scope.getindustryTree();
                        $scope.user = coreService.getUser();
                        console.log($scope.db.selectedDrawingRequest);
                        if ($scope.db.selectedDrawingRequest !== null) {
                            $rootScope.drawing_request_id = $scope.db.selectedDrawingRequest.DrawingRequestID;
                            drawingrequestviewService.getDrawingRequestById($scope.db.selectedDrawingRequest.DrawingRequestID).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    //$scope.promise = null;
                                    $scope.db.selectedDrawingRequest = response.data;
                                    $rootScope.selectedDrawingRequest = $scope.db.selectedDrawingRequest;
                                    //  $rootScope.$broadcast('loading-complete');
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                        else {
                            $rootScope.drawing_request_id = queues[1].data.success;
                            $scope.updatefirst = false;
                            $scope.isNew = true;
                            $rootScope.isNew = true;
                            var drawingrequest = {
                                drawing_request_id: queues[1].data.success
                                , create_account_id: $scope.user.user_id
                                , modify_account_id: $scope.user.user_id
                                , creator_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , modifier_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , create_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , modify_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , attention_id: ''
                                , completed_for_id: ''
                                , requested_by: $scope.user.user_id
                                , requested_by_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , scope_id: queues[2].data[0].scope_id
                                , quote_id: ''
                                , reference_drawing_request_id: ''
                                , send_to_id: queues[3].data[0].property_value_no
                                , send_via_id: queues[4].data[0].property_value_no
                                , drawing_type_id: queues[5].data[0].property_value_no
                                , drawing_category_id: queues[6].data[0].property_value_no
                                , drawing_size_id: queues[7].data[0].property_value_no
                                , drawing_unit_id: queues[8].data[0].property_value_no
                                , delivery_point: ''
                                , requested_delivery_date: ''
                                , promised_delivery_date: ''
                                , completed_date: ''
                                , is_stamped: ''
                                , status_id: $scope.DrawingStatus[0].status_id
                                , caption: ''
                                , comments: ''
                                , company_id: ''
                                , contact_id: ''
                                , address_id: ''
                                , phone_id: ''
                                , email_id: ''
                                , rep_territory: ''
                                , structure_location: ''
                                , location: ''
                                , structure_width: ''
                                , structure_length: ''
                                , structure_color: ''
                                , anchorage: ''
                                , structure_application: ''
                                , project_name: ''
                                , series_id: ''
                                , wind: ''
                                , wind_MPH: ''
                                , wind_KPH: ''
                                , wind_KPA: ''
                                , snow: ''
                                , exposure: ''
                                , blog_code: ''
                                , sales_manager: ''
                                , is_extra_fields_saved: 0
                                , drawing_number: ''
                                , membrane_type_id: ''
                                , is_insulated: ''
                                , sky_light: ''
                                , insulation_package_id: ''
                            }
                            $scope.db.selectedDrawingRequest = drawingrequest;
                            $rootScope.selectedDrawingRequest = $scope.db.selectedDrawingRequest;
                        }

                        $scope.sendDrawingEmail = function () {
                            if ($scope.db.selectedDrawingRequest.structure_location != null && $scope.db.selectedDrawingRequest.structure_location != '') {
                                drawingrequestviewService.getLocationInfo($scope.db.selectedDrawingRequest.structure_location).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        var location = response.data;
                                        $confirm({
                                            text: 'It is critical that you give us the correct location that the structure is going to be located. Is ' + location + ' correct?',
                                            title: 'Confirm',
                                            cancel: 'No',
                                            ok: "Yes, I'm sure"
                                        }).then(function () {
                                            if (($scope.db.selectedDrawingRequest.completed_for_id != null && $scope.db.selectedDrawingRequest.completed_for_id != '')
                                                    && $scope.db.selectedDrawingRequest.promised_delivery_date == null || $scope.db.selectedDrawingRequest.promised_delivery_date == '') {
                                                $confirm({
                                                    text: 'No Promised Date entered do you still want to send the email to BDM ?',
                                                    title: 'Confirm',
                                                    cancel: 'No',
                                                    ok: "Yes, I'm sure"
                                                }).then(function () {
                                                    console.log(drawingrequestviewService.getdrAttachments().length);
                                                    if (drawingrequestviewService.getdrAttachments().length == 0) {
                                                        $scope.message = 'Please attach a sketch showing layout of structure along with all options and the location of each!.';
                                                        $scope.$uibModalInstance = $uibModal.open({
                                                            animation: $scope.animationsEnabled,
                                                            templateUrl: 'app/itcquoteModule/views/alert.html',
                                                            controller: 'drawingrequestviewController',
                                                            scope: $scope
                                                        });
                                                    } else {
                                                        $scope.sendDrawingRequestEmailAction();
                                                    }
                                                });
                                            } else {
                                                console.log(drawingrequestviewService.getdrAttachments().length);
                                                if (drawingrequestviewService.getdrAttachments().length == 0) {
                                                    $scope.message = 'Please attach a sketch showing layout of structure along with all options and the location of each!.';
                                                    $scope.$uibModalInstance = $uibModal.open({
                                                        animation: $scope.animationsEnabled,
                                                        templateUrl: 'app/itcquoteModule/views/alert.html',
                                                        controller: 'drawingrequestviewController',
                                                        scope: $scope
                                                    });
                                                } else {
                                                    $scope.sendDrawingRequestEmailAction();
                                                }
                                            }
                                        });

                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                });
                            }
                        }

                        $scope.sendDrawingRequestEmailAction = function () {
                            drawingrequestviewService.sendDrawingRequestEmail($scope.db.selectedDrawingRequest).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    console.log(response.data);
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }

                        $scope.$watch('db.selectedDrawingRequest.company_id', function (newVal, oldVal) {
                            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                                itcquoteService.getCustomerContact(newVal).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.contacts = response.data;
                                        $scope.db.selectedDrawingRequest.address = {};
                                        $scope.db.selectedDrawingRequest.phone = {};
                                        $scope.db.selectedDrawingRequest.email = {};
                                        $scope.addresses = [];
                                        $scope.phones = [];
                                        $scope.emails = [];
                                        //$scope.db.selectedDrawingRequest.contact_id =  $scope.contacts[0].contact_id;
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                            }
                        });
                        $scope.$watch('db.selectedDrawingRequest.contact_id', function (newVal, oldVal) {
                            console.log(' newVal:' + newVal);
                            console.log(' oldVal:' + oldVal);
                            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                                // $scope.attentionStyle = {color: '#27AE60;'};
                                itcquoteService.getContactDetails(newVal).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.addresses = response.data.addresses;
                                        $scope.phones = response.data.phones;
                                        $scope.emails = response.data.emails;
                                        $scope.db.selectedDrawingRequest.address = {};
                                        $scope.db.selectedDrawingRequest.phone = {};
                                        $scope.db.selectedDrawingRequest.email = {};
                                        if (!$scope.updatefirst) {
                                            if ($scope.addresses.length > 0) {
                                                $scope.db.selectedDrawingRequest.address_id = $scope.addresses[0].address_id;
                                                $scope.db.selectedDrawingRequest.address.addresstype_name = $scope.addresses[0].addresstype_name;
                                                $scope.db.selectedDrawingRequest.address.city_name = $scope.addresses[0].city_name;
                                                $scope.db.selectedDrawingRequest.address.state_name = $scope.addresses[0].state_name;
                                                $scope.db.selectedDrawingRequest.address.country_name = $scope.addresses[0].country_name;
                                                $scope.db.selectedDrawingRequest.address.postal_code = $scope.addresses[0].postal_code;
                                            }
                                            if ($scope.phones.length > 0) {
                                                $scope.db.selectedDrawingRequest.phone_id = $scope.phones[0].phone_id;
                                                $scope.db.selectedDrawingRequest.phone.phonetype_name = $scope.phones[0].phonetype_name;
                                                $scope.db.selectedDrawingRequest.phone.extension = $scope.phones[0].extension;
                                            }
                                            if ($scope.emails.length > 0) {
                                                $scope.db.selectedDrawingRequest.email_id = $scope.emails[0].email_id;
                                                $scope.db.selectedDrawingRequest.email.emailtype_name = $scope.emails[0].emailtype_name;
                                            }
                                        } else {
                                            $scope.updatefirst = false;
                                            if ($scope.addresses.length > 0) {
                                                $scope.db.selectedDrawingRequest.address.addresstype_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].addresstype_name;
                                                $scope.db.selectedDrawingRequest.address.city_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].city_name;
                                                $scope.db.selectedDrawingRequest.address.state_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].state_name;
                                                $scope.db.selectedDrawingRequest.address.country_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].country_name;
                                                $scope.db.selectedDrawingRequest.address.postal_code = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedDrawingRequest.address_id
                                                })[0].postal_code;
                                            }
                                            if ($scope.phones.length > 0) {
                                                $scope.db.selectedDrawingRequest.phone.phonetype_name = $filter('filter')($scope.phones, {
                                                    phone_id: $scope.db.selectedDrawingRequest.phone_id
                                                })[0].phonetype_name;
                                                $scope.db.selectedDrawingRequest.phone.extension = $filter('filter')($scope.phones, {
                                                    phone_id: $scope.db.selectedDrawingRequest.phone_id
                                                })[0].extension;
                                            }
                                            if ($scope.emails.length > 0) {
                                                $scope.db.selectedDrawingRequest.email.emailtype_name = $filter('filter')($scope.emails, {
                                                    email_id: $scope.db.selectedDrawingRequest.email_id
                                                })[0].emailtype_name;
                                            }
                                        }

                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                            }
                        });
                    }
                    , function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
                else {
                    return;
                }
            }
        }, true);
        $scope.$watchGroup(['db.selectedDrawingRequest.caption'
                    , 'db.selectedDrawingRequest.requested_delivery_date'
                    , 'db.selectedDrawingRequest.drawing_unit_id'
                    , 'db.selectedDrawingRequest.project_name'
                    , 'db.selectedDrawingRequest.company_id'
                    , 'db.selectedDrawingRequest.contact_id'
                    , 'db.selectedDrawingRequest.blog_code'
                    , 'db.selectedDrawingRequest.location'
                    , 'db.selectedDrawingRequest.wind'
                    , 'db.selectedDrawingRequest.snow'
        ], function (newVals) {
            if ($scope.db !== null && angular.isDefined($scope.db) && $scope.db.selectedDrawingRequest !== null) {
                var enabled = true;
                if ((!angular.isDefined($scope.db.selectedDrawingRequest.caption) || $scope.db.selectedDrawingRequest.caption) == ''
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.requested_delivery_date) || $scope.db.selectedDrawingRequest.requested_delivery_date == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.drawing_unit_id) || $scope.db.selectedDrawingRequest.drawing_unit_id == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.project_name) || $scope.db.selectedDrawingRequest.project_name == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.company_id) || $scope.db.selectedDrawingRequest.company_id == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.contact_id) || $scope.db.selectedDrawingRequest.contact_id == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.blog_code) || $scope.db.selectedDrawingRequest.blog_code == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.location) || $scope.db.selectedDrawingRequest.location == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.wind) || $scope.db.selectedDrawingRequest.wind == '')
                        || (!angular.isDefined($scope.db.selectedDrawingRequest.snow) || $scope.db.selectedDrawingRequest.snow == '')) {
                    enabled = false;
                }

                console.log('enabled 1: ' + enabled);
                $scope.validSave = enabled;
                if (!$scope.isNew) {
                    enabled = true;
                }
                $filter('filter')($scope.tabData, {
                    route: 'drawingrequestview.attachment'
                })[0].disable = !enabled;
            }
        });
        $scope.saveDrawingRequest = function (sendEmail) {
            var save = true;
            var wind_measure = $scope.db.selectedDrawingRequest.wind_measure;
            $scope.db.selectedDrawingRequest.wind_KPA = wind_measure === 'KPA' ? 1 : 0;
            $scope.db.selectedDrawingRequest.wind_KPH = wind_measure === 'KPH' ? 1 : 0;
            $scope.db.selectedDrawingRequest.wind_MPH = wind_measure === 'MPH' ? 1 : 0;
            $scope.db.selectedDrawingRequest.modify_date = moment().format('YYYY-MM-DD HH:mm:ss');
            if (sendEmail) {
                if ($scope.db.selectedDrawingRequest.status_id == 1) {
                    $scope.db.selectedDrawingRequest.status_id = 6;
                }
                if ($scope.db.selectedDrawingRequest.completed_for_id == null || $scope.db.selectedDrawingRequest.completed_for_id == '') {
                    save = false;
                    $scope.message = 'Please choose Completed For to send the email to.';
                    $scope.$uibModalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        templateUrl: 'app/itcquoteModule/views/alert.html',
                        controller: 'drawingrequestviewController',
                        scope: $scope
                    });

                }
            }
            console.log($scope.db.selectedDrawingRequest);
            if (save) {
                drawingrequestviewService.writeDrawingRequest($scope.db.selectedDrawingRequest).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.isNew = false;
                        $scope.db.refresh = true;
                        if (!sendEmail) {
                            $state.go('drawingrequest');
                        } else {
                            $scope.sendDrawingEmail();
                        }
                    } else {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data})
                });
            }
        }


        $scope.changeReferenceDrawing = function (newValue, oldValue) {
            $confirm({
                text: constantService.getMessage('changerereferencedrawing'),
                title: 'Changing Rereference Drawing',
                cancel: 'No',
                ok: "Yes, I'm sure"
            }).then(function () {
                $scope.populateExtraValuesFromDrawingRequest(newValue);
            }, function () {
                $scope.db.selectedDrawingRequest.reference_drawing_request_id = oldValue;
            });
        }

        $scope.populateExtraValuesFromDrawingRequest = function (newValue) {
            drawingrequestviewService.getDrawingRequestById(newValue).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.quote = response.data;
                    $scope.db.selectedDrawingRequest.company_id = $scope.quote.company_id;
                    $scope.db.selectedDrawingRequest.contact_id = $scope.quote.contact_id;
                    $scope.db.selectedDrawingRequest.address_id = $scope.quote.address_id;
                    $scope.db.selectedDrawingRequest.email_id = $scope.quote.email_id;
                    $scope.db.selectedDrawingRequest.phone_id = $scope.quote.phone_id;
                    $scope.db.selectedDrawingRequest.exposure = $scope.quote.exposure;
                    $scope.db.selectedDrawingRequest.anchorage = $scope.quote.anchorage;
                    $scope.db.selectedDrawingRequest.structure_application = $scope.quote.structure_application;
                    $scope.db.selectedDrawingRequest.structure_length = $scope.quote.structure_length;
                    $scope.db.selectedDrawingRequest.structure_width = $scope.quote.structure_width;
                    $scope.db.selectedDrawingRequest.rep_territory = $scope.quote.rep_territory;
                    $scope.db.selectedDrawingRequest.membrane_color_id = $scope.quote.membrane_color_id;
                    $scope.db.selectedDrawingRequest.wind = $scope.quote.wind;
                    $scope.db.selectedDrawingRequest.snow = $scope.quote.snow;
                    $scope.db.selectedDrawingRequest.wind_KPA = $scope.quote.wind_KPA;
                    $scope.db.selectedDrawingRequest.wind_KPH = $scope.quote.wind_KPH;
                    $scope.db.selectedDrawingRequest.wind_MPH = $scope.quote.wind_MPH;
                    $scope.db.selectedDrawingRequest.project_name = $scope.quote.project_name;
                    $scope.db.selectedDrawingRequest.membrane_type_id = $scope.quote.membrane_type_id;
                    $scope.db.selectedDrawingRequest.is_insulated = $scope.quote.is_insulated;
                    $scope.db.selectedDrawingRequest.series_id = $scope.quote.series_id;
                    $scope.db.selectedDrawingRequest.location = $scope.quote.location;
                    $scope.db.selectedDrawingRequest.structure_location = $scope.quote.structure_location;
                    $scope.db.selectedDrawingRequest.application_name = $scope.quote.application_name;
                    $scope.db.selectedDrawingRequest.blog_code = $scope.quote.blog_code;
                    $scope.db.selectedDrawingRequest.sky_light = $scope.quote.sky_light;
                    $scope.db.selectedDrawingRequest.insulation_package_id = $scope.quote.insulation_package_id;
                    $scope.db.selectedDrawingRequest.structure_color = $scope.quote.structure_color;
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

        $scope.changeQuote = function (newValue, oldValue) {
            $confirm({
                text: constantService.getMessage('changequote'),
                title: 'Changing Quote',
                cancel: 'No',
                ok: "Yes, I'm sure"
            }).then(function () {
                $scope.populateExtraValuesFromQuote(newValue);
            }, function () {
                $scope.db.selectedDrawingRequest.quote_id = oldValue;
            });
        }

        $scope.populateExtraValuesFromQuote = function (newValue) {
            itcquoteService.getQuote(newValue).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.quote = response.data.quote;
                    $scope.db.selectedDrawingRequest.company_id = $scope.quote.company_id;
                    $scope.db.selectedDrawingRequest.contact_id = $scope.quote.attention_id;
                    $scope.db.selectedDrawingRequest.exposure = $scope.quote.exposure_id;
                    $scope.db.selectedDrawingRequest.anchorage = $scope.quote.anchorage_id;
                    $scope.db.selectedDrawingRequest.structure_application = $scope.quote.application_id;
                    $scope.db.selectedDrawingRequest.structure_length = $scope.quote.structure_length;
                    $scope.db.selectedDrawingRequest.rep_territory = $scope.quote.rep_territory_id;
                    $scope.db.selectedDrawingRequest.structure_location = $scope.quote.location_id;
                    $scope.db.selectedDrawingRequest.membrane_color_id = $scope.quote.membrane_liner_color_id;
                    $scope.db.selectedDrawingRequest.wind = $scope.quote.wind_rate;
                    $scope.db.selectedDrawingRequest.snow = $scope.quote.snow_rate;
                    $scope.db.selectedDrawingRequest.wind_KPA = $scope.quote.wind_KPA;
                    $scope.db.selectedDrawingRequest.wind_KPH = $scope.quote.wind_KPH;
                    $scope.db.selectedDrawingRequest.wind_MPH = $scope.quote.wind_MPH;
                    $scope.db.selectedDrawingRequest.project_name = $scope.quote.title;
                    $scope.db.selectedDrawingRequest.membrane_type_id = $scope.quote.membrane_type_id;
                    $scope.db.selectedDrawingRequest.is_insulated = $scope.quote.insulation_type_id === null || $scope.quote.insulation_type_id === 49 ? 0 : 1;
                    $scope.db.selectedDrawingRequest.sky_light = 0;
                    $scope.db.selectedDrawingRequest.location = $scope.quote.location_name;
                    $scope.db.selectedDrawingRequest.application_name = $scope.quote.application_name;
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

        $scope.$watch('db.selectedDrawingRequest.insulated', function (newVal) {
            if (angular.isDefined(newVal) && newVal !== null) {
                if (!newVal) {
                    angular.copy($scope.linercolors, $scope.alllinercolors);
                    if ($scope.hasOwnProperty('db')
                            && $scope.db.hasOwnProperty('selectedDrawingRequest')
                            && $scope.db.selectedDrawingRequest.hasOwnProperty('insulation_package_id'))
                        $scope.db.selectedDrawingRequest.insulation_package_id = '';
                } else {
                    $scope.linercolors = [];
                    angular.copy($scope.alllinercolors, $scope.linercolors);
                    var index = $scope.alllinercolors.indexOf($filter('filter')($scope.alllinercolors, {
                        name: 'White'
                    })[0]);
                    console.log('index: ' + index);
                    $scope.linercolors.splice(index, 1);
                }
            }
        })

        $scope.getindustryTree = function () {
            industryService.getindustry()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.industry = response.data;
                            $scope.selectedNode = $scope.industry[0];
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };
        $scope.showSelectedIndustry = function (node, parentNode) {
            if (node.children.length > 0) {
                //alert(constantService.getMessage('selectparent_valid'));
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'drawingrequestviewController',
                    scope: $scope
                });
                return false;
            } else {
                $scope.applicationStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentindustry = node;
                $scope.db.selectedDrawingRequest.application_name = node.application_name;
                $scope.db.selectedDrawingRequest.structure_application = node.application_id;
                $("#applicationDiv").hide();
            }
        };
        /* $scope.getProductsTree = function () {
         var data = {search: ''};
         itcquoteService.getQuoteStructures(data).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         $scope.products = response.data;
         $scope.selectedNode = $scope.products[0];
         $scope.currentProduct = $scope.products[0];
         } else {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         }
         }, function (response) {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         });
         };
         $scope.showSelectedProduct = function (node, parentNode) {
         if (node.children.length > 0) {
         alert(constantService.getMessage('selectparent_valid'));
         } else {
         $scope.selected = true;
         $scope.currentProduct = node;
         $scope.db.selectedDrawingRequest.product_name = node.product_name;
         $scope.db.selectedDrawingRequest.structure_id = node.product_id;
         $("#productDiv").hide();
         }
         };*/
        $scope.getLocationsTree = function () {
            drawingrequestviewService.getAllLocationsTree().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.locations = response.data;
                    $scope.selectedNode = $scope.locations[0];
                    $scope.currentlocation = $scope.locations[0];
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        };
        $scope.showSelectedLocation = function (node, parentNode) {
            if (node.children.length > 0) {
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'drawingrequestviewController',
                    scope: $scope
                });
            } else {
                $scope.locationStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentlocation = node;
                $scope.db.selectedDrawingRequest.location = node.location_name;
                $scope.db.selectedDrawingRequest.structure_location = node.location_id;
                $("#locationDiv").hide();
            }
        };
        $scope.showApplicationTree = function () {
            $("#applicationDiv").show();
        }
        $scope.hideApplicationTree = function () {
            $("#applicationDiv").hide();
        }
        $scope.showLocationTree = function () {
            $("#locationDiv").show();
        }
        $scope.hideLocationTree = function () {
            $("#locationDiv").hide();
        }

        $scope.cancel = function () {
            $scope.$uibModalInstance.close('cancel');
        }

        $scope.drawingRequestReport = function () {
            var post = {drawing_request_id: $scope.db.selectedDrawingRequest.drawing_request_id, drawing_request_no: $scope.db.selectedDrawingRequest.drawing_request_no};
            console.log(post);
            drawingrequestviewService.drawingRequestReport(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    console.log(response.data);
                    var path = response.data;
                    console.log(coreService.getBaseUrl());
                    window.open(coreService.getBaseUrl() + 'reports/' + path);
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }

    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'drawingrequestviewService', 'itcquoteService', 'industryService', 'constantService', '$filter', '$q', 'hotkeys', '$state', '$timeout', '$uibModal', '$confirm'];
    angular.module('drawingrequestviewModule')
            .controller('drawingrequestviewController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        var service = {
            drAttachment: []
        }

        return {
            getQuotesTitles: function () {
                return $http.get(coreService.getApi() + 'quotestitles');
            },
            getDrawingRequestById: function (drawing_request_id) {
                return $http.get(coreService.getApi() + 'getDrawingRequest/' + drawing_request_id);
            },
            getScopes: function () {
                return $http.get(coreService.getApi() + 'quotescopes');
            },
            getDrawingRequestValues: function (property_no) {
                return $http.get(coreService.getApi() + 'getDrawingRequestValues/' + property_no);
            },
            getDrawingRequestTitles: function () {
                return $http.get(coreService.getApi() + 'drawingrequesttitles');
            },
            getAllLocationsTree: function () {
                return $http.get(coreService.getApi() + 'alllocationsparents');
            },
            getSeries: function () {
                return $http.get(coreService.getApi() + 'getseries');
            },
            writeDrawingRequest: function (post) {
                return $http.post(coreService.getApi() + 'updateDrawingRequest', post);
            },
            getDrawingRequestFiles: function (drawing_request_id) {
                return $http.get(coreService.getApi() + 'getDrawingRequestFiles/' + drawing_request_id);
            },
            deletedrawingrequestfile: function (post) {
                return $http.post(coreService.getApi() + 'deletedrawingrequestfile', post);
            },
            drawingRequestReport: function (post) {
                return $http.post(coreService.getApi() + 'drawingRequestReport', post);
            },
            getDevelopmentManagersList: function () {
                return $http.get(coreService.getApi() + 'getDevelopmentManagersList');
            },
            getLocationInfo: function (location_id) {
                return $http.get(coreService.getApi() + 'getLocationInfo/' + location_id);
            },
            setdrAttachments: function (val) {
                service.drAttachment = val;
            },
            getdrAttachments: function () {
                return service.drAttachment
            },
            sendDrawingRequestEmail: function (post) {
                return $http.post(coreService.getApi() + 'sendDrawingRequestEmail', post);
            }

        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('drawingrequestviewModule')
            .factory('drawingrequestviewService', factory);
}());(function () {
    var controller = function ($scope, coreService, drawingviewService, drawingrequestviewService, itcquoteService, constantService, $filter, $q, $state, $timeout, $uibModal, $confirm) {

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getParentDB('drawing');
        }, function (newValue) {
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "adddrawing") {
                $scope.db = newValue;
                console.log($scope.fetched);
                if ($scope.db.hasOwnProperty('selectedDrawing') &&  !$scope.fetched ) {
                    $scope.fetched = true;
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.user = coreService.getUser();
                    $scope.privileges = coreService.getPrivileges();
                    $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
                    $scope.isRequired = true;

                    $q.all([coreService.getUuid()
                                , drawingrequestviewService.getScopes()
                                , drawingrequestviewService.getDrawingRequestTitles()
                                , drawingrequestviewService.getDrawingRequestValues(84)
                                , itcquoteService.getSalesTerritories()
                                , drawingviewService.getDrawingAccounts()
                    ]).then(function (queues) {
                        $scope.scopes = queues[1].data;
                        $scope.DrawingRequestTitles = queues[2].data;
                        $scope.DrawingRequestDrawingTypes = queues[3].data;
                        $scope.purchase_territories = queues[4].data;
                        $scope.accounts = queues[5].data;

                        $scope.user = coreService.getUser();
                        if ($scope.db.selectedDrawing !== null) {
                            drawingviewService.getdrawingById($scope.db.selectedDrawing.drawing_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.selectedDrawing = response.data;

                                    if ($scope.db.selectedDrawing.wind_MPH == '1' || $scope.db.selectedDrawing.wind_KPH == '1' || $scope.db.selectedDrawing.wind_KPA == '1') {
                                        $scope.isRequired = false;
                                    }
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                        else {
                            $scope.isNew = true;
                            var drawing = {
                                drawing_id: queues[0].data.success
                                , create_account_id: $scope.user.user_id
                                , modify_account_id: $scope.user.user_id
                                , creator_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , modifier_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , create_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , modify_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , dwg_number: ''
                                , customer: ''
                                , customer1: ''
                                , scope_id: queues[1].data[1].scope_id
                                , width: ''
                                , length: ''
                                , drawing_request_id: ''
                                , drawn_by_id: ''
                                , drawn_by: ''
                                , drawing_type_id: queues[3].data[0].property_value_no
                                , comments: ''
                                , caption: ''
                                , sales_person: ''
                                , sales_person_id: ''
                                , structure_use: ''
                                , city: ''
                                , state: ''
                                , status_id: ''
                                , territory_id: ''
                                , wind: ''
                                , wind_MPH: ''
                                , wind_KPH: ''
                                , wind_KPA: ''
                                , snow: ''
                                , wind_measure: 0
                            }
                            $scope.db.selectedDrawing = drawing;
                        }
                    }
                    , function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
                else {
                    return;
                }
            }
        }, true);

        $scope.saveDrawing = function () {
            var wind_measure = $scope.db.selectedDrawing.wind_measure;
            $scope.db.selectedDrawing.wind_KPA = wind_measure === 'KPA' ? 1 : 0;
            $scope.db.selectedDrawing.wind_KPH = wind_measure === 'KPH' ? 1 : 0;
            $scope.db.selectedDrawing.wind_MPH = wind_measure === 'MPH' ? 1 : 0;
            $scope.db.selectedDrawing.modify_date = moment().format('YYYY-MM-DD HH:mm:ss');
            console.log($scope.db.selectedDrawing);

            drawingviewService.writeDrawing($scope.db.selectedDrawing).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.fetched = false;
                    $scope.db.refresh = true;
                    $state.go('drawing');
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }


    };
    controller.$inject = ['$scope', 'coreService', 'drawingviewService', 'drawingrequestviewService', 'itcquoteService', 'constantService', '$filter', '$q', '$state', '$timeout', '$uibModal', '$confirm'];
    angular.module('drawingviewModule')
            .controller('drawingviewController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getdrawingById: function (drawing_id) {
                return $http.get(coreService.getApi() + 'getdrawingById/' + drawing_id);
            },
            writeDrawing: function (post) {
                return $http.post(coreService.getApi() + 'updatedrawing', post);
            },
            getDrawingAccounts: function ( ) {
                return $http.get(coreService.getApi() + 'drawingaccounts' );
            }
        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('drawingviewModule')
            .factory('drawingviewService', factory);
}());(function () {
    var controller = function ($scope, coreService, emailService, $uibModalInstance, $filter) {
        $scope.module = coreService.getCurrentState()
        
        $scope.mail = {}
        $scope.tinymceOptions = {
            menubar: false,
            height: '300px'
        }
        $scope.$watch(function () {
            return coreService.getParentDB($scope.module)
        }, function (newVal) {
            if (angular.isDefined(newVal.email) && newVal.email !== null) {
                $scope.db = newVal
                $scope.user = coreService.getUser()
                $scope.email = newVal.email
                $scope.email.db = $scope.module
                if(!angular.isDefined($scope.email.toArray) || $scope.email.toArray === null)
                    $scope.email.toArray = []
                if(!angular.isDefined($scope.email.ccArray) || $scope.email.ccArray === null)
                    $scope.email.ccArray = []
                $scope.email.user_id = $scope.user.user_id;
                $scope.email.user_email = $scope.user.user_email;
                $scope.email.first_name = $scope.user.first_name;
                $scope.email.last_name = $scope.user.last_name;
                $scope.email.email_password = $scope.user.email_password;
                $scope.signature = '<p></p>' +
                        '<p><strong>' + $scope.user.first_name + ' ' + $scope.user.last_name + '<strong><br/>';
                $scope.signature += $scope.user.title !== '' ? $scope.user.title : '';
                $scope.signature += '<br/><span style="color: blue;font-size: 1.1em; font-weight: bold">Sprung Instant Structures</span><br/>';
                $scope.signature += 'Toll free: 1.855.551.4886';
                $scope.signature += $scope.user.phone !== '' ? ' | P: ' + $filter('phoneNumber')($scope.user.phone) : '';
                $scope.signature += $scope.user.phone !== '' && $scope.user.phone_ext !== '' ? ' Ext: ' + $scope.user.phone_ext : '';
                $scope.signature += '<br/>Email: ' + $scope.user.user_email + '<br/>';
                $scope.signature += '<a href="http://www.sprung.com">http://www.sprung.com</a>';
                $scope.email.message = angular.isDefined($scope.email.body) ? $scope.email.body : ""
                $scope.email.message += $scope.signature;
            } else {
                return
            }
        });
        $scope.tagHandler = function (tag) {
            if (tag.match(/^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/)) {
                var i = tag.indexOf('@');
                var fullname = tag.substr(0, i).toLowerCase().trim();
                return {contact: {email: tag, fullname: fullname}, label: fullname + '<' + tag + '>'}
            }
        };
        $scope.getToContacts = function (term) {
            if (!term.length)
                return
            var q = term.substr(0, 1).toLowerCase().trim()
            emailService.getContacts(q).then(function (response) {
                console.log(response.data)
                if (!response.data.hasOwnProperty('file')) {
                    var contacts = []
                    angular.forEach(response.data, function (contact) {
                        angular.forEach(contact.email, function (email) {
                            contacts.push({contact: {email: email, fullname: contact.fullname}, label: contact.fullname + '<' + email + '>'})
                        })
                    })
                    $scope.tocontacts = _.sortBy(contacts, function (o) {
                        return o.fullname
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.selectedTo = function (item) {
            console.log(item)
            $scope.email.toArray.push(item.contact)
        }


        $scope.getCcContacts = function (term) {
            if (!term.length)
                return
            var q = term.substr(0, 1).toLowerCase().trim()
            emailService.getContacts(q).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var contacts = []
                    angular.forEach(response.data, function (contact) {
                        angular.forEach(contact.email, function (email) {
                            contacts.push({contact: {email: email, fullname: contact.fullname}, label: contact.fullname + '<' + email + '>'})
                        })
                    })
                    $scope.cccontacts = _.sortBy(contacts, function (o) {
                        return o.fullname
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.selectedCc = function (item) {
            $scope.email.ccArray.push(item.contact)
        }
        $scope.send = function () {
            if (!$scope.email.toArray.length) {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: 'You cannot send message with To address'});
                return;
            }
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'sending message please wait'})
            emailService.sendEmail($scope.email)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'info', message: 'Email has been sent successfuly'});
                            $scope.db.email = null
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception',
                                message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception',
                            message: response.data})
                    })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'emailService', '$uibModalInstance', '$filter']
    angular.module('emailModule')
            .controller('EmailController', controller)
}());(function () {
    var controller = function ($scope, coreService, emailService, $uibModalInstance, $filter, $rootScope, Upload) {
        $scope.module = coreService.getCurrentState()

        $scope.mail = {}

        $scope.tinymceOptions = {
            fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
            plugins: "textcolor",
            menubar: false,
            toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor backcolor",
            height: '300px'
        }
        $scope.$watch(function () {
            return coreService.getParentDB($scope.module)
        }, function (newVal) {

            if ($rootScope.db) {
                newVal = $rootScope.db;
            }
            if (angular.isDefined(newVal.email) && newVal.email !== null) {
                $scope.db = newVal
                $scope.user = coreService.getUser()
                $scope.email = newVal.email
                $scope.email.db = $scope.module
                if (!angular.isDefined($scope.email.toArray) || $scope.email.toArray === null)
                    $scope.email.toArray = []
                if (!angular.isDefined($scope.email.ccArray) || $scope.email.ccArray === null)
                    $scope.email.ccArray = []
                $scope.email.user_id = $scope.user.user_id;
                $scope.email.user_email = $scope.user.user_email;
                $scope.email.first_name = $scope.user.first_name;
                $scope.email.last_name = $scope.user.last_name;
                $scope.email.email_password = $scope.user.email_password;
                $scope.signature = '<p></p>' +
                        '<p><strong>' + $scope.user.first_name + ' ' + $scope.user.last_name + '<strong><br/>';
                $scope.signature += $scope.user.title !== '' ? $scope.user.title : '';
                $scope.signature += '<br/><span style="color: blue;font-size: 1.1em; font-weight: bold">Sprung Instant Structures</span><br/>';
                $scope.signature += 'Toll free: 1-800-661-1163';
                $scope.signature += $scope.user.phone !== '' ? ' | P: ' + $filter('phoneNumber')($scope.user.phone) : '';
                $scope.signature += $scope.user.phone !== '' && $scope.user.phone_ext !== '' ? ' Ext: ' + $scope.user.phone_ext : '';
                $scope.signature += '<br/>Email: ' + $scope.user.user_email + '<br/>';
                $scope.signature += '<a href="http://www.sprung.com">http://www.sprung.com</a>';
                $scope.email.message = "<span style='font-family:Arial,Helvetica,sans-serif'>" + (angular.isDefined($scope.email.body) ? $scope.email.body : "") + "</span>"
                $scope.email.message += $scope.signature;
            } else {
                return
            }
        })
        $scope.tagHandler = function (tag) {
            if (tag.match(/^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/)) {
                var i = tag.indexOf('@');
                var fullname = tag.substr(0, i).toLowerCase().trim();
                return {contact: {email: tag, fullname: fullname}, label: fullname + '<' + tag + '>'}
            }
        }
        $scope.getToContacts = function (term) {
            $scope.se = term;
            if (!term.length)
                return
            var q = term.substr(0, 1).toLowerCase().trim()
            console.log(q)
            emailService.getContacts(q).then(function (response) {
                console.log(response.data)
                if (!response.data.hasOwnProperty('file')) {
                    var contacts = []
                    angular.forEach(response.data, function (contact) {
                        angular.forEach(contact.email, function (email) {
                            contacts.push({contact: {email: email, fullname: contact.fullname}, label: contact.fullname + '<' + email + '>'})
                        })
                    })
                    $scope.tocontacts = _.sortBy(contacts, function (o) {
                        return o.fullname
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.selectedTo = function (item) {
            console.log(item)
            $scope.email.toArray.push(item.contact)
            console.log($scope.email.toArray)
        }


        $scope.getCcContacts = function (term) {
            $scope.se = term;
            if (!term.length)
                return
            var q = term.substr(0, 1).toLowerCase().trim()
            console.log(q)
            emailService.getContacts(q).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var contacts = []
                    angular.forEach(response.data, function (contact) {
                        angular.forEach(contact.email, function (email) {
                            contacts.push({contact: {email: email, fullname: contact.fullname}, label: contact.fullname + '<' + email + '>'})
                        })
                    })
                    $scope.cccontacts = _.sortBy(contacts, function (o) {
                        return o.fullname
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.selectedCc = function (item) {
            $scope.email.ccArray.push(item.contact)
        }
        $scope.send = function () {
            if (!$scope.email.toArray.length) {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: 'You cannot send message with To address'});
                return;
            }
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'sending message please wait'})
            emailService.sendEmail($scope.email)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'info', message: 'Email has been sent successfuly'});
                            $scope.db.email = null
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception',
                                message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception',
                            message: response.data})
                    })
        }
        $scope.uploadFiles = function (files) {
            console.log(files)
            if (files && files.length) {
//            for (var i = 0; i < files.length; i++) {
//              var file = files[i];
//              if (!file.$error) {

                var url = "api/exchange/receiveattachment.php"
                coreService.resetAlert()
//            coreService.setAlert({type: 'wait', message: 'Uploading files ... Please wait'})
                var upload = Upload.upload({
                    url: url,
//                methos: "POST",
//                fields: $scope.db.files.data,
//                fileFormDataNames: names,
                    data: {
                        files: files
                    }
                })
                upload.then(function (response) {
                    console.log(response.data)
                    angular.forEach(response.data, function (value) {
                        console.log(value)

                        var attach = {
                            db: $scope.module,
                            file: value.file,
                            name: value.name
                        };

//                    var attachments = [];
                        $scope.email.attachments.push(attach);
                    });
                    console.log($scope.email.attachments)
//                if (response.data.hasOwnProperty('success')) {
//                    if (response.data.success == 1) {
//                        coreService.resetAlert()
//                        coreService.setAlert({type: 'info', message: 'Files uploaded successfule'})
//                        delete $scope.db.files
//                        $scope.db.upload.doneUpload = true;
//                    } else {
//                        coreService.resetAlert()
//                        coreService.setAlert({type: 'error', message: response.data.reason})
//                        delete $scope.db.files
//                    }
//                }

                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error', message: response.data})
//                delete $scope.db.files
                }, function (evt) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'info', message: "progress: " + parseInt(100.0 * evt.loaded / evt.total) + "%"})
                })
//                Upload.upload({
//                    url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
//                    data: {
//                      username: $scope.username,
//                      file: file  
//                    }
//                }).then(function (resp) {
//                    $timeout(function() {
//                        $scope.log = 'file: ' +
//                        resp.config.data.file.name +
//                        ', Response: ' + JSON.stringify(resp.data) +
//                        '\n' + $scope.log;
//                    });
//                }, null, function (evt) {
//                    var progressPercentage = parseInt(100.0 *
//                    		evt.loaded / evt.total);
//                    $scope.log = 'progress: ' + progressPercentage + 
//                    	'% ' + evt.config.data.file.name + '\n' + 
//                      $scope.log;
//                });
//              }
//            }
            }
        }
//        $scope.uploadFiles = function () {
//            if ($scope.newattach.file) {
////                if ($scope.newattach.file.type !== 'application/pdf') {
////                    coreService.resetAlert()
////                    coreService.setAlert({type: 'error', message: 'We only accept files of type PDF'})
////                    $scope.invoice.HeaderInformation.Attachments.splice(index, 1);
////                    $scope.addAttachment();
////                    return;
////                }
//                var fileReader = new FileReader();
//                fileReader.readAsDataUrl($scope.newattach.file, $scope)
//                        .then(function (result) {
//                            $scope.newattach.file = result.split(',')[1];
//                            $scope.newattach.name = $scope.newattach.file.name;
//                            console.log($scope.newattach);
//                        })
//                $scope.email.attachments.push($scope.newattach);
//                console.log($scope.$scope.newattach);
//            }
//        };
    }
    controller.$inject = ['$scope', 'coreService', 'emailService', '$uibModalInstance', '$filter', '$rootScope', 'Upload']
    angular.module('emailModule')
            .controller('EmailWithUploadController', controller)
}());(function () {
    var directive = function ($compile, emailService,coreService) {
        return {
            restrict: 'A',
            replace: true,
            require: 'ngModel',
            link: function ($scope, $element, $attrs, ngModel) {
                $scope.$watch(function () {
                    return ngModel.$modelValue
                }, function (newValue) {
                    if (newValue !== '') {
                        var letter = newValue.substr(0, 1)
                        console.log($attrs.contactType);
                        emailService.getContacts(letter).then(function(response){
                            if(!response.data.hasOwnProperty('file') && response.data.length){
                                console.log(response.data)
                                var contacts = []
                                angular.forEach(response.data,function(contact){
                                    angular.forEach(contact.email,function(email){
                                        contacts.push({contact: contact, display: contact.fullname+'<'+email+'>'})
                                    })
                                })
                                var body = '<select class="form-control" ng-model="'
                                if($attrs.contactType === 'to')
                                    body += 'selectedTo'
                                else
                                    body += 'selectedCc'
                                body += '" ng-options="c.contact as c.display for c in contacts"></select>'
                                
                                var $e = $compile(body)($scope)
                                $element.replaceWith($e)             
                            }else{
                                $element.replaceWith($element)
                            }
                        },function(response){
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                })
            }
        }
    }
    directive.$inject = ["$compile","emailService","coreService"]
    angular.module('emailModule')
            .directive("searchContacts",directive)
}());(function(){
    var filter = function(){
        return function(items,prop,search){
            if(angular.isDefined(items) && Array.isArray(items) && items.length){
                if(angular.isDefined(search && search.length>1)){
                    var tempItems = []
                    var re = RegExp("^" + search, 'i')
                    angular.forEach(items,function(item){
                        if(item.contact[prop].toString().match(re))
                            tempItems.push(item)
                    })
                    return tempItems
                }else{
                    return items
                }
            }else{
                return items
            }
        }
    }
    angular.module('emailModule')
            .filter('searchProps',filter)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getContacts: function(letter){
              var user = coreService.getUser();
              var post = {
                  user_email: user.user_email,
                  email_password: user.email_password,
                  letter: letter
              }
              return $http.post(coreService.getApi()+'contacts',post)
          },
          sendEmail: function (email) {
                return $http.post(coreService.getApi() + 'email', email);
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('emailModule')
            .factory('emailService', factory)
}());(function () {
    var controller = function ($scope, coreService, filecollectionService, $uibModal) {
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal)) {
                $scope.db = newVal
                if (angular.isDefined($scope.db.filecollection)) {
                    $scope.module = coreService.getCurrentState()
                    $scope.privileges = coreService.getPrivileges()
                    $scope.candel = coreService.getCanDel($scope.module);
                }
            }
        }, true)
        $scope.clearCollection = function () {
            delete $scope.db.filecollection
        }
        $scope.removeFromCollection = function (item) {
            var index = $scope.db.filecollection.indexOf(item)
            $scope.db.filecollection.splice(index, 1)
        }
        $scope.emailCollection = function () {
            if ($scope.module !== "repo") {
                coreService.resetAlert();
                coreService.setAlert({
                    type: 'wait',
                    message: 'Zipping collection.. please wait'
                });
                coreService.zipCollection($scope.db.filecollection, $scope.module)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            var zipfile = response.data.zipfile;
                            email(zipfile);
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
            } else {
                emailLinks()
            }
        }

        var emailLinks = function () {
            var body = ''
            console.log($scope.db.filecollection)
            angular.forEach($scope.db.filecollection, function (file) {
                body += '<p>https://webapps.sprung.com/api/getfile.php?id=' + file.file_id + '&mod=repo</p>'
            })
            var email = {
                subject: 'Sprung link collection',
                body: body,
                attachments: []
            }
            $scope.db.email = email
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/email.html',
                controller: 'EmailController',
                size: 'lg'
            })
            uibModal.result.then(function (response) {
                if (response === 'success') {
                    $scope.db.filecollection = []
                }
            })
        }
        var email = function (zipfile) {
            var email = {
                subject: 'Sprung file collection',
                body: '',
                attachments: [
                    {
                        db: $scope.module,
                        file: '/data/zip/' + zipfile,
                        name: zipfile
                    }
                ]
            }
            $scope.db.email = email
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/email.html',
                controller: 'EmailController',
                size: 'lg'
            })
            uibModal.result.then(function (response) {
                if (response === 'success') {
                    $scope.db.filecollection = []
                }
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'filecollectionService', '$uibModal']
    angular.module('filecollectionModule')
        .controller('FilecollectionController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('filecollectionModule')
            .factory('filecollectionService', factory)
}());(function () {
    var controller = function ($scope, coreService, filelistService) {
        $scope.dynamicPopover = {
            templateUrl: "app/filelistModule/views/versions.html",
            placement: 'left'
        }
        $scope.startsWith = function (actual, expected) {
            var lowerStr = (actual + "").toLowerCase();
            return lowerStr.indexOf(expected.toLowerCase()) === 0;
        }
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal)) {
                $scope.db = newVal
                if ($scope.db.filelist !== null && angular.isDefined($scope.db.filelist)) {
                    $scope.module = coreService.getCurrentState()
                    $scope.privileges = coreService.getPrivileges()
                    $scope.items = $scope.db.filelist
                    $scope.candel = coreService.getCanDel($scope.module)
                }
            }
        }, true)
        $scope.addToCollection = function (item) {
            if (angular.isDefined($scope.db.filecollection)) {
                if ($scope.db.filecollection.indexOf(item) == -1) {
                    $scope.db.filecollection.push(item)
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error', message: 'This file already in the collection'})
                }
            } else {
                $scope.db.filecollection = [
                    item
                ]
            }
        }
        $scope.getVersions = function(item){
            var post = {
                db: $scope.module,
                file: item
            }
            filelistService.getVersions(post).then(function(response){
                if(!response.data.hasOwnProperty('file')){
                    $scope.versions = response.data
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            },function(response){
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.deleteVersions = function(item){
            var post = {
                db: $scope.module,
                file: item
            }
            filelistService.deleteVersions(post).then(function(response){
                if(!response.data.hasOwnProperty('file')){
                    $scope.db.filesChanged = true
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            },function(response){
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.deleteFile = function(item){
            var post = {
                db: $scope.module,
                file: item
            }
            filelistService.deleteFile(post).then(function(response){
                if(!response.data.hasOwnProperty('file')){
                    $scope.db.filesChanged = true
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            },function(response){
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'filelistService']
    angular.module('filelistModule')
            .controller('FilelistController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getVersions: function(post){
                return $http.post(coreService.getApi()+'getversions',post)
            },
            deleteVersions: function(post){
                return $http.post(coreService.getApi()+'deleteversions',post)
            },
            deleteFile: function(post){
                return $http.post(coreService.getApi()+'deletefile',post)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('filelistModule')
            .factory('filelistService', factory)
}());(function () {
    var controller = function ($scope, coreService,forgotpasswordService,$state) {
        var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        $scope.user = {
            email: '',
            question: '',
            answer: ''
        }

        $scope.$watch('user.email', function (newVal) {
            if (angular.isDefined(newVal) && newVal !== '') {
                if (newVal.match(mailformat)) {
                    forgotpasswordService.getQuestion($scope.user.email)
                            .then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.security = response.data
                                    $scope.user.question = $scope.security.question
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                }
            }
        })
        $scope.reset = function(){
            if($scope.user.answer !== $scope.security.answer){
                coreService.resetAlert()
                coreService.setAlert({type: 'error', message: 'The security answer you typed doesn\'t match the one on record'})
                return
            }
            
            forgotpasswordService.resetPassword($scope.user.email)
                    .then(function(response){
                        if(!response.data.hasOwnProperty('file')){
                            if(response.data.success){
                                coreService.resetAlert()
                                coreService.setAlert({type: 'info', message: 'A new password has been sent by email to your address in record'})
                                $state.go('auth')
                            }else{
                                coreService.resetAlert()
                                coreService.setAlert({type: 'error', message: response.data.reason})
                            }
                        }else{
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
            },function(response){
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
            })
        }
    }  
    controller.$inject = ['$scope', 'coreService','forgotpasswordService','$state']
    angular.module('forgotpasswordModule')
            .controller('ForgotpasswordController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getQuestion: function(email){
                var post = {
                    email: email
                }
                return $http.post(coreService.getApi()+'getquestion',post)
            },
            resetPassword: function(email){
                var post = {
                    email: email
                }
                return $http.post(coreService.getApi()+'resetpassword',post)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('forgotpasswordModule')
            .factory('forgotpasswordService', factory)
}());(function () {
    var controller = function ($scope, coreService, hrService, $filter, $uibModal) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "hr") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    console.log($scope.db)
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {
                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions
                        if (!$scope.privileges.hrreadonly) {
                            $scope.db.upload = {
                                showUpload: true
                                , acceptedFiles: ".pdf,.docx,.xlsx"
                                , multiple: true
                                , uploadMessage: "Drop PDF, Word or Excel files here to upload"
                                , doneUpload: false
                            }
                        }
                        if ($scope.db.tree.selectedNode.name !== 'Root') {
                            getFiles()
                        } else {
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }

                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    getTree()
                }

            }
        }, true)
        var setMenuOptions = function () {
            console.log($scope.privileges)
            if ($scope.privileges.hrreadonly === false) {
                if ($scope.db.tree.selectedNode.name === 'Root') {
                    $scope.menuOptions = [
                        ['New folder', function ($itemScope) {
                                newFolder();
                            }]
                    ]
                } else {
                    if ($scope.db.tree.parents.length < 4) {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]

                                        , null

                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]

                                        , null

                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.hruser === true || $scope.privileges.hradmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]

                                        , null

                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                            ]

                        }
                    } else {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]

                                        , null

                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.hruser === true || $scope.privileges.hradmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                            ]

                        }
                    }
                }
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/hrModule/views/newfolder.html'
                , controller: 'HrFolderController'
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                    , op: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var deleteFolder = function () {
            if ($scope.db.tree.selectedNode.hasFiles) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error'
                    , message: 'This folder contains files, Please remove these files first'
                })
                return
            }
            if ($scope.db.tree.selectedNode.children.length) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder has children, Please remove the children first and try again'
                })
                return
            }
            hrService.deleteFolder($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    getTree()
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception'
                    , message: response.data
                })
            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/hrModule/views/newfolder.html'
                , controller: 'HrFolderController'
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                    , op: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var getTree = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Getting HR tree .. Please wait'
            })
            hrService.getHrRoot()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var treedata = response.data
                            coreService.resetAlert()
//                        var selected
//                        var parents
//                        var tree = []
//                        if ($scope.db.hasOwnProperty('tree')) {
//                            selected = tree.selectedNode
//                            parents = tree.parents
//                                //parents.push(tree.SelectedNodes)
//                        }
//                        $scope.db.tree = {
//                            treedata: response.data
//                            , selectedNode: angular.isDefined(selected) ? selected : treedata[0]
//                            , parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
//                        }
                            console.log($scope.db.tree)
                            var selectedNode;
                            var parents = []
                            if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                                parents.push(treedata[0]);
                                angular.forEach($scope.db.tree.parents, function ($value, $key) {
                                    if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                        parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                                    if ($key === $scope.db.tree.parents.length - 1) {
                                        if (angular.isDefined(parents[parents.length - 1]))
                                            selectedNode = parents[parents.length - 1]; // in case of create new folder
                                        else
                                            selectedNode = parents[parents.length - 2]; // in case of delete folder
                                    }
                                })
                                console.log(parents)
                                console.log($scope.db.tree)
                            }
                            $scope.db.tree = {
                                treedata: treedata,
                                selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                                parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception'
                                , message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception'
                            , message: response.data
                        })
                    })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Fetching files .. Please wait'
            })
            hrService.getHrFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception'
                    , message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                user: $scope.user
                , db: $scope.module
                , node: $scope.db.tree.selectedNode
                , filenames: $scope.filenames
                , parents: []
            }
            $scope.db.files.data = data
        }
    }

    controller.$inject = ['$scope', 'coreService', 'hrService', '$filter', '$uibModal']
    angular.module('hrModule')
            .controller('HrController', controller)
}());(function () {
    var controller = function ($scope, node, op, coreService, $uibModalInstance, $filter, hrService) {
        $scope.node = node
        $scope.op = op
        $scope.foldername = ''
        console.log($scope.parent)
        $scope.addFolder = function () {
            if ($scope.foldername !== '') {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'folder name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
                var folder = {
                    name: $scope.foldername
                }
                if ($filter('lowerCaseCompare')($scope.node.children, folder, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A folder with the same name exists under the same folder'})
                    return
                }

                if (op === 'add') {
                    var post = {
                        parent: $scope.node.id,
                        name: $scope.foldername,
                        userid: coreService.getUser().user_id
                    }
                    hrService.addFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    var post = {
                        nodeid: $scope.node.id,
                        name: $scope.foldername
                    }
                    hrService.renameFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'op', 'coreService', '$uibModalInstance', '$filter', 'hrService']
    angular.module('hrModule')
            .controller('HrFolderController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getHrRoot: function () {
                return $http.get(coreService.getApi() + 'hrroot');
            },
            getHrFiles: function (node) {
                return $http.get(coreService.getApi() + 'hrfiles/' + node.id);
            },
            addFolder: function(post){
                return $http.post(coreService.getApi()+'hrfolder',post)
            },
            deleteFolder: function(folderid){
                return $http.delete(coreService.getApi()+'hrfolder/'+folderid)
            },
            renameFolder: function(post){
                return $http.put(coreService.getApi()+'hrfolder',post)
            }
        }
    }
    factory.$inject = ['$http', 'coreService']
    angular.module('hrModule')
            .factory('hrService', factory)
}());(function () {
    var controller = function ($scope, coreService, constantService, industryService, $filter, $q, hotkeys, $state, $confirm) {

        var init = function () {
            $scope.industryLabels = {};
            $scope.frmlabels = constantService.getIndustryFormLabels();
            angular.forEach($scope.frmlabels, function (value, key) {
                $scope.industryLabels[key] = value;
            });
            $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
        };
        init();

        var decimal = {};
        decimal.round = function (number, precision) {
            var factor = Math.pow(10, precision);
            var tempNumber = number * factor;
            var roundedTempNumber = Math.round(tempNumber);
            return roundedTempNumber / factor;
        };

        $scope.treeOptions = {
            nodeChildren: "children",
            dirSelectable: true,
            injectClasses: {
                ul: "a1",
                li: "a2",
                liSelected: "a7",
                iExpanded: "a3",
                iCollapsed: "a4",
                iLeaf: "a5",
                label: "a6",
                labelSelected: "a8"
            }
        };
        $scope.selected = false;
        $scope.newSibiling = null;
        $scope.searchString = '';
        $scope.industry_counter = 0;

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = newVal;
            if (coreService.getCurrentState() === "industry") {
                $scope.module = coreService.getCurrentState();
                coreService.setDB($scope.db);
                $scope.getindustryTree();
                $scope.number_valid = constantService.getMessage('number_valid');
            }
        }, true);

        $scope.getindustryTree = function () {
            industryService.getindustry()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.industry = response.data;
                            $scope.selectedNode = $scope.industry[0];
                            $scope.currentindustry = $scope.industry[0];
                            $scope.filterparentindustry();
                            $scope.currentindustry.selected = true;
                            $scope.selected = true;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };

        $scope.showSelected = function (node, parentNode) {
            $scope.selected = true;
            $scope.currentindustry = node;
            $scope.currentindustry.selected = true;
            $scope.parentindustry = parentNode;
            $scope.application_name_valid = '';
            $scope.filterparentindustry();
        };

        $scope.filterparentindustry = function () {
            console.log('currentindustry.application_id: ' + $scope.currentindustry.application_id);
            var postedData = {
                application_id: $scope.currentindustry.application_id
            };
            industryService.getAllindustryList(postedData)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.allindustry = response.data;
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.updateindustry = function () {
            var industry = {
                application_id: $scope.currentindustry.application_id,
                parent_id: $scope.currentindustry.parent_id,
                sort_order: $scope.currentindustry.sort_order,
                industry_type_id: $scope.currentindustry.industry_type_id,
                application_name: $scope.currentindustry.application_name,
                abbreviation: $scope.currentindustry.abbreviation,
                description: $scope.currentindustry.description,
                building_code_id: $scope.currentindustry.building_code_id,
                air_charge_rate: $scope.currentindustry.air_charge_rate,
                mile_age: $scope.currentindustry.mile_age,
                airfare_charge: decimal.round($scope.currentindustry.airfare_charge, 4),
                alt_airfare_charge: decimal.round($scope.currentindustry.alt_airfare_charge, 4),
                half_load_charge: decimal.round($scope.currentindustry.half_load_charge, 4),
                full_load_charge: decimal.round($scope.currentindustry.full_load_charge, 4),
                team_load_charge: decimal.round($scope.currentindustry.team_load_charge, 4),
                danger_pay: decimal.round($scope.currentindustry.danger_pay, 4),
                pricing_policy: $scope.currentindustry.pricing_policy
            }
            industryService.updateindustry(industry)
                    .then(function (response) {
                        console.log(response.data.success);
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.application_name_valid = '';
                            if (response.data.success === 2 || response.data.success === '2') {
                                $scope.application_name_valid = constantService.getMessage('application_name_valid');
                            } else {
                                $scope.reloadindustryTree();
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('update_industry')});

                            }
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.deleteindustry = function () {
            if (!$scope.currentindustry.children.length) {
                industryService.deleteindustry($scope.currentindustry.application_id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                console.log(response.data.success);
                                if (response.data.success === 1) {
                                    $scope.reloadindustryTree();
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'info', message: constantService.getMessage('deleteRecord')});
                                }
                            } else {
                                coreService.resetAlert();
                                var err = response.data.message;
                                if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                    coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                                } else {
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', error: error.data});
                        });
            }
            else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: constantService.getMessage('deleteChild_valid')});
            }
        };

        $scope.addNewIndustrySibling = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newSibiling = true;
                    $scope.industry_counter += 1;
                    var sibling = {
                        parent_id: $scope.currentindustry.parent_id,
                        application_id: uuid,
                        application_name: "New Sibling" + $scope.industry_counter,
                        quote_letter_application_name: "New Sibling" + $scope.industry_counter,
                        sort_order: 0,
                        abbreviation: '',
                        description: '',
                        children: [],
                        air_charge_rate: ''
                    };
                    if ($scope.parentindustry) {
                        $scope.parentindustry.children.push(sibling);
                        var index = $scope.parentindustry.children.length - 1;
                        $scope.selectedNode = $scope.parentindustry.children[index];
                    } else {
                        $scope.industry.push(sibling);
                        $scope.selectedNode = $scope.industry[$scope.industry.length - 1];
                    }
                    $scope.currentindustry = sibling;
                    $scope.currentindustry.selected = true;
                    $scope.filterparentindustry();
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.addNewIndustryChild = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newChild = true;
                    $scope.industry_counter += 1;

                    var child = {
                        parent_id: $scope.currentindustry.application_id,
                        application_id: uuid,
                        application_name: "New Child" + $scope.industry_counter,
                        sort_order: 0,
                        abbreviation: '',
                        description: '',
                        children: [],
                        air_charge_rate: ''
                    };



                    if (!$scope.currentindustry.children) {
                        $scope.currentindustry.children = [];
                    }
                    $scope.currentindustry.children.push(child);

                    var index = $scope.currentindustry.children.length - 1;
                    $scope.selectedNode = $scope.currentindustry.children[index];
                    $scope.currentindustry = child;
                    $scope.currentindustry.selected = true;
                    $scope.filterparentindustry();

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.reloadindustryTree = function () {
            $scope.industrySearch = "";
            $scope.selected = true;
            $scope.newSibiling = null;
            $state.transitionTo('industry', null, {'reload': true, inherit: false, notify: true});
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'industryService', '$filter', '$q', 'hotkeys', '$state', '$confirm'];
    angular.module('industryModule')
            .controller('industryController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
           
            getindustry: function () {
                return $http.get(coreService.getApi() + 'industry');
            },
            getAllindustryList: function (post) {
                return $http.post(coreService.getApi() + 'allIndustryList', post);
            },
            deleteindustry: function (application_id) {
                return $http.get(coreService.getApi() + "deleteindustry/" + application_id);
            },
            updateindustry: function (industry) {
                return $http.post(coreService.getApi() + 'updateindustry', industry);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('industryModule')
            .factory('industryService', factory);
}());;(function () {
    var controller = function ($scope, $rootScope, coreService, itcquoteService, leadoriginService, industryService, constantService, $filter, $q, hotkeys, $state, $timeout, $uibModal) {
        $scope.isNew = false;
        $scope.tabData = [{
                heading: "Customer info"
                , route: "itcquote.customerinfo"
            }, {
                heading: "Managerial info"
                , route: "itcquote.managrialinfo"
                , disable: false
            }, {
                heading: "Technical info"
                , route: "itcquote.technicalinfo"
                , disable: false
            }, {
                heading: 'Quote items'
                , route: 'itcquote.quoteitems'
                , disable: false
            }, {
                heading: "Summary"
                , route: 'itcquote.summary'
                , disable: false
            }, {
                heading: 'Notes'
                , route: 'itcquote.notes'
                        //, disable: false
            }, {
                heading: 'Drawing requests'
                , route: 'itcquote.drawingrequests'
                        //, disable: false
            }
        ]
        hotkeys.bindTo($scope).add({
            combo: 'alt+c'
            , description: 'go to Customer info'
            , callback: function () {
                $state.go('itcquote.customerinfo')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+m'
            , description: 'go to Managrial info'
            , callback: function () {
                $state.go('itcquote.managrialinfo')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+t'
            , description: 'go to Technical info'
            , callback: function () {
                $state.go('itcquote.technicalinfo')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+q'
            , description: 'go to Quote Items'
            , callback: function () {
                $state.go('itcquote.quoteitems')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+s'
            , description: 'go to Summary'
            , callback: function () {
                $state.go('itcquote.summary')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+n'
            , description: 'go to Notes'
            , callback: function () {
                $state.go('itcquote.notes')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+d'
            , description: 'go to Drawing requests'
            , callback: function () {
                $state.go('itcquote.drawingrequests')
            }
        })

        $scope.customerStyle = {color: 'red'};
        $scope.attentionStyle = {color: 'red'};
        $scope.policyStyle = {color: 'red'};
        $scope.locationStyle = {color: 'red'};
        $scope.leadoriginStyle = {color: 'red'};
        $scope.applicationStyle = {color: 'red'};
        $scope.purchaseStyle = {color: 'red'};
        $scope.structureStyle = {color: 'red'};
        $scope.membraneStyle = {color: 'red'};
        $scope.insulationStyle = {color: 'red'};
        $scope.windStyle = {color: 'red'};


        $scope.disableField = function () {
            var ret = true;
            $rootScope.pState = coreService.getPreviousState();
            if ($scope.isNew || $scope.db[$scope.db.selectedProfile.copyQuote] == true) {
                ret = false;
            }
            if ($scope.db.hasOwnProperty('selectedQuote') && $scope.db.selectedQuote !== null) {
                // console.log('$scope.db.selectedQuote.is_draft: ' + $scope.db.selectedQuote.is_draft);
                if ($scope.db.selectedQuote.is_draft === '1' || $scope.db.selectedQuote.is_draft === 1) {
                    ret = false;
                }
            }
            return ret;
        }

        $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
        $scope.quote = '';
        $scope.$watch(function () {
            return coreService.getParentDB('itcquotes');
        }, function (newValue) {
            // console.log('CurrentState: ' + coreService.getCurrentState());
            $rootScope.pState = coreService.getCurrentState();
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "itcquote.customerinfo") {
                $scope.db = newValue;
                $rootScope.optionItems = [];
                $rootScope.extraItems = [];
                $scope.optionItems = [];
                $scope.extraItems = [];
                // $scope.insulated = false;
                // console.log($scope.fetched);
                if ($scope.db.hasOwnProperty('selectedQuote') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Fetching data .. Please wait'})
                    $scope.user = coreService.getUser();
                    $scope.privileges = coreService.getPrivileges();
                    $scope.promise = $q.all([
                        itcquoteService.getNextQuoteNumber(),
                        itcquoteService.getQuoteSalesReps(),
                        itcquoteService.getPricingPolicies(),
                        itcquoteService.getQuoteMembranes(),
                        itcquoteService.getQuoteInsulationPackages(),
                        itcquoteService.getQuoteLineColors(),
                        itcquoteService.getQuoteAncorages(),
                        itcquoteService.getQuoteCustomers(),
                        itcquoteService.getQuoteScopes(),
                        itcquoteService.getQuoteExposures(),
                        coreService.getUuid(),
                        itcquoteService.getQuoteStructures()
                    ]).then(function (queues) {
                        $scope.getleadoriginsTree();
                        $scope.getindustryTree();
                        $scope.contacts = [];
                        $scope.membranchildren = queues[3].data.children;
                        $scope.salesreps = queues[1].data;
                        $scope.pricing_policies = queues[2].data;
                        $scope.membranes = queues[3].data.types;
                        $scope.insulations = queues[4].data;
                        $scope.linercolors = queues[5].data;
                        $scope.alllinercolors = queues[5].data;
                        $scope.anchorages = queues[6].data;
                        $scope.customers = queues[7].data;
                        $scope.scopes = queues[8].data;
                        $scope.exposures = queues[9].data;
                        $scope.structures = queues[11].data;
                        $scope.insulated = false;
                        if ($scope.db.selectedQuote !== null) {
                            $scope.db.selectedQuote.insulated = false;
                            $scope.promise = itcquoteService.getQuote($scope.db.selectedQuote.quote_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $rootScope.edit = true;
                                    $scope.quote = response.data.quote;
                                    $scope.db.selectedQuote = response.data.quote;
                                    console.log('company_id: ' + $scope.db.selectedQuote.company_id);
                                    console.log('attention_id: ' + $scope.db.selectedQuote.attention_id);

                                    $scope.quotecontactdetails = response.data.quotecontactdetails;
                                    $scope.updatefirst = true;

                                    if ($scope.db.selectedQuote.insulation_package_id != '' && $scope.db.selectedQuote.insulation_package_id != null) {
                                        $scope.db.selectedQuote.insulated = 1;
                                        $scope.insulated = true;
                                    }
                                    $scope.db.selectedQuote.modify_account_id = $scope.user.user_id;

                                    if ($scope.db.selectedQuote.location_id !== '' && $scope.db.selectedQuote.location_id !== null) {
                                        $scope.locationStyle = {color: '#27AE60;'};
                                    }
                                    if ($scope.db.selectedQuote.application_id !== '' && $scope.db.selectedQuote.application_id !== null) {
                                        $scope.applicationStyle = {color: '#27AE60;'};
                                    }
                                    if ($scope.db.selectedQuote.lead_origin_id !== '' && $scope.db.selectedQuote.lead_origin_id !== null) {
                                        $scope.leadoriginStyle = {color: '#27AE60;'};
                                    }
                                    if ($scope.db[$scope.db.selectedProfile.copyQuote] == true) {
                                        $scope.db.selectedQuote.quote_id = queues[10].data.success;
                                        $scope.db.selectedQuote.quote_no = queues[0].data.quote_no;
                                        $scope.db.selectedQuote.create_date = moment().format('YYYY-MM-DD HH=mm=ss');
                                        $scope.db.selectedQuote.modify_date = moment().format('YYYY-MM-DD HH=mm=ss');
                                        $scope.db.selectedQuote.create_account_id = $scope.user.user_id;
                                        $scope.db.selectedQuote.creator_name = $scope.user.first_name + ' ' + $scope.user.last_name;
                                        $scope.db.selectedQuote.modify_account_id = $scope.user.user_id;
                                        $scope.db.selectedQuote.modifier_name = $scope.user.first_name + ' ' + $scope.user.last_name;
                                        $scope.db.selectedQuote.territory_name = $scope.privileges.primary;
                                    }

                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                        else {
                            $scope.updatefirst = false;
                            $scope.isNew = true;
                            $rootScope.edit = false;
                            //$scope.fetched = false;
                            var notes = 'Equivalent quote result from (Quote Expert)\n\
------------------------------------------------	\n\
#Men: \n\
#Days: \n\
Frieght Cost: \n\
Technical Cost: \n\
Eng. FlatEnd: \n\
Accessories Sale: \n\
Accessories Lease A: \n\
Accessories Lease B: \n\
Sale: \n\
Lease A: \n\
Lease B: \n\
Comments by Ross:\n\
--------------------\n\
\n\
\n\
Comments by Mahmoud:\n\
---------------------';
                            var quote = {
                                quote_id: queues[10].data.success
                                , quote_no: queues[0].data.quote_no
                                , create_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , modify_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , create_account_id: $scope.user.user_id
                                , creator_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , modify_account_id: $scope.user.user_id
                                , modifier_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , scope_id: queues[8].data[0].scope_id
                                , lease_termA_id: 0
                                , lease_termB_id: 0
                                , quote_duration: 60
                                , no_of_tech_consultants: 1
                                , no_of_flat_ends: 0
                                , no_of_round_ends: 0
                                , no_of_center_bays: 0
                                , center_bay_spacing: 0
                                , structure_length: 0
                                , no_of_crane_break_points: 0
                                , no_of_tools_sets: 1
                                , wind_rate: 0
                                , snow_rate: 0
                                , wind_measure: 'MPH'
                                , title: ''
                                , code: 'new code'
                                , is_military: 0
                                , is_shipped_to_gulf_state: 0
                                , is_shipped_from_US: 0
                                , is_shipped_from_bahrin: 0
                                , territory_name: $scope.privileges.primary//t0    
                                , notes: notes
                                , membrane_type_id: ''
                                , pricing_policy_id: ''
                                        /*$filter('filter')($scope.pricing_policies , {
                                         pricing_policy_no: 2
                                         })[0].pricing_policy_id */
                                , sales_rep_id: ''
                                , attention_id: ''
                                , lead_origin_id: ''
                                , rep_territory_id: ''
                                , purchase_territory_id: ''
                                , landing_territory_id: ''
                                , location_id: ''
                                , application_id: ''
                                , structure_id: ''
                                , insulation_package_id: ''
                                , fabric_type_id: ''
                                , membrane_liner_color_id: ''
                                , anchorage_id: ''
                                , exposure_id: ''
                                , is_addition_to_existing_structure: 0
                                , provide_tension_cable: 0
                                , provide_opaque_membrane: 0
                                , provide_conduit_holes: 0
                                , is_snow_load: 0
                                , location_name: ''
                                , lead_origin_name: ''
                                , application_name: ''
                                , address_id: ''
                                , phone_id: ''
                                , email_id: ''
                                , insulated: false
                            }

                            $scope.db.selectedQuote = quote;
                        }
                        $scope.$watch('db.selectedQuote.company_id', function (newVal, oldVal) {
                            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                                console.log('oldVal: ' + oldVal);
                                console.log('newVal: ' + newVal);
                                $scope.db.selectedQuote.customer_name = $filter('filter')($scope.customers, {
                                    customer_id: newVal
                                })[0].customer_name;
                                $scope.customerStyle = {color: '#27AE60;'};


                                itcquoteService.getCustomerContact(newVal).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.contacts = response.data;
//                                        $scope.db.selectedQuote.address = {};
//                                        $scope.db.selectedQuote.phone = {};
//                                        $scope.db.selectedQuote.email = {};
//                                        $scope.addresses = [];
//                                        $scope.phones = [];
//                                        $scope.emails = [];
                                        if ($scope.isNew) {
                                            $scope.db.selectedQuote.attention_id = $scope.contacts [0].contact_id;
                                        }
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                            }
                        });
                        $scope.$watch('db.selectedQuote.attention_id', function (newVal, oldVal) {
                            console.log('attention_id2: ' + $scope.db.selectedQuote.attention_id);
                            var enabled = true;
                            if (!angular.isDefined(newVal) || newVal === null) {
                                enabled = false;
                            }

                            //  console.log('enabled1: ' + enabled);
                            $filter('filter')($scope.tabData, {
                                route: 'itcquote.managrialinfo'
                            })[0].disable = !enabled;

                            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                                console.log('attention_id3: ' + $scope.db.selectedQuote.attention_id);
                                $scope.attentionStyle = {color: '#27AE60;'};
                                itcquoteService.getContactDetails(newVal).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.addresses = response.data.addresses;
                                        $scope.phones = response.data.phones;
                                        $scope.emails = response.data.emails;
                                        $scope.db.selectedQuote.address = {};
                                        $scope.db.selectedQuote.phone = {};
                                        $scope.db.selectedQuote.email = {};


                                        console.log($scope.addresses);
                                        console.log($scope.phones);
                                        console.log($scope.emails);


                                        if (!$scope.updatefirst) {
                                            if ($scope.addresses.length > 0) {
                                                $scope.db.selectedQuote.address_id = $scope.addresses[0].address_id;
                                                $scope.db.selectedQuote.address.addresstype_name = $scope.addresses[0].addresstype_name;
                                                $scope.db.selectedQuote.address.city_name = $scope.addresses[0].city_name;
                                                $scope.db.selectedQuote.address.state_name = $scope.addresses[0].state_name;
                                                $scope.db.selectedQuote.address.country_name = $scope.addresses[0].country_name;
                                                $scope.db.selectedQuote.address.postal_code = $scope.addresses[0].postal_code;
                                            }
                                            if ($scope.phones.length > 0) {
                                                $scope.db.selectedQuote.phone_id = $scope.phones[0].phone_id;
                                                $scope.db.selectedQuote.phone.phonetype_name = $scope.phones[0].phonetype_name;
                                                $scope.db.selectedQuote.phone.extension = $scope.phones[0].extension;
                                            }
                                            if ($scope.emails.length > 0) {
                                                $scope.db.selectedQuote.email_id = $scope.emails[0].email_id;
                                                $scope.db.selectedQuote.email.emailtype_name = $scope.emails[0].emailtype_name;
                                            }
                                        } else {
                                            $scope.updatefirst = false;
                                            console.log(' $scope.quotecontactdetails.address_id:' + $scope.quotecontactdetails.address_id);
                                            console.log(' $scope.quotecontactdetails.phone_id:' + $scope.quotecontactdetails.phone_id);
                                            console.log(' $scope.quotecontactdetails.email_id:' + $scope.quotecontactdetails.email_id);

                                            $scope.db.selectedQuote.address_id = $scope.quotecontactdetails.address_id;
                                            $scope.db.selectedQuote.phone_id = $scope.quotecontactdetails.phone_id;
                                            $scope.db.selectedQuote.email_id = $scope.quotecontactdetails.email_id;

                                            if ($scope.addresses.length > 0) {
                                                $scope.db.selectedQuote.address.addresstype_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedQuote.address_id
                                                })[0].addresstype_name;
                                                $scope.db.selectedQuote.address.city_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedQuote.address_id
                                                })[0].city_name;
                                                $scope.db.selectedQuote.address.state_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedQuote.address_id
                                                })[0].state_name;
                                                $scope.db.selectedQuote.address.country_name = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedQuote.address_id
                                                })[0].country_name;
                                                $scope.db.selectedQuote.address.postal_code = $filter('filter')($scope.addresses, {
                                                    address_id: $scope.db.selectedQuote.address_id
                                                })[0].postal_code;
                                            }
                                            if ($scope.phones.length > 0) {
                                                $scope.db.selectedQuote.phone.phonetype_name = $filter('filter')($scope.phones, {
                                                    phone_id: $scope.db.selectedQuote.phone_id
                                                })[0].phonetype_name;
                                                $scope.db.selectedQuote.phone.extension = $filter('filter')($scope.phones, {
                                                    phone_id: $scope.db.selectedQuote.phone_id
                                                })[0].extension;
                                            }
                                            if ($scope.emails.length > 0) {
                                                $scope.db.selectedQuote.email.emailtype_name = $filter('filter')($scope.emails, {
                                                    email_id: $scope.db.selectedQuote.email_id
                                                })[0].emailtype_name;
                                            }
                                        }

                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data});
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                            }
                        });

                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                        coreService.setAlert({type: 'exception', message: errors[2].data});
                        coreService.setAlert({type: 'exception', message: errors[3].data});
                        coreService.setAlert({type: 'exception', message: errors[4].data});
                        coreService.setAlert({type: 'exception', message: errors[5].data});
                        coreService.setAlert({type: 'exception', message: errors[6].data});
                        coreService.setAlert({type: 'exception', message: errors[7].data});
                        coreService.setAlert({type: 'exception', message: errors[8].data});
                        coreService.setAlert({type: 'exception', message: errors[9].data});
                        coreService.setAlert({type: 'exception', message: errors[10].data});
                    });
                }
                else {
                    return;
                }
            }
        }, true);

        $scope.saveQuote = function (isDraft, backtogrid) {
            if ((isDraft && $scope.btnSaveDraft) || (!isDraft && $scope.btnSaveQuote) || (!angular.isDefined($scope.db.selectedQuote.company_id) || $scope.db.selectedQuote.company_id === null)) {
            } else {
                if (!angular.isDefined($scope.db.selectedQuote.structure_width)) {
                    $scope.db.selectedQuote.structure_width = '';
                }
                $scope.db.selectedQuote.structure_length = $scope.db.selectedQuote.structure_length ? $scope.db.selectedQuote.structure_length : 0;

                $scope.db.selectedQuote.title = $scope.db.selectedQuote.customer_name
                        + ' - ' + $scope.db.selectedQuote.application_name
                        + ' - ' + $scope.db.selectedQuote.structure_width + ' x ' + $scope.db.selectedQuote.structure_length
                        + ' - insulated';
                //company - application - structure width x length - insulated 
                var wind_measure = $scope.db.selectedQuote.wind_measure;
                $scope.db.selectedQuote.wind_KPA = wind_measure === 'KPA' ? 1 : 0;
                $scope.db.selectedQuote.wind_KPH = wind_measure === 'KPH' ? 1 : 0;
                $scope.db.selectedQuote.wind_MPH = wind_measure === 'MPH' ? 1 : 0;
                $scope.db.selectedQuote.is_draft = isDraft;
                console.log($scope.db.selectedQuote);
                itcquoteService.writeQuote($scope.db.selectedQuote).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        if (backtogrid) {
                            $scope.fetched = false;
                            $scope.db.refresh = true;
                            $state.go('itcquotes');
                        }
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                });
            }
        }

        $scope.$watchGroup(['db.selectedQuote.is_shipped_to_gulf_state'
                    , 'db.selectedQuote.is_shipped_from_bahrin'
                    , 'db.selectedQuote.is_shipped_from_US'
                    , 'db.selectedQuote.is_military'
                    , 'db.selectedQuote.purchase_territory_id'
                    , 'db.selectedQuote.lead_origin_id'
                    , 'db.selectedQuote.application_id'
                    , 'db.selectedQuote.location_id'], function (newVals) {
            if ($scope.db !== null && angular.isDefined($scope.db) && $scope.db.selectedQuote !== null) {
                var enabled = true;
                if (!angular.isDefined($scope.db.selectedQuote.lead_origin_id)
                        || $scope.db.selectedQuote.application_id === ''
                        || $scope.db.selectedQuote.lead_origin_id === ''
                        || $scope.db.selectedQuote.location_id === ''
                        || $scope.db.selectedQuote.purchase_territory_id === ''
                        || !angular.isDefined($scope.db.selectedQuote.application_id)
                        || !angular.isDefined($scope.db.selectedQuote.location_id)) {
                    enabled = false;
                }
                if ($scope.is_shipped_to_gulf_state && !angular.isDefined($scope.db.selectedQuote.is_shipped_to_gulf_state)) {
                    enabled = false;
                }
                if ($scope.is_shipped_from_bahrin && !angular.isDefined($scope.db.selectedQuote.is_shipped_from_bahrin)) {
                    enabled = false;
                }
                if ($scope.is_shipped_from_US && !angular.isDefined($scope.db.selectedQuote.is_shipped_from_US)) {
                    enabled = false;
                }
                if ($scope.is_military && !angular.isDefined($scope.db.selectedQuote.is_military)) {
                    enabled = false;
                }

                if ($scope.db.selectedQuote.purchase_territory_id !== '') {
                    $scope.purchaseStyle = {color: '#27AE60;'};
                }

                console.log('enabled 1: ' + enabled);
                $filter('filter')($scope.tabData, {
                    route: 'itcquote.technicalinfo'
                })[0].disable = !enabled;
            }
        });

        $scope.$watchGroup(["db.selectedQuote.structure_id"
                    , "db.selectedQuote.membrane_type_id"
                    , "db.selectedQuote.insulation_package_id"
                    , "db.selectedQuote.wind_measure"
                    , "db.selectedQuote.is_addition_to_existing_structure"
                    , "db.selectedQuote.provide_tension_cable"
                    , "db.selectedQuote.provide_opaque_membrane"
                    , "db.selectedQuote.provide_conduit_holes"]
                , function (newVals) {
                    if ($scope.db !== null && angular.isDefined($scope.db) && $scope.db.selectedQuote !== null) {
                        var enabled = true;
                        var structure = $scope.db.selectedQuote.structure_id;
                        var membrane = $scope.db.selectedQuote.membrane_type_id;
                        var insulated = $scope.db.selectedQuote.insulated;
                        var insulation_package_id = $scope.db.selectedQuote.insulation_package_id;

                        var is_addition_to_existing_structure = $scope.db.selectedQuote.is_addition_to_existing_structure;
                        var provide_tension_cable = $scope.db.selectedQuote.provide_tension_cable;
                        var provide_opaque_membrane = $scope.db.selectedQuote.provide_opaque_membrane;
                        var provide_conduit_holes = $scope.db.selectedQuote.provide_conduit_holes;


                        var wind_measure = $scope.db.selectedQuote.wind_measure;
                        console.log('wind_measure: ' + wind_measure);
                        if (!angular.isDefined(structure) || structure == '') {
                            enabled = false;
                        }
                        if (!angular.isDefined(membrane) || membrane === '') {
                            enabled = false;
                        }
                        else {
                            $scope.membraneStyle = {color: '#27AE60;'};
                        }
                        if (insulated && (!angular.isDefined(insulation_package_id) || insulation_package_id === '')) {
                            enabled = false;
                        }
                        else {
                            $scope.insulationStyle = {color: '#27AE60;'};
                        }
                        if (!angular.isDefined(wind_measure) || wind_measure === null) {
                            enabled = false;
                        }
                        else {
                            $scope.windStyle = {color: '#27AE60;'};
                        }
                        if ($scope.is_addition_to_existing_structure && (!angular.isDefined(is_addition_to_existing_structure) || is_addition_to_existing_structure === null)) {
                            enabled = false;
                        }
                        if ($scope.provide_tension_cable && (!angular.isDefined(provide_tension_cable) || provide_tension_cable === null)) {
                            enabled = false;
                        }
                        if (!angular.isDefined(provide_opaque_membrane) || provide_opaque_membrane === null) {
                            enabled = false;
                        }
                        if ($scope.provide_conduit_holes && (!angular.isDefined(provide_conduit_holes) || provide_conduit_holes === null)) {
                            enabled = false;
                        }

                        $scope.btnSaveDraft = enabled;
                        $scope.btnSaveQuote = !enabled;
                        console.log('enabled 2: ' + enabled);
                        $rootScope.selectedQuote = $scope.db.selectedQuote;
                        $rootScope.loadGrid = true;
                        $filter('filter')($scope.tabData, {
                            route: 'itcquote.quoteitems'
                        })[0].disable = !enabled;

                        $filter('filter')($scope.tabData, {
                            route: 'itcquote.summary'
                        })[0].disable = !enabled;
                    }
                });

        $scope.$watch('db.selectedQuote.membrane_type_id', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                console.log(newVal);
                $scope.membraneStyle = {color: '#27AE60;'};
                itcquoteService.getSubMembranes(newVal).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.memchildren = response.data;
                    } else {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                });
            }
        });

        $scope.getleadoriginsTree = function () {
            leadoriginService.getLeadOrigins()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.leadorigins = response.data;
                            $scope.selectedNode = $scope.leadorigins[0];
                            $scope.currentleadorigin = $scope.leadorigins[0];
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };
        $scope.showSelectedLeadOrigin = function (node, parentNode) {
            if (node.children.length > 0) {
                //  alert(constantService.getMessage('selectparent_valid'));
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'ItcquoteController',
                    scope: $scope
                });
            } else {
                $scope.leadoriginStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentleadorigin = node;
                $scope.db.selectedQuote.lead_origin_name = node.lead_origin_name;
                $scope.db.selectedQuote.lead_origin_id = node.lead_origin_id;
                $("#leadDiv").hide();
            }
        };
        $scope.getindustryTree = function () {
            industryService.getindustry()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.industry = response.data;
                            $scope.selectedNode = $scope.industry[0];
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };
        $scope.showSelectedIndustry = function (node, parentNode) {
            if (node.children.length > 0) {
                //alert(constantService.getMessage('selectparent_valid'));
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'ItcquoteController',
                    scope: $scope
                });
                return false;
            } else {
                $scope.applicationStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentindustry = node;
                $scope.db.selectedQuote.application_name = node.application_name;
                $scope.db.selectedQuote.application_id = node.application_id;
                $("#applicationDiv").hide();
            }
        };
        /* $scope.getProductsTree = function () {
         var data = {search: ''};
         itcquoteService.getQuoteStructures(data).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         $scope.products = response.data;
         $scope.selectedNode = $scope.products[0];
         $scope.currentProduct = $scope.products[0];
         } else {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         }
         }, function (response) {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         });
         };
         $scope.showSelectedProduct = function (node, parentNode) {
         if (node.children.length > 0) {
         alert(constantService.getMessage('selectparent_valid'));
         } else {
         $scope.selected = true;
         $scope.currentProduct = node;
         $scope.db.selectedQuote.product_name = node.product_name;
         $scope.db.selectedQuote.structure_id = node.product_id;
         $("#productDiv").hide();
         }
         };*/
        $scope.getLocationsTree = function (pricing_policy_id) {
            itcquoteService.getlocationsList(pricing_policy_id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.locations = response.data;
                    $scope.selectedNode = $scope.locations[0];
                    $scope.currentlocation = $scope.locations[0];
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        };
        $scope.showSelectedLocation = function (node, parentNode) {
            if (node.children.length > 0) {
                //alert(constantService.getMessage('selectparent_valid'));
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'ItcquoteController',
                    scope: $scope
                });
            } else {
                $scope.locationStyle = {color: '#27AE60;'};
                $scope.selected = true;
                $scope.currentlocation = node;
                $scope.db.selectedQuote.location_name = node.location_name;
                $scope.db.selectedQuote.location_id = node.location_id;
                $("#locationDiv").hide();
            }
        };

        $scope.$watch('db.selectedQuote.pricing_policy_id', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {

                $scope.policyStyle = {color: '#27AE60;'};
                itcquoteService.getTerritoriesByPricingId(newVal).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {

                        $scope.rep_territories = response.data;
                        $scope.purchase_territories = response.data;
                        $scope.landing_territories = response.data;
                        $scope.getLocationsTree(newVal);

                        var pricing_policy_no = $filter('filter')($scope.pricing_policies, {
                            pricing_policy_id: newVal
                        })[0].pricing_policy_no;

                        console.log(pricing_policy_no);
                        switch (pricing_policy_no) {
                            case 1:  //'Inc'
                            case 16: //'GSA'
                                $scope.is_shipped_from_US = false;
                                //delete $scope.db.selectedQuote.is_shipped_from_US;
                                $scope.is_shipped_from_bahrin = false;
                                //delete $scope.db.selectedQuote.is_shipped_from_bahrin;
                                $scope.is_shipped_to_gulf_state = false;
                                //delete $scope.db.selectedQuote.is_shipped_to_gulf_state;
                                $scope.is_military = true;
                                //delete $scope.db.selectedQuote.is_military;
                                $scope.showbuttons = false;

                                $scope.db.selectedQuote.is_shipped_from_bahrin = 0;
                                $scope.db.selectedQuote.is_shipped_from_US = 0;
                                $scope.db.selectedQuote.is_shipped_to_gulf_state = 0;
                                break;
                            case 2:  //'Ltd'
                                $scope.is_shipped_from_US = false;
                                //delete $scope.db.selectedQuote.is_shipped_from_US;
                                $scope.is_shipped_from_bahrin = false;
                                // delete $scope.db.selectedQuote.is_shipped_from_bahrin;
                                $scope.is_shipped_to_gulf_state = false;
                                //delete $scope.db.selectedQuote.is_shipped_to_gulf_state;
                                $scope.is_military = false;
                                // delete $scope.db.selectedQuote.is_military;
                                $scope.showbuttons = false;

                                $scope.db.selectedQuote.is_shipped_from_bahrin = 0;
                                $scope.db.selectedQuote.is_shipped_from_US = 0;
                                $scope.db.selectedQuote.is_shipped_to_gulf_state = 0;
                                $scope.db.selectedQuote.is_military = 0;
                                break;
                            case 3:  //'International'
                                $scope.is_shipped_from_US = false;
                                //delete $scope.db.selectedQuote.is_shipped_from_US;
                                $scope.is_shipped_from_bahrin = false;
                                //delete $scope.db.selectedQuote.is_shipped_from_bahrin;
                                $scope.is_shipped_to_gulf_state = false;
                                // delete $scope.db.selectedQuote.is_shipped_to_gulf_state;
                                $scope.is_military = true;
                                // delete $scope.db.selectedQuote.is_shipped_to_gulf_state;
                                $scope.showbuttons = false;

                                $scope.db.selectedQuote.is_shipped_from_bahrin = 0;
                                $scope.db.selectedQuote.is_shipped_from_US = 0;
                                $scope.db.selectedQuote.is_shipped_to_gulf_state = 0;

                                // $scope.db.selectedQuote.is_military = 0;
                                break;
                            case 4:  //'Bahrain'
                                $scope.is_shipped_from_US = true;
                                //delete $scope.db.selectedQuote.is_shipped_from_US;
                                $scope.is_shipped_from_bahrin = true;
                                // delete $scope.db.selectedQuote.is_shipped_from_bahrin;
                                $scope.is_shipped_to_gulf_state = false;
                                //delete $scope.db.selectedQuote.is_shipped_to_gulf_state;
                                $scope.is_military = true;
//                                $scope.db.selectedQuote.is_shipped_to_gulf_state = 0;
//                                $scope.db.selectedQuote.is_shipped_from_bahrin = 0;
//                                $scope.db.selectedQuote.is_shipped_from_US = 0;
//                                $scope.db.selectedQuote.is_shipped_to_gulf_state = 0;

                                //delete $scope.db.selectedQuote.is_military;
                                // $scope.showbuttons = true;
                                break;
                        }


                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data});
                });
            }
        });
        $scope.$watchGroup(['db.selectedQuote.no_of_round_ends'
                    , 'db.selectedQuote.no_of_center_bays'
                    , 'db.selectedQuote.center_bay_spacing'
                    , 'db.selectedQuote.structure_width'
                    , 'db.selectedQuote.no_of_flat_ends'],
                function (newVals) {
                    if ($scope.isNew) {
                        var n1 = parseInt(newVals[4]);
                        var n2 = parseInt(newVals[0]);
                        var n3 = parseInt(newVals[3]);
                        var n4 = parseInt(newVals[1]);
                        var n5 = newVals[2];
                        if (n1 !== null && isFinite(n1) && n2 !== null && isFinite(n2)) {
                            if (n1 > 2 || n2 > 2 || (n1 + n2) > 2) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'error', message: 'The max value of "No of eng flat ends" and "No of eng round ends" is 2.'});
                                $timeout(function () {
                                    coreService.resetAlert();
                                }, 3000);
                                $scope.db.selectedQuote.no_of_flat_ends = 0;
                                $scope.db.selectedQuote.no_of_round_ends = 0;
                                return;
                            }
                            if ((n1 + n2) < 2) {
                                $scope.is_addition_to_existing_structure = true;
                                $scope.provide_tension_cable = true;
//                            if (n1 == 0 && n2 == 0) {
//                                $scope.provide_tension_cable = true;
//                            } else {
//                                $scope.provide_tension_cable = false;
//                            }
                            } else {
                                $scope.db.selectedQuote.is_addition_to_existing_structure = 0;
                                $scope.is_addition_to_existing_structure = false;
                                $scope.db.selectedQuote.provide_tension_cable = 0;
                                $scope.provide_tension_cable = false;
                            }
                        }
                        console.log('structure_width: ' + n3)
                        if (angular.isDefined(n3)) {
                            if (n2 !== null && isFinite(n2) && n4 !== null && isFinite(n4) && n5 !== null && isFinite(n5)) {
                                $scope.db.selectedQuote.structure_length = (n4 * n5) + (n2 * n3 / 2);
                            }
                        }
                    }
                });

        $scope.calculateLength = function () {
            var n1 = parseInt($scope.db.selectedQuote.no_of_flat_ends);
            var n2 = parseInt($scope.db.selectedQuote.no_of_round_ends);
            var n3 = parseInt($scope.db.selectedQuote.structure_width);
            var n4 = parseInt($scope.db.selectedQuote.no_of_center_bays);
            var n5 = $scope.db.selectedQuote.center_bay_spacing;
            if (n1 !== null && isFinite(n1) && n2 !== null && isFinite(n2)) {
                if (n1 > 2 || n2 > 2 || (n1 + n2) > 2) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'error', message: 'The max value of "No of eng flat ends" and "No of eng round ends" is 2.'});
                    $timeout(function () {
                        coreService.resetAlert();
                    }, 3000);
                    $scope.db.selectedQuote.no_of_flat_ends = 0;
                    $scope.db.selectedQuote.no_of_round_ends = 0;
                    return;
                }
                if ((n1 + n2) < 2) {
                    $scope.is_addition_to_existing_structure = true;
                    $scope.provide_tension_cable = true;
                } else {
                    $scope.db.selectedQuote.is_addition_to_existing_structure = 0;
                    $scope.is_addition_to_existing_structure = false;
                    $scope.db.selectedQuote.provide_tension_cable = 0;
                    $scope.provide_tension_cable = false;
                }
            }
            console.log('structure_width: ' + n3)
            if (angular.isDefined(n3)) {
                if (n2 !== null && isFinite(n2) && n4 !== null && isFinite(n4) && n5 !== null && isFinite(n5)) {
                    $scope.db.selectedQuote.structure_length = (n4 * n5) + (n2 * n3 / 2);
                }
            }
        }

        $scope.$watch('db.selectedQuote.sales_rep_id', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                $scope.db.selectedQuote.territory_name = $filter('filter')($scope.salesreps, {
                    salesrep_id: newVal
                })[0].territory_name;

                $scope.db.selectedQuote.rep_territory_id = $filter('filter')($scope.salesreps, {
                    salesrep_id: newVal
                })[0].territory_id;
            }
        });

        $scope.checkFilter = function (arr, search) {
            var str = $filter('filter')(arr, {
                property_name: search
            })[0];

            return str;
        }

        $scope.$watch('db.selectedQuote.insulation_package_id', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                $scope.db.selectedQuote.insulated = true;
            }
        });

        $scope.getDefaultCenterBaySpacing = function (newVal) {
            itcquoteService.getProductProperties(newVal).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var properties = response.data;
                    if (properties.length) {
                        if (angular.isDefined($scope.checkFilter(properties, 'DefaultCenterBaySpacing'))) {
                            $scope.db.selectedQuote.center_bay_spacing = $filter('filter')(properties, {
                                property_name: 'DefaultCenterBaySpacing'
                            })[0].the_value;
                        }
                    }

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });

        }

        $scope.$watch('db.selectedQuote.structure_id', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal && newVal !== '') {
                $scope.structureStyle = {color: '#27AE60;'};
                itcquoteService.getProductProperties(newVal).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        var properties = response.data;
                        if (properties.length) {
                            if (angular.isDefined($scope.checkFilter(properties, 'DefaultCenterBaySpacing'))) {
                                if ($scope.isNew) {
                                    $scope.db.selectedQuote.center_bay_spacing = $filter('filter')(properties, {
                                        property_name: 'DefaultCenterBaySpacing'
                                    })[0].the_value;
                                }
                            }

                            if (angular.isDefined($scope.checkFilter(properties, 'BeamSize'))) {
                                if ($filter('filter')(properties, {
                                    property_name: 'BeamSize'
                                })[0].the_value === '5" X 10"') {
                                    //delete $scope.db.selectedQuote.provide_conduit_holes
                                    $scope.db.selectedQuote.provide_conduit_holes = 0;
                                    $scope.provide_conduit_holes = false;
                                } else {
                                    //delete $scope.db.selectedQuote.provide_conduit_holes
                                    $scope.db.selectedQuote.provide_conduit_holes = 0;
                                    $scope.provide_conduit_holes = true;
                                }
                            }

                            // console.log($scope.checkFilter(properties, 'Structure Width'));
                            if (angular.isDefined($scope.checkFilter(properties, 'Structure Width'))) {
                                $scope.db.selectedQuote.structure_width = $filter('filter')(properties, {
                                    property_name: 'Structure Width'// 6//'Structure Width'
                                })[0].the_value;
                            }
                            console.log('structure_width: ' + $scope.db.selectedQuote.structure_width);

                            if ($scope.db.selectedQuote.structure_width < 60 && $scope.db.selectedQuote.center_bay_spacing == 15) {
                                $scope.is_snow_load = true;
                                if ($scope.db.selectedQuote.structure_width == 30) {
                                    $scope.snow_load = '30-40 Lbs';
                                } else if ($scope.db.selectedQuote.structure_width == 40) {
                                    $scope.snow_load = '40-24 Lbs';
                                } else if ($scope.db.selectedQuote.structure_width == 50) {
                                    $scope.snow_load = '50-19 Lbs';
                                }

                            } else {
                                $scope.is_snow_load = false;
                                $scope.db.selectedQuote.is_snow_load = 0;
                            }

                        }

                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                });
            }
        });
        $scope.$watch('db.selectedQuote.insulated', function (newVal) {

            if (angular.isDefined(newVal) && newVal !== null) {
                $scope.isInsulated = newVal;
                $scope.linercolors = [];
                angular.copy($scope.alllinercolors, $scope.linercolors);
                if (!newVal) {
                    if ($scope.hasOwnProperty('db') && $scope.db.hasOwnProperty('selectedQuote') && $scope.db.selectedQuote.hasOwnProperty('insulation_package_id')) {
                        $scope.db.selectedQuote.insulation_package_id = '';
                    }
                    var index = $scope.linercolors.indexOf($filter('filter')($scope.linercolors, {
                        the_value: 'White'
                    })[0]);
                    console.log('index: ' + index);
                    $scope.linercolors.splice(index, 1);

                }
            }
        });

        $scope.showLeadTree = function () {
            $("#leadDiv").show();
        }
        $scope.hideLeadTree = function () {
            $("#leadDiv").hide();
        }
        $scope.showApplicationTree = function () {
            $("#applicationDiv").show();
        }
        $scope.hideApplicationTree = function () {
            $("#applicationDiv").hide();
        }
        $scope.showLocationTree = function () {
            $("#locationDiv").show();
        }
        $scope.hideLocationTree = function () {
            $("#locationDiv").hide();
        }

        $scope.cancel = function () {
            $scope.$uibModalInstance.close('cancel');
        }

        $(document).click(function (e) {
            //  console.log(e);
            if (!$(e.target).closest(".treeParent").length) {
                $("#locationDiv").hide();
            }

            if (!$(e.target).closest(".treeParent2").length) {
                $("#leadDiv").hide();
            }

            if (!$(e.target).closest(".treeParent3").length) {
                $("#applicationDiv").hide();
            }

        });

    }
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'itcquoteService', 'leadoriginService', 'industryService', 'constantService', '$filter', '$q', 'hotkeys', '$state', '$timeout', '$uibModal'];
    angular.module('itcquoteModule')
            .controller('ItcquoteController', controller);
}());/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

(function () {
    var controller = function ($scope, $rootScope, coreService, itcquoteService, constantService, quoteproductService, $filter, $q, $state, $timeout, $uibModal, $confirm) {
        $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
        $scope.$watch(function () {
            return coreService.getParentDB('itcquotes');
        }, function (newValue) {
            if (coreService.getCurrentState() != $rootScope.pState) {
                $rootScope.loadGrid = true;
                $rootScope.pState = 'itcquote.quoteitems';
            } else {
                $rootScope.loadGrid = false;
            }
            console.log('loadGrid: ' + $rootScope.loadGrid);
            $scope.db = newValue;
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "itcquote.quoteitems" && $rootScope.loadGrid) {
                //  console.log($rootScope.selectedQuote);
                $scope.db = newValue;
                $scope.db.selectedQuote = $rootScope.selectedQuote;
                if ((!angular.isDefined($scope.db.selectedQuote.company_id) || $scope.db.selectedQuote.company_id === null)) {

                } else {
                    if (!angular.isDefined($scope.db.selectedQuote.structure_width)) {
                        $scope.db.selectedQuote.structure_width = '';
                    }
                    $scope.db.selectedQuote.structure_length = $scope.db.selectedQuote.structure_length ? $scope.db.selectedQuote.structure_length : 0;
                    $scope.db.selectedQuote.title = $scope.db.selectedQuote.customer_name
                            + ' - ' + $scope.db.selectedQuote.application_name
                            + ' - ' + $scope.db.selectedQuote.structure_width + ' x ' + $scope.db.selectedQuote.structure_length
                            + ' - insulated';
                    var wind_measure = $scope.db.selectedQuote.wind_measure;
                    $scope.db.selectedQuote.wind_KPA = wind_measure === 'KPA' ? 1 : 0;
                    $scope.db.selectedQuote.wind_KPH = wind_measure === 'KPH' ? 1 : 0;
                    $scope.db.selectedQuote.wind_MPH = wind_measure === 'MPH' ? 1 : 0;
                    $scope.db.selectedQuote.is_draft = false;
                    $scope.promise = itcquoteService.writeQuote($scope.db.selectedQuote).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.insertDefaultQuoteItems();
                            //$scope.getQuoteItems();
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
                }
            }

        });
        $scope.item_type_no = 1;
        $rootScope.item_type_no = 1;
        $scope.insertDefaultQuoteItems = function (update) {
            var podtedData = {update: update, quote_id: $rootScope.selectedQuote.quote_id};
            $scope.promise = itcquoteService.insertDefaultQuoteItems(podtedData).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.getQuoteItems();
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.getQuoteItems = function (update) {
            var podtedData = {update: update, quote_id: $rootScope.selectedQuote.quote_id};
            $scope.promise = itcquoteService.getQuoteItems(podtedData).then(function (response) {

                $rootScope.optionItems = [];
                $rootScope.extraItems = [];
                $scope.optionItems = [];
                $scope.extraItems = [];
                if (!response.data.hasOwnProperty('file')) {
                    $scope.optionItems = response.data.options;
                    $scope.extraItems = response.data.extra;
                    $rootScope.optionItems = response.data.options;
                    $rootScope.extraItems = response.data.extra;
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.productDetails = function (item) {
//  if (item.has_special_name === '1' || item.has_special_name === 1) {
            console.log(item.product_id);
            if (angular.isDefined(item.product_id) && item.product_id != null && item.product_id != '') {
                $rootScope.loadGrid = false;
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/productdetails.html',
                    controller: 'quoteitemsController',
                    scope: $scope,
                    resolve: {product: function () {
                            $scope.selectProduct = {};
                            if (item.product_id !== '') {
                                itcquoteService.getProductDetails(item.product_id).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.selectProduct = response.data.product;
                                        $scope.properties = response.data.properties;
                                        $scope.prices = response.data.prices;
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                });
                            }
                        }
                    }
                });
            }
            else {
                $scope.message = constantService.getMessage('productdetails_valid');
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'quoteitemsController',
                    scope: $scope
                });
            }
        }

        $scope.getQuoteItemDetails = function (item) {
            $rootScope.loadGrid = false;
            $scope.quoteItemDetails = item;
            $scope.$uibModalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/itcquoteModule/views/details.html',
                controller: 'quoteitemsController',
                scope: $scope,
                resolve: {
                    item: function () {
                        $scope.selectQuoteItem = {};
                        $q.all([
                            itcquoteService.getQuoteItemById(item.quote_items_id),
                            itcquoteService.getQuoteItemTypes()
                        ]).then(function (queues) {
                            $scope.selectQuoteItem = queues[0].data;
                            $scope.itemOptions = queues[1].data;
                            console.log($scope.selectQuoteItem);
                            //if (item.has_special_name === 1 || item.has_special_name === '1') {
                            if (item.product_id === null) {
                                $scope.selectQuoteItem.product_no = 0;
                                $scope.selectQuoteItem.product_name = '';
                            }
                            var qty = parseInt($scope.selectQuoteItem.quantity);
                            var custom_manhours = $scope.selectQuoteItem.custom_manhours;
                            var custom_sale_price = parseFloat($scope.selectQuoteItem.custom_sale_price);
                            var custom_lease_termA_price = parseFloat($scope.selectQuoteItem.custom_lease_termA_price);
                            var custom_lease_termB_price = parseFloat($scope.selectQuoteItem.custom_lease_termB_price);
                            $scope.selectQuoteItem.extended_manhours = custom_manhours * qty;
                            $scope.selectQuoteItem.extended_sale_price = custom_sale_price * qty;
                            $scope.selectQuoteItem.extended_lease_termA_price = custom_lease_termA_price * qty;
                            $scope.selectQuoteItem.extended_lease_termB_price = custom_lease_termB_price * qty;
                            console.log('extended_manhours: ' + custom_manhours * qty);
                        }, function (errors) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: errors[0].data});
                            coreService.setAlert({type: 'exception', message: errors[1].data});
                        });
                    }
                }
            });
        }

        $scope.getProductsTree = function () {
            itcquoteService.getItemProducts($rootScope.selectedQuote.quote_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.products = response.data;
                            $scope.selectedNode = $scope.products[0];
                            $scope.currentProduct = $scope.products[0];
                            $scope.currentProduct.selected = true;
                            $scope.selected = true;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };
        $scope.showSelected = function (node, parentNode) {
            $scope.selected = true;
            $scope.currentProduct = node;
            $scope.currentProduct.selected = true;
            $scope.parentProduct = parentNode;
            itcquoteService.getProductDetails($scope.currentProduct.product_id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.selectProduct = response.data.product;
                    $scope.properties = response.data.properties;
                    $scope.prices = response.data.prices;
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };
        $scope.getItemOptions = function () {
            itcquoteService.getQuoteItemTypes()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.itemOptions = response.data;
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        }

        $scope.addCustomItem = function () {
            $rootScope.loadGrid = false;
            $q.all([
                coreService.getUuid(),
                itcquoteService.getQuoteItemTypes()
            ]).then(function (queues) {
                var uuid = queues[0].data.success;
                $scope.itemOptions = queues[1].data;
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/details.html',
                    controller: 'quoteitemsController',
                    scope: $scope,
                    resolve: {item: function () {
                            $scope.selectQuoteItem = {};
                            $scope.db.selectedQuote = $rootScope.selectedQuote;
                            if (!$scope.item_type_no) {
                                $scope.item_type_no = 1;
                            }
                            console.log('item_type_no: ' + $scope.item_type_no);
                            var item = {
                                quote_id: $scope.db.selectedQuote.quote_id
                                , quote_items_id: uuid
                                , item_type_id: $filter('filter')($scope.itemOptions, {
                                    item_type_no: $scope.item_type_no
                                })[0].item_type_id //$scope.itemOptions[0].item_type_id
                                , product_no: 0
                                , product_id: null
                                , product_name: ''
                                , quantity: 1
                                , item_name: 'New Item...'
                                , notes: ''
                                , original_sale_price: '0.00'
                                , custom_sale_price: '0.00'
                                , extended_sale_price: '0.00'
                                , original_lease_termA_price: '0.00'
                                , custom_lease_termA_price: '0.00'
                                , extended_lease_termA_price: '0.00'
                                , original_lease_termB_price: '0.00'
                                , custom_lease_termB_price: '0.00'
                                , extended_lease_termB_price: '0.00'
                                , original_manhours: 0, custom_manhours: 0
                                , extended_manhours: 0
                                , is_displayed_inreports: 0
                                , has_special_name: 1
                            };
                            $scope.selectQuoteItem = item;
                        }
                    }
                });
            }, function (errors) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: errors[0].data});
                coreService.setAlert({type: 'exception', message: errors[1].data});
            });
        }

        $scope.$watch('selectQuoteItem.custom_sale_price', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal) {
                var qty = parseInt($scope.selectQuoteItem.quantity);
                newVal = parseFloat(newVal);
                $scope.selectQuoteItem.extended_sale_price = newVal * qty;
            }
        });
        $scope.$watch('selectQuoteItem.custom_lease_termA_price', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal) {
                var qty = parseInt($scope.selectQuoteItem.quantity);
                newVal = parseFloat(newVal);
                $scope.selectQuoteItem.extended_lease_termA_price = newVal * qty;
            }
        });
        $scope.$watch('selectQuoteItem.custom_lease_termB_price', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal) {
                var qty = parseInt($scope.selectQuoteItem.quantity);
                newVal = parseFloat(newVal);
                $scope.selectQuoteItem.extended_lease_termB_price = newVal * qty;
            }
        });
        $scope.$watch('selectQuoteItem.custom_manhours', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal) {
                var qty = parseInt($scope.selectQuoteItem.quantity);
                newVal = parseInt(newVal);
                $scope.selectQuoteItem.extended_manhours = newVal * qty;
            }
        });
        $scope.$watch('selectQuoteItem.quantity', function (newVal, oldVal) {
            if (angular.isDefined(newVal) && newVal !== null && newVal !== oldVal) {
                var qty = parseInt(newVal);
                var custom_manhours = $scope.selectQuoteItem.custom_manhours;
                var custom_sale_price = parseFloat($scope.selectQuoteItem.custom_sale_price);
                var custom_lease_termA_price = parseFloat($scope.selectQuoteItem.custom_lease_termA_price);
                var custom_lease_termB_price = parseFloat($scope.selectQuoteItem.custom_lease_termB_price);
                $scope.selectQuoteItem.extended_manhours = custom_manhours * qty;
                $scope.selectQuoteItem.extended_sale_price = custom_sale_price * qty;
                $scope.selectQuoteItem.extended_lease_termA_price = custom_lease_termA_price * qty;
                $scope.selectQuoteItem.extended_lease_termB_price = custom_lease_termB_price * qty;
            }
        });
        $scope.saveQuoteItemDetails = function () {
            //console.log($scope.selectQuoteItem);
            itcquoteService.addQuoteItem($scope.selectQuoteItem)
                    .then(function (response) {
                        console.log(response.data.success);
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.item_name_valid = '';
                            if (response.data.success === 2) {
                                $scope.item_name_valid = constantService.getMessage('item_name_valid');
                            } else {
                                $scope.$uibModalInstance.close('success');
                                $rootScope.loadGrid = true;
                                $scope.optionItems.splice(0);
                                $scope.extraItems.splice(0);
                                var result = response.data;
                                result.forEach(function (element, index) {
                                    $scope.addItemToArray(element);
                                });
                            }
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        }

        $scope.addItemToArray = function (item) {
            var item_type_no = $filter('filter')($scope.itemOptions, {
                item_type_id: item.item_type_id
            })[0].item_type_no;
            console.log(item_type_no);
            if (item_type_no === 1) {
                $scope.optionItems.push(item);
            } else {
                $scope.extraItems.push(item);
            }
        }

        $scope.removeItemFromArray = function (item) {
            $scope.optionItems.forEach(function (element, index) {
                if (element.quote_items_id === item.quote_items_id) {
                    $scope.optionItems.splice(index, 1);
                }
            });
            $scope.extraItems.forEach(function (element, index) {
                if (element.quote_items_id === item.quote_items_id) {
                    $scope.extraItems.splice(index, 1);
                }
            });
        }

        $scope.deleteQuoteItem = function (item) {
            console.log(item.product_id);
            itcquoteService.deleteQuoteItems(item).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $rootScope.loadGrid = true;
                    $scope.getQuoteItems();
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.cancel = function () {
            $scope.$uibModalInstance.close('cancel');
        }

        $scope.addProduct = function () {
            $rootScope.loadGrid = false;
            $scope.quoteItemDetails = {};
            $scope.$uibModalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/itcquoteModule/views/addproduct.html',
                controller: 'quoteitemsController',
                scope: $scope,
                resolve: {
                    item: function () {
                        $scope.getItemOptions();
                        $scope.selectProduct = {};
                        $scope.properties = [];
                        $scope.prices = [];
                        $scope.getProductsTree();
                    }
                }
            });
            $scope.$uibModalInstance.result.then(function (response) {
                console.log(response);
                if (response === 'success') {
                    openPrductForm();
                }
            })
        }

        $scope.setquoteItemType = function (item_type_no) {
            console.log('item_type_no  1111111: ' + item_type_no);
            $scope.item_type_no = item_type_no;
            $rootScope.item_type_no = item_type_no;
        }

        $scope.addProductToQuoteItem = function () {
            if ($scope.selected) {
                if ($scope.currentProduct.children.length > 0) {
                    $scope.message = constantService.getMessage('selectparent_valid')
                    $scope.$uibModalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        templateUrl: 'app/itcquoteModule/views/alert.html',
                        controller: 'ItcquoteController',
                        scope: $scope
                    });
                } else {
                    console.log('product_type_no: ' + $scope.currentProduct.product_type_no);
                    //Corridors, Vestibules or Canopies (21,41,42)
                    if ($scope.currentProduct.product_type_no === 21 || $scope.currentProduct.product_type_no === 41 || $scope.currentProduct.product_type_no === 42) {
                        openRelatedProducts($scope.currentProduct.product_type_no);
                        $scope.$uibModalInstance.close('success');
                    } else {//other products
                        var item = {
                            quote_id: $scope.db.selectedQuote.quote_id
                            , item_type_no: $rootScope.item_type_no
                            , product_id: $scope.currentProduct.product_id
                            , product_type_id: $scope.currentProduct.product_type_id
                        };
                        $scope.selectQuoteItem = item;
                        itcquoteService.addProductItem($scope.selectQuoteItem)
                                .then(function (response) {
                                    console.log(response.data);
                                    if (!response.data.hasOwnProperty('file')) {
                                        $scope.$uibModalInstance.close('success');
                                        $scope.selectQuoteItem = response.data;
                                        $scope.addItemToArray($scope.selectQuoteItem);
                                        $rootScope.selectQuoteItem = $scope.selectQuoteItem;
                                        return $rootScope.selectQuoteItem;
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                });
                    }
                }
            }
        }

        var openPrductForm = function () {
            $rootScope.loadGrid = false;
            //console.log($rootScope.selectQuoteItem);
            $scope.selectQuoteItem = $rootScope.selectQuoteItem;
            $scope.$uibModalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/itcquoteModule/views/details.html',
                controller: 'quoteitemsController',
                scope: $scope,
                resolve: {
                    item: function () {
                        var qty = parseInt($scope.selectQuoteItem.quantity);
                        var custom_manhours = $scope.selectQuoteItem.custom_manhours;
                        var custom_sale_price = parseFloat($scope.selectQuoteItem.custom_sale_price);
                        var custom_lease_termA_price = parseFloat($scope.selectQuoteItem.custom_lease_termA_price);
                        var custom_lease_termB_price = parseFloat($scope.selectQuoteItem.custom_lease_termB_price);
                        $scope.selectQuoteItem.extended_manhours = custom_manhours * qty;
                        $scope.selectQuoteItem.extended_sale_price = custom_sale_price * qty;
                        $scope.selectQuoteItem.extended_lease_termA_price = custom_lease_termA_price * qty;
                        $scope.selectQuoteItem.extended_lease_termB_price = custom_lease_termB_price * qty;
                    }
                }
            });
        };
        /* related product part*/
        var openRelatedProducts = function (product_type_no) {
            $scope.$uibModalInstance2 = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/itcquoteModule/views/relatedproducts.html',
                controller: 'quoteitemsController',
                scope: $scope,
                resolve: {
                    item: function () {
                        $scope.getInteriorProductsTree();
                        $scope.getWindowsProductsTree();
                        $scope.getLogoProductsTree();
                        var relatedProduct = {
                            quote_id: $scope.db.selectedQuote.quote_id
                            , item_type_no: $rootScope.item_type_no
                            , item_type_id: $filter('filter')($scope.itemOptions, {
                                item_type_no: $rootScope.item_type_no
                            })[0].item_type_id
                            , product_id: $scope.currentProduct.product_id
                            , product_name: $scope.currentProduct.product_name
                            , product_type_id: $scope.currentProduct.product_type_id
                            , product_type_no: product_type_no
                            , quantity: 1
                            , interior_door_quantity: 1
                            , window_quantity: 1
                            , exterior_door_quantity: 1
                            , interior_door: null
                            , exterior_door: null
                            , window: null
                            , logo: null
                            , length: ''
                            , NoOfConnectedStructures: 1
                            , InteriorProductName: ''
                            , ExteriorProductName: ''
                            , WindowsProductName: ''
                            , LogoProductName: ''
                        };
                        $scope.selectQuoteItem = relatedProduct;
                    }
                }
            });
        };
        $scope.updateRelatedProduct = function () {
            if ($scope.selectQuoteItem.product_type_no === 21 && $scope.selectQuoteItem.length === "") {//corridors
                $scope.message = constantService.getMessage('empty_length')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'ItcquoteController',
                    scope: $scope
                });
            }
            else if ($scope.selectQuoteItem.interior_door === null && $scope.selectQuoteItem.exterior_door === null && $scope.selectQuoteItem.window === null && $scope.selectQuoteItem.logo === null) {
                $confirm({
                    text: constantService.getMessage('norelated_products'),
                    title: 'Confirmation',
                    cancel: 'No',
                    ok: "Yes, I'm sure"
                }).then(function () {
                    saveRelatedProduct();
                }, function () {
                });
            }
            else {
                saveRelatedProduct();
            }
        };
        var saveRelatedProduct = function () {
            // console.log($scope.selectQuoteItem);

            $scope.selectQuoteItem.quantity = $scope.selectQuoteItem.quantity === '' ? 1 : $scope.selectQuoteItem.quantity;
            if ($scope.selectQuoteItem.interior_door !== null) {
                $scope.selectQuoteItem.interior_door_quantity = $scope.selectQuoteItem.interior_door_quantity === '' ? 1 : $scope.selectQuoteItem.interior_door_quantity;
            }
            if ($scope.selectQuoteItem.exterior_door !== null) {
                $scope.selectQuoteItem.exterior_door_quantity = $scope.selectQuoteItem.exterior_door_quantity === '' ? 1 : $scope.selectQuoteItem.exterior_door_quantity;
            }
            if ($scope.selectQuoteItem.window !== null) {
                $scope.selectQuoteItem.window_quantity = $scope.selectQuoteItem.window_quantity === '' ? 1 : $scope.selectQuoteItem.window_quantity;
            }
            var Notes = '';
            if ($scope.selectQuoteItem.product_type_no == 21) {//corridors

                $scope.selectQuoteItem.product_name += " X " + $scope.selectQuoteItem.length + "' long";
                $scope.selectQuoteItem.HasSpecialName = true;
                Notes = "Corridor connecting: " + $scope.selectQuoteItem.NoOfConnectedStructures + " structure(s)\r\n";
                if ($scope.selectQuoteItem.InteriorProductName != "") {
                    Notes += $scope.selectQuoteItem.interior_door_quantity + " Interior Door: " + $scope.selectQuoteItem.InteriorProductName + "\r\n";
                }
                if ($scope.selectQuoteItem.ExteriorProductName != "") {
                    Notes += $scope.selectQuoteItem.exterior_door_quantity + " Exterior Door: " + $scope.selectQuoteItem.ExteriorProductName + "\r\n";
                }
                if ($scope.selectQuoteItem.WindowsProductName != "") {
                    Notes += $scope.selectQuoteItem.window_quantity + " Window: " + $scope.selectQuoteItem.WindowsProductName + "\r\n";
                }
                if ($scope.selectQuoteItem.LogoProductName != "") {
                    Notes += "Logo: " + $scope.selectQuoteItem.LogoProductName + "\r\n";
                }
            }
            else if ($scope.selectQuoteItem.product_type_no == 41) {//canopies
                Notes = "";
                if ($scope.selectQuoteItem.LogoProductName != "") {
                    Notes += "Logo: " + $scope.selectQuoteItem.LogoProductName + "\r\n";
                }
            }
            else if ($scope.selectQuoteItem.product_type_no == 42) {//vestibules
                Notes = "";
                if ($scope.selectQuoteItem.InteriorProductName != "") {
                    Notes += $scope.selectQuoteItem.interior_door_quantity + " Interior Door: " + $scope.selectQuoteItem.InteriorProductName + "\r\n";
                }
                if ($scope.selectQuoteItem.ExteriorProductName != "") {
                    Notes += $scope.selectQuoteItem.exterior_door_quantity + " Exterior Door: " + $scope.selectQuoteItem.ExteriorProductName + "\r\n";
                }
                if ($scope.selectQuoteItem.WindowsProductName != "") {
                    Notes += $scope.selectQuoteItem.window_quantity + " Window: " + $scope.selectQuoteItem.WindowsProductName + "\r\n";
                }
                if ($scope.selectQuoteItem.LogoProductName != "") {
                    Notes += "Logo: " + $scope.selectQuoteItem.LogoProductName + "\r\n";
                }
            }

            $scope.selectQuoteItem.Notes = Notes;
            itcquoteService.addRelatedProduct($scope.selectQuoteItem)
                    .then(function (response) {
                        console.log(response.data);
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.$uibModalInstance.close('success');
                            $scope.$uibModalInstance2.close('success');
                            $scope.selectQuoteItem = response.data;
                            $scope.addItemToArray($scope.selectQuoteItem);
                            $rootScope.selectQuoteItem = $scope.selectQuoteItem;
                            return $rootScope.selectQuoteItem;
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
            console.log($scope.selectQuoteItem);
        }

        $scope.getInteriorProductsTree = function () {
            var post = {quote_id: $scope.db.selectedQuote.quote_id, product_type_no: 5};
            itcquoteService.getRelateProducts(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.interiorproducts = response.data;
                    $scope.selectedInteriorNode = $scope.interiorproducts[0];
                    $scope.currentInteriorProduct = $scope.interiorproducts[0];
                    $scope.exteriorproducts = response.data;
                    $scope.currentExteriorProduct = $scope.exteriorproducts[0];
                    $scope.selectedExteriorNode = $scope.exteriorproducts[0];
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        };
        $scope.showSelectedInteriorProducts = function (node, parentNode) {
            if (node.children.length > 0) {
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'quoteitemsController',
                    scope: $scope
                });
            } else {
                $scope.currentInteriorProduct = node;
                $scope.selectQuoteItem.InteriorProductName = node.product_name;
                $scope.selectQuoteItem.interior_door = node.product_id;
                $("#interiorProductsDiv").hide();
            }
        };
        $scope.showSelectedExteriorProducts = function (node, parentNode) {
            if (node.children.length > 0) {
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'quoteitemsController',
                    scope: $scope
                });
            } else {
                $scope.currentExteriorProduct = node;
                $scope.selectQuoteItem.ExteriorProductName = node.product_name;
                $scope.selectQuoteItem.exterior_door = node.product_id;
                $("#ExteriorProductsDiv").hide();
            }
        };
        $scope.getWindowsProductsTree = function () {
            var post = {quote_id: $scope.db.selectedQuote.quote_id, product_type_no: 4};
            itcquoteService.getRelateProducts(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.WindowsProducts = response.data;
                    $scope.selectedWindowsNode = $scope.WindowsProducts[0];
                    $scope.currentWindowsProduct = $scope.WindowsProducts[0];
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        };
        $scope.getLogoProductsTree = function () {
            var post = {quote_id: $scope.db.selectedQuote.quote_id, product_type_no: 24};
            itcquoteService.getRelateProducts(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.LogoProducts = response.data;
                    $scope.selectedLogoNode = $scope.LogoProducts[0];
                    $scope.currentLogoProduct = $scope.LogoProducts[0];
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        };
        $scope.showSelectedWindowsProducts = function (node, parentNode) {
            if (node.children.length > 0) {
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'quoteitemsController',
                    scope: $scope
                });
            } else {
                $scope.currentWindowsProduct = node;
                $scope.selectQuoteItem.WindowsProductName = node.product_name;
                $scope.selectQuoteItem.window = node.product_id;
                $("#WindowsProductsDiv").hide();
            }
        };
        $scope.showSelectedLogoProducts = function (node, parentNode) {
            if (node.children.length > 0) {
                $scope.message = constantService.getMessage('selectparent_valid')
                $scope.$uibModalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/itcquoteModule/views/alert.html',
                    controller: 'quoteitemsController',
                    scope: $scope
                });
            } else {
                $scope.currentLogoProduct = node;
                $scope.selectQuoteItem.LogoProductName = node.product_name;
                $scope.selectQuoteItem.logo = node.product_id;
                $("#LogoProductsDiv").hide();
            }
        };
        $scope.showInteriorProductsTree = function () {
            $("#interiorProductsDiv").show();
        }
        $scope.hideInteriorProductsTree = function () {
            $("#interiorProductsDiv").hide();
        }
        $scope.showExteriorProductsTree = function () {
            $("#ExteriorProductsDiv").show();
        }
        $scope.hideExteriorProductsTree = function () {
            $("#ExteriorProductsDiv").hide();
        }
        $scope.showWindowsProductsTree = function () {
            $("#WindowsProductsDiv").show();
        }
        $scope.hideWindowsProductsTree = function () {
            $("#WindowsProductsDiv").hide();
        }
        $scope.showLogoProductsTree = function () {
            $("#LogoProductsDiv").show();
        }
        $scope.hideLogoProductsTree = function () {
            $("#LogoProductsDiv").hide();
        }
    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'itcquoteService', 'constantService', 'quoteproductService', '$filter', '$q', '$state', '$timeout', '$uibModal', '$confirm'];
    angular.module('itcquoteModule')
            .controller('quoteitemsController', controller);
}());
(function () {
    var controller = function ($scope, $rootScope, coreService, itcquoteService, constantService, $filter, $q, $state, $uibModal) {

        $scope.$watch(function () {
            return coreService.getParentDB('itcquotes');
        }, function (newValue) {
            $scope.db = newValue;
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "itcquote.summary") {
                $rootScope.pState = coreService.getCurrentState();
                $scope.promise = itcquoteService.getQuoteSummary($scope.db.selectedQuote.quote_id).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        console.log(response.data);
                        $scope.db.selectedQuote.summary = response.data;
                        $scope.filterFunc();
                    } else {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                });
            }

        });

        $scope.filterFunc = function () {
            $scope.db.selectedQuote.summary.StructureCustomLeaseTermAPrice = $filter('currency')($scope.db.selectedQuote.summary.StructureCustomLeaseTermAPrice, '$', 2);
            $scope.db.selectedQuote.summary.TotalLeaseTermAPrice = $filter('currency')($scope.db.selectedQuote.summary.TotalLeaseTermAPrice, '$', 2);
            $scope.db.selectedQuote.summary.MonthlyA = $filter('currency')($scope.db.selectedQuote.summary.MonthlyA, '$', 2);
            $scope.db.selectedQuote.summary.FinalTotalLeaseTermAPrice = $filter('currency')($scope.db.selectedQuote.summary.FinalTotalLeaseTermAPrice, '$', 2);

            $scope.db.selectedQuote.summary.StructureCustomLeaseTermBPrice = $filter('currency')($scope.db.selectedQuote.summary.StructureCustomLeaseTermBPrice, '$', 2);
            $scope.db.selectedQuote.summary.TotalLeaseTermBPrice = $filter('currency')($scope.db.selectedQuote.summary.TotalLeaseTermBPrice, '$', 2);
            $scope.db.selectedQuote.summary.MonthlyB = $filter('currency')($scope.db.selectedQuote.summary.MonthlyB, '$', 2);
            $scope.db.selectedQuote.summary.FinalTotalLeaseTermBPrice = $filter('currency')($scope.db.selectedQuote.summary.FinalTotalLeaseTermBPrice, '$', 2);

            $scope.db.selectedQuote.summary.StructureCustomSalePrice = $filter('currency')($scope.db.selectedQuote.summary.StructureCustomSalePrice, '$', 2);
            $scope.db.selectedQuote.summary.TotalSalePrice = $filter('currency')($scope.db.selectedQuote.summary.TotalSalePrice, '$', 2);
            $scope.db.selectedQuote.summary.WithOrder = $filter('currency')($scope.db.selectedQuote.summary.WithOrder, '$', 2);
            $scope.db.selectedQuote.summary.FinalTotalSalePrice = $filter('currency')($scope.db.selectedQuote.summary.FinalTotalSalePrice, '$', 2);

            $scope.db.selectedQuote.summary.FrieghtCost = $filter('currency')($scope.db.selectedQuote.summary.FrieghtCost, '$', 2);
            $scope.db.selectedQuote.summary.TechCost = $filter('currency')($scope.db.selectedQuote.summary.TechCost, '$', 2);
        }

        $scope.quoteLetter = function (reportTypeID) {
            var post = {quote_id: $scope.db.selectedQuote.quote_id, quote_no: $scope.db.selectedQuote.quote_no, reportTypeID: reportTypeID};

            $scope.promise = itcquoteService.quoteSummaryRepors(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    console.log(response.data);
                    var path = response.data;
                    console.log(coreService.getBaseUrl());
                    window.open(coreService.getBaseUrl() + 'reports/' + path);
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            });
        }
    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'itcquoteService', 'constantService', '$filter', '$q', '$state', '$uibModal'];
    angular.module('itcquoteModule')
            .controller('quotesummaryController', controller);
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSalesTerritories: function () {
                return $http.get(coreService.getApi() + 'salesterritories')
            },
            getNextQuoteNumber: function () {
                return $http.get(coreService.getApi() + 'nextquote')
            },
            getQuoteSalesReps: function () {
                return $http.get(coreService.getApi() + 'quotesalesreps')
            },
            getPricingPolicies: function () {
                return $http.get(coreService.getApi() + 'pricingpolicies')
            },
            getApplications: function () {
                return $http.get(coreService.getApi() + 'quoteapplications')
            },
            getQuoteStructures: function (searchquery) {
                return $http.post(coreService.getApi() + 'quotestructures', searchquery)
            },
            getQuoteMembranes: function () {
                return $http.get(coreService.getApi() + 'quotemembranes')
            },
            getQuoteInsulationPackages: function () {
                return $http.get(coreService.getApi() + 'quoteinsulationpackages')
            },
            getQuoteLineColors: function () {
                return $http.get(coreService.getApi() + 'quotelinecolors')
            },
            getQuoteAncorages: function () {
                return $http.get(coreService.getApi() + 'quoteancorages')
            },
            getQuoteCustomers: function () {
                return $http.get(coreService.getApi() + 'quotecustomers')
            },
            getQuoteScopes: function () {
                return $http.get(coreService.getApi() + 'quotescopes')
            },
            getQuoteLeadOrigins: function () {
                return $http.get(coreService.getApi() + 'quoteleadorigins')
            },
            getQuoteExposures: function () {
                return $http.get(coreService.getApi() + 'quoteexposures')
            },
            getProductProperties: function (productid) {
                return $http.get(coreService.getApi() + 'quoteproductproperties/' + productid)
            },
            getQuote: function (quote_id) {
                return $http.get(coreService.getApi() + 'getquote/' + quote_id);
            },
            getTerritoriesByPricingId: function (pricing_policy_id) {
                return $http.get(coreService.getApi() + 'getTerritoriesByPricingId/' + pricing_policy_id);
            },
            getlocationsList: function (pricing_policy_id) {
                return $http.get(coreService.getApi() + 'locationsList/' + pricing_policy_id);
            },
            getSubMembranes: function (property_value_no) {
                return $http.get(coreService.getApi() + 'quotesubmembranes/' + property_value_no);
            },
            getCustomerContact: function (customer_id) {
                return $http.get(coreService.getApi() + 'getquotecustomercontact/' + customer_id);
            },
            getContactDetails: function (contact_id) {
                return $http.get(coreService.getApi() + 'getcontactaddress/' + contact_id);
            },
            writeQuote: function (quote) {
                return $http.post(coreService.getApi() + 'updatequote', quote);
            },
            getQuoteItems: function (post) {
                return $http.post(coreService.getApi() + 'getquoteitems', post);
            },
            insertDefaultQuoteItems: function (post) {
                return $http.post(coreService.getApi() + 'insertDefaultQuoteItems', post);
            },
            getProductDetails: function (product_id) {
                return $http.get(coreService.getApi() + 'getproductdetails/' + product_id);
            },
            getQuoteItemTypes: function () {
                return $http.get(coreService.getApi() + 'quoteitemtype');
            },
            getQuoteItemById: function (quote_items_id) {
                return $http.get(coreService.getApi() + 'getquoteitembyid/' + quote_items_id);
            },
            addQuoteItem: function (post) {
                return $http.post(coreService.getApi() + 'addquoteitem', post);
            },
            deleteQuoteItems: function (post) {
                return $http.post(coreService.getApi() + 'deletequoteitem', post);
            },
            addProductItem: function (post) {
                return $http.post(coreService.getApi() + 'addproductitem', post);
            },
            getItemProducts: function (quote_id) {
                return $http.get(coreService.getApi() + 'getItemProducts/' + quote_id);
            },
            getQuoteSummary: function (quote_id) {
                return $http.get(coreService.getApi() + 'quotesummary/' + quote_id);
            },
            getRelateProducts: function (post) {
                return $http.post(coreService.getApi() + 'getRelateProducts', post);
            },
            addRelatedProduct: function (post) {
                return $http.post(coreService.getApi() + 'addrelatedproduct', post);
            },
            quoteSummaryRepors: function (post) {
                return $http.post(coreService.getApi() + 'quoteSummaryRepors' , post);
            }
        }
    }
    factory.$inject = ['$http', 'coreService']
    angular.module('itcquoteModule')
            .factory('itcquoteService', factory)
}());(function () {
    var controller = function ($scope, coreService, itcquotesService, constantService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'quote_no', display: 'Quote Id', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'code', display: 'Code', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'title', display: 'Title', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'contact_name', display: 'Customer name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'territory_name', display: 'Territory', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'prepared_by', display: 'Prepared by', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'completed_for', display: 'Completed for', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'create_date', display: 'Created', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'dates', filter_filters: [{id: 'All', name: 'All'}, {id: 'today', name: 'today'}, {id: '-7', name: 'last 7 days'}, {id: '-30', name: 'last 30 days'}, {id: '+7', name: 'next 7 days'}, {id: '+30', name: 'next 30 days'}], filter_id: 'id', filter_name: 'name', filter_default: 0},
            {name: 'modify_date', display: 'Modified', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'dates', filter_filters: [{id: 'All', name: 'All'}, {id: 'today', name: 'today'}, {id: '-7', name: 'last 7 days'}, {id: '-30', name: 'last 30 days'}, {id: '+7', name: 'next 7 days'}, {id: '+30', name: 'next 30 days'}], filter_id: 'id', filter_name: 'name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /*  var dates = [
         {id: 'All', name: 'All'},
         {id: 'today', name: 'today'},
         {id: '-7', name: 'last 7 days'},
         {id: '-30', name: 'last 30 days'},
         {id: '+7', name: 'next 7 days'},
         {id: '+30', name: 'next 30 days'}
         ]*/

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'itcquotes') {
                $scope.module = coreService.getCurrentState()
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        $scope.db.refresh = false;
                        coreService.resetAlert();
                        coreService.setAlert({type: 'wait', message: 'Refreshing Quotes .. Please wait'});
                        itcquotesService.getQuotes().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                $scope.db.items = response.data.items;
                                $scope.db.count = response.data.count;
                            }
                        }, function (response) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        });
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'});

                    $scope.db = {};
                    $scope.db.deleteBtn = 'itcquotes';
                    $scope.db.module = $scope.module;
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $scope.promise = $q.all([
                        itcquotesService.getQuotes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedQuote'
                                    $scope.db.selectedProfile.uisref = "itcquote.customerinfo";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    $scope.db.selectedProfile.filters.dates = [
                                        {id: 'All', name: 'All'},
                                        {id: 'today', name: 'today'},
                                        {id: '-7', name: 'last 7 days'},
                                        {id: '-30', name: 'last 30 days'},
                                        {id: '+7', name: 'next 7 days'},
                                        {id: '+30', name: 'next 30 days'}
                                    ];
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedQuote';
                            $scope.db.selectedProfile.uisref = "itcquote.customerinfo";
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters.dates = [
                                {id: 'All', name: 'All'},
                                {id: 'today', name: 'today'},
                                {id: '-7', name: 'last 7 days'},
                                {id: '-30', name: 'last 30 days'},
                                {id: '+7', name: 'next 7 days'},
                                {id: '+30', name: 'next 30 days'}
                            ];
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            })
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});

                    });
                }
            } else {
                return;
            }
        }, true);


        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            itcquotesService.deleteQuote($scope.db.selectedQuote.quote_id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.db.refresh = true;
                    $state.go('itcquotes');
                } else {
                    coreService.resetAlert();
                    var err = response.data.message;
                    if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                        coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                    } else {
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'itcquotesService', 'constantService', '$state', '$filter', '$q'];
    angular.module('itcquotesModule')
            .controller('ItcquotesController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getQuotes: function () {
                return $http.get(coreService.getApi() + 'quotes');
            },
            deleteQuote: function (quote_id) {
                return $http.get(coreService.getApi() + 'deletquote/' + quote_id);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('itcquotesModule')
            .factory('itcquotesService', factory)
}());;(function () {
    var controller = function ($scope, coreService, constantService, leadoriginService, $filter, $q, hotkeys, $state, $confirm) {

        var init = function () {
            $scope.leadoriginLabels = {};
            $scope.frmlabels = constantService.getleadoriginFormLabels();
            angular.forEach($scope.frmlabels, function (value, key) {
                $scope.leadoriginLabels[key] = value;
            });           
        };
        init();

        var decimal = {};
        decimal.round = function (number, precision) {
            var factor = Math.pow(10, precision);
            var tempNumber = number * factor;
            var roundedTempNumber = Math.round(tempNumber);
            return roundedTempNumber / factor;
        };

        $scope.treeOptions = {
            nodeChildren: "children",
            dirSelectable: true,
            injectClasses: {
                ul: "a1",
                li: "a2",
                liSelected: "a7",
                iExpanded: "a3",
                iCollapsed: "a4",
                iLeaf: "a5",
                label: "a6",
                labelSelected: "a8"
            }
        };
        $scope.selected = false;
        $scope.newSibiling = null;
        $scope.searchString = '';
        $scope.leadorigin_counter = 0;

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = newVal;
            if (coreService.getCurrentState() === "leadorigin") {
                $scope.module = coreService.getCurrentState();
                coreService.setDB($scope.db);
                $scope.getleadoriginsTree();
                $scope.number_valid = constantService.getMessage('number_valid');
            }
        }, true);

        $scope.getleadoriginsTree = function () {
            leadoriginService.getLeadOrigins()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.leadorigins = response.data;
                            $scope.selectedNode = $scope.leadorigins[0];
                            $scope.currentleadorigin = $scope.leadorigins[0];
                            $scope.filterparentleadorigins();
                            $scope.currentleadorigin.selected = true;
                            $scope.selected = true;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };

        $scope.showSelected = function (node, parentNode) {
            $scope.selected = true;
            $scope.currentleadorigin = node;
            $scope.currentleadorigin.selected = true;
            $scope.parentleadorigin = parentNode;
            $scope.lead_origin_name_valid = '';
            $scope.filterparentleadorigins();
        };

        $scope.filterparentleadorigins = function () {
            console.log('currentleadorigin.lead_origin_id: ' + $scope.currentleadorigin.lead_origin_id);
            var postedData = {
                lead_origin_id: $scope.currentleadorigin.lead_origin_id
            };
            leadoriginService.getAllLeadOriginsList(postedData)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.allleadorigins = response.data;
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.updateLeadOrigin = function () {
            var leadorigin = {
                lead_origin_id: $scope.currentleadorigin.lead_origin_id,
                parent_id: $scope.currentleadorigin.parent_id,
                sort_order: $scope.currentleadorigin.sort_order,
                lead_origin_name: $scope.currentleadorigin.lead_origin_name,
                abbreviation: $scope.currentleadorigin.abbreviation,
                description: $scope.currentleadorigin.description
            }
            leadoriginService.updateLeadOrigin(leadorigin)
                    .then(function (response) {
                        console.log(response.data.success);
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.lead_origin_name_valid = '';
                            if (response.data.success === 2 || response.data.success === '2') {
                                $scope.lead_origin_name_valid = constantService.getMessage('lead_origin_name_valid');
                            } else {
                                $scope.reloadleadoriginTree();
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('update_leadorigin')});

                            }
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.deleteLeadOrigin = function () {
            if (!$scope.currentleadorigin.children.length) {
                leadoriginService.deleteLeadOrigin($scope.currentleadorigin.lead_origin_id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                console.log(response.data.success);
                                if (response.data.success === 1) {
                                    $scope.reloadleadoriginTree();
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'info', message: constantService.getMessage('deleteRecord')});
                                }
                            } else {
                                coreService.resetAlert();
                                var err = response.data.message;
                                if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                    coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                                } else {
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', error: error.data});
                        });
            }
            else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: constantService.getMessage('deleteChild_valid')});
            }
        };

        $scope.addNewLeadOriginSibling = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newSibiling = true;
                    $scope.leadorigin_counter += 1;
                    var sibling = {
                        parent_id: $scope.currentleadorigin.parent_id,
                        lead_origin_id: uuid,
                        lead_origin_name: "New Sibling" + $scope.leadorigin_counter,
                        quote_letter_lead_origin_name: "New Sibling" + $scope.leadorigin_counter,
                        sort_order: 0,
                        abbreviation: '',
                        description: '',
                        children: [],
                        air_charge_rate: ''
                    };
                    if ($scope.parentleadorigin) {
                        $scope.parentleadorigin.children.push(sibling);
                        var index = $scope.parentleadorigin.children.length - 1;
                        $scope.selectedNode = $scope.parentleadorigin.children[index];
                    } else {
                        $scope.leadorigins.push(sibling);
                        $scope.selectedNode = $scope.leadorigins[$scope.leadorigins.length - 1];
                    }
                    $scope.currentleadorigin = sibling;
                    $scope.currentleadorigin.selected = true;
                    $scope.filterparentleadorigins();
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.addNewLeadOriginChild = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newChild = true;
                    $scope.leadorigin_counter += 1;

                    var child = {
                        parent_id: $scope.currentleadorigin.lead_origin_id,
                        lead_origin_id: uuid,
                        lead_origin_name: "New Child" + $scope.leadorigin_counter,
                        sort_order: 0,
                        abbreviation: '',
                        description: '',
                        children: [],
                        air_charge_rate: ''
                    };



                    if (!$scope.currentleadorigin.children) {
                        $scope.currentleadorigin.children = [];
                    }
                    $scope.currentleadorigin.children.push(child);

                    var index = $scope.currentleadorigin.children.length - 1;
                    $scope.selectedNode = $scope.currentleadorigin.children[index];
                    $scope.currentleadorigin = child;
                    $scope.currentleadorigin.selected = true;
                    $scope.filterparentleadorigins();

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.reloadleadoriginTree = function () {
            $scope.leadoriginSearch = "";
            $scope.selected = true;
            $scope.newSibiling = null;
            $state.transitionTo('leadorigin', null, {'reload': true, inherit: false, notify: true});
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'leadoriginService', '$filter', '$q', 'hotkeys', '$state', '$confirm'];
    angular.module('leadoriginModule')
            .controller('leadoriginController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
           
            getLeadOrigins: function () {
                return $http.get(coreService.getApi() + 'leadorigin');
            },
            getAllLeadOriginsList: function (post) {
                return $http.post(coreService.getApi() + 'allleadoriginList', post);
            },
            deleteLeadOrigin : function (lead_origin_id) {
                return $http.get(coreService.getApi() + "deleteleadorigin/" + lead_origin_id);
            },
            updateLeadOrigin: function (leadorigin) {
                return $http.post(coreService.getApi() + 'updateleadorigin', leadorigin);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('leadoriginModule')
            .factory('leadoriginService', factory);
}());;(function () {
    var controller = function ($scope, coreService, treeService, constantService, locationService, $filter, $q, hotkeys, $state, $confirm) {

        var init = function () {
            $scope.locationLabels = {};
            $scope.frmlabels = constantService.getlocationFormLabels();
            angular.forEach($scope.frmlabels, function (value, key) {
                $scope.locationLabels[key] = value;
            });
            $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
        };
        init();

        var decimal = {};
        decimal.round = function (number, precision) {
            var factor = Math.pow(10, precision);
            var tempNumber = number * factor;
            var roundedTempNumber = Math.round(tempNumber);
            return roundedTempNumber / factor;
        };

        $scope.treeOptions = {
            nodeChildren: "children",
            dirSelectable: true,
            injectClasses: {
                ul: "a1",
                li: "a2",
                liSelected: "a7",
                iExpanded: "a3",
                iCollapsed: "a4",
                iLeaf: "a5",
                label: "a6",
                labelSelected: "a8"
            }
        };
        $scope.selected = false;
        $scope.newSibiling = null;
        $scope.searchString = '';
        $scope.location_counter = 0;

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = newVal;
            if (coreService.getCurrentState() === "location") {
                $scope.module = coreService.getCurrentState();
                coreService.setDB($scope.db);
                $scope.getLocationsTree();
                $scope.number_valid = constantService.getMessage('number_valid');
                $q.all([
                    coreService.getUuid(),
                    locationService.getBulingCodeList(),
                    locationService.getLocationTypeList()
                ]).then(function (queues) {
                    $scope.isNew = true;
                    $scope.buildingcodes = queues[1].data;
                    $scope.locationtypes = queues[2].data;

                }, function (errors) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: errors[0].data});
                    coreService.setAlert({type: 'exception', message: errors[1].data});
                    coreService.setAlert({type: 'exception', message: errors[2].data});
                });
            }
        }, true);

        $scope.getLocationsTree = function () {
            locationService.getlocations()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.locations = response.data;
                            $scope.selectedNode = $scope.locations[0];
                            $scope.currentlocation = $scope.locations[0];
                            $scope.filterparentlocations();
                            $scope.currentlocation.selected = true;
                            $scope.selected = true;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };

        $scope.showSelected = function (node, parentNode) {
            $scope.selected = true;
            $scope.currentlocation = node;
            $scope.currentlocation.selected = true;
            $scope.parentLocation = parentNode;
            $scope.location_name_valid = '';
            $scope.filterparentlocations();
        };

        $scope.filterparentlocations = function () {
            console.log('currentlocation.location_id: ' + $scope.currentlocation.location_id);
            var postedData = {
                location_id: $scope.currentlocation.location_id
            };
            locationService.getAllLocationsList(postedData)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.alllocations = response.data;
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.updatelocation = function () {
            var location = {
                location_id: $scope.currentlocation.location_id,
                parent_id: $scope.currentlocation.parent_id,
                sort_order: $scope.currentlocation.sort_order,
                location_type_id: $scope.currentlocation.location_type_id,
                location_name: $scope.currentlocation.location_name,
                abbreviation: $scope.currentlocation.abbreviation,
                description: $scope.currentlocation.description,
                building_code_id: $scope.currentlocation.building_code_id,
                wind_speed: $scope.currentlocation.wind_speed,
                mile_age: $scope.currentlocation.mile_age,
                airfare_charge: decimal.round($scope.currentlocation.airfare_charge, 4),
                alt_airfare_charge: decimal.round($scope.currentlocation.alt_airfare_charge, 4),
                half_load_charge: decimal.round($scope.currentlocation.half_load_charge, 4),
                full_load_charge: decimal.round($scope.currentlocation.full_load_charge, 4),
                team_load_charge: decimal.round($scope.currentlocation.team_load_charge, 4),
                danger_pay: decimal.round($scope.currentlocation.danger_pay, 4),
                pricing_policy: $scope.currentlocation.pricing_policy
            }
            locationService.updatelocation(location)
                    .then(function (response) {
                        console.log(response.data.success);
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.location_name_valid = '';
                            if (response.data.success === 2 || response.data.success === '2') {
                                $scope.location_name_valid = constantService.getMessage('location_name_valid');
                            } else {
                                $scope.reloadLocationTree();
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('update_location')});

                            }
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.deletelocation = function () {
            if (!$scope.currentlocation.children.length) {
                locationService.deletelocation($scope.currentlocation.location_id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                console.log(response.data.success);
                                if (response.data.success === 1) {
                                    $scope.reloadLocationTree();
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'info', message: constantService.getMessage('deleteRecord')});
                                }
                            } else {
                                coreService.resetAlert();
                                var err = response.data.message;
                                if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                    coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                                } else {
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', error: error.data});
                        });
            }
            else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: constantService.getMessage('deleteChild_valid')});
            }
        };

        $scope.addNewLocationSibling = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newSibiling = true;
                    $scope.location_counter += 1;
                    var location_type_id = '';
                    if ($scope.currentlocation.parent_id) {
                        location_type_id = $scope.currentlocation.location_type_id;
                    }
                    else {
                        location_type_id = $scope.locationtypes[0].location_type_id;
                    }

                    var sibling = {
                        parent_id: $scope.currentlocation.parent_id,
                        location_id: uuid,
                        location_name: "New Sibling" + $scope.location_counter,
                        quote_letter_location_name: "New Sibling" + $scope.location_counter,
                        sort_order: 0,
                        abbreviation: '',
                        description: '',
                        children: [],
                        wind_speed: '',
                        mile_age: '',
                        airfare_charge: '',
                        alt_airfare_charge: '',
                        half_load_charge: '',
                        full_load_charge: '',
                        team_load_charge: '',
                        danger_pay: '',
                        location_type_id: location_type_id,
                        building_code_id: null,
                        pricing_policy: $scope.currentlocation.pricing_policy
                    };
                    if ($scope.parentLocation) {
                        $scope.parentLocation.children.push(sibling);
                        var index = $scope.parentLocation.children.length - 1;
                        $scope.selectedNode = $scope.parentLocation.children[index];
                    } else {
                        $scope.locations.push(sibling);
                        $scope.selectedNode = $scope.locations[$scope.locations.length - 1];
                    }
                    $scope.currentlocation = sibling;
                    $scope.currentlocation.selected = true;
                    $scope.filterparentlocations();
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.addNewLocationChild = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newChild = true;
                    $scope.location_counter += 1;
                    var location_type_id = '';
                    var building_code_id = '';
                    if ($scope.currentlocation.parent_id) {
                        location_type_id = $scope.currentlocation.location_type_id;
                        building_code_id = $scope.currentlocation.building_code_id;
                    }
                    else {
                        location_type_id = $scope.locationtypes[0].location_type_id;
                        building_code_id = $scope.buildingcodes[0].building_code_id;
                    }
                    var child = {
                        parent_id: $scope.currentlocation.location_id,
                        location_id: uuid,
                        location_name: "New Child" + $scope.location_counter,
                        sort_order: 0,
                        abbreviation: '',
                        description: '',
                        children: [],
                        wind_speed: '',
                        mile_age: '',
                        airfare_charge: '',
                        alt_airfare_charge: '',
                        half_load_charge: '',
                        full_load_charge: '',
                        team_load_charge: '',
                        danger_pay: '',
                        location_type_id: location_type_id,
                        building_code_id: building_code_id,
                        pricing_policy: $scope.currentlocation.pricing_policy
                    };



                    if (!$scope.currentlocation.children) {
                        $scope.currentlocation.children = [];
                    }
                    $scope.currentlocation.children.push(child);

                    var index = $scope.currentlocation.children.length - 1;
                    $scope.selectedNode = $scope.currentlocation.children[index];
                    $scope.currentlocation = child;
                    $scope.currentlocation.selected = true;
                    $scope.filterparentlocations();

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.reloadLocationTree = function () {
            $scope.locationSearch = "";
            $scope.selected = true;
            $scope.newSibiling = null;
            $state.transitionTo('location', null, {'reload': true, inherit: false, notify: true});
        };     
    };
    controller.$inject = ['$scope', 'coreService', 'treeService', 'constantService', 'locationService', '$filter', '$q', 'hotkeys', '$state', '$confirm'];
    angular.module('locationModule')
            .controller('locationController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
           
            getlocations: function () {
                return $http.get(coreService.getApi() + 'locations');
            },           
            getBulingCodeList: function () {
                return $http.get(coreService.getApi() + 'bulingcodeList');
            },
            getAllLocationsList: function (post) {
                return $http.post(coreService.getApi() + 'allLocationsList', post);
            },
            getLocationTypeList: function () {
                return $http.get(coreService.getApi() + "locationtypeList");
            },
            deletelocation: function (location_id) {
                return $http.get(coreService.getApi() + "deletelocation/" + location_id);
            },
            updatelocation: function (location) {
                return $http.post(coreService.getApi() + 'updatelocation', location);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('locationModule')
            .factory('locationService', factory);
}());;(function () {
    var controller = function ($scope, coreService, manualService, $filter, $uibModal) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "manual") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {
                        console.log($scope.db)
                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions

                        if ($scope.db.tree.selectedNode.name !== 'Root') {
                            if (!$scope.privileges.manreadonly) {
                                $scope.db.upload = {
                                    showUpload: true
                                    , acceptedFiles: ".pdf,.zip"
                                    , multiple: true
                                    , uploadMessage: "Drop PDF or ZIP files here to upload"
                                    , doneUpload: false
                                }
                            }
                            getFiles()
                        } else {
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }

                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    getTree()
                }

            }
        }, true)
        var setMenuOptions = function () {
            if ($scope.privileges.manreadonly === false) {
                if ($scope.db.tree.selectedNode.name === 'Root') {
                    $scope.menuOptions = [
                        ['New folder', function ($itemScope) {
                                newFolder();
                            }]
                    ]
                } else {
                    if ($scope.db.tree.parents.length < 4) {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.manuser === true || $scope.privileges.manadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                            ]

                        }
                    } else {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.manuser === true || $scope.privileges.manadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                            ]

                        }
                    }
                }
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/manualModule/views/newfolder.html'
                , controller: 'ManualFolderController'
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                    , op: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var deleteFolder = function () {
            if ($scope.db.tree.selectedNode.hasFiles) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error'
                    , message: 'This folder contains files, Please remove these files first'
                })
                return
            }
            if ($scope.db.tree.selectedNode.children.length) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder has children, Please remove the children first and try again'
                })
                return
            }
            manualService.deleteFolder($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    getTree()
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception'
                    , message: response.data
                })
            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/manualModule/views/newfolder.html'
                , controller: 'ManualFolderController'
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                    , op: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var getTree = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Getting manual tree .. Please wait'
            })
            manualService.getManRoot()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var treedata = response.data
                            coreService.resetAlert()
                            var selectedNode;
                            var parents = []
                            if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                                parents.push(treedata[0]);
                                angular.forEach($scope.db.tree.parents, function ($value, $key) {
                                    if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                        parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                                    if ($key === $scope.db.tree.parents.length - 1) {
                                        if (angular.isDefined(parents[parents.length - 1]))
                                            selectedNode = parents[parents.length - 1]; // in case of create new folder
                                        else
                                            selectedNode = parents[parents.length - 2]; // in case of delete folder
                                    }
                                })
                                console.log(parents)
                                console.log($scope.db.tree)
                            }
                            $scope.db.tree = {
                                treedata: treedata,
                                selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                                parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception'
                                , message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception'
                            , message: response.data
                        })
                    })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Fetching files .. Please wait'
            })
            manualService.getManFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception'
                    , message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                user: $scope.user
                , db: $scope.module
                , node: $scope.db.tree.selectedNode
                , filenames: $scope.filenames
                , parents: []
            }
            $scope.db.files.data = data
        }
    }

    controller.$inject = ['$scope', 'coreService', 'manualService', '$filter', '$uibModal']
    angular.module('manualModule')
            .controller('ManualController', controller)
}());(function () {
    var controller = function ($scope, node, op, coreService, $uibModalInstance, $filter, manualService) {
        $scope.node = node
        $scope.op = op
        $scope.foldername = ''
        console.log($scope.parent)
        $scope.addFolder = function () {
            if ($scope.foldername !== '') {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'folder name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
                var folder = {
                    name: $scope.foldername
                }
                if ($filter('lowerCaseCompare')($scope.node.children, folder, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A folder with the same name exists under the same folder'})
                    return
                }

                if (op === 'add') {
                    var post = {
                        parent: $scope.node.id,
                        name: $scope.foldername,
                        userid: coreService.getUser().user_id
                    }
                    manualService.addFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    var post = {
                        nodeid: $scope.node.id,
                        name: $scope.foldername
                    }
                    manualService.renameFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'op', 'coreService', '$uibModalInstance', '$filter', 'manualService']
    angular.module('manualModule')
            .controller('ManualFolderController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getManRoot: function () {
                return $http.get(coreService.getApi() + 'manroot');
            },
            getManFiles: function (node) {
                return $http.get(coreService.getApi() + 'manfiles/' + node.id);
            },
            addFolder: function(post){
                return $http.post(coreService.getApi()+'manfolder',post)
            },
            deleteFolder: function(folderid){
                return $http.delete(coreService.getApi()+'manfolder/'+folderid)
            },
            renameFolder: function(post){
                return $http.put(coreService.getApi()+'manfolder',post)
            }
        }
    }
    factory.$inject = ['$http', 'coreService']
    angular.module('manualModule')
            .factory('manualService', factory)
}());(function () {
    var controller = function ($scope, coreService, manufacturersrepService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'first_name', display: 'First name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'last_name', display: 'Last name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'company_name', display: 'Company name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'territory_name', display: 'Territory', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'reptype_name', display: 'Rep type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'reptypes', filter_id: 'reptype_id', filter_name: 'reptype_name', filter_default: 0},
            {name: 'actiontype_name', display: 'Last action', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'actiontypes', filter_id: 'actiontype_id', filter_name: 'actiontype_name', filter_default: 0},
            {name: 'action_date', display: 'Action date', type: 'date', sort: 0, direction: 0, filter_isfilter: 0, filter_type: '', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'action_expirydate', display: 'Expiry date', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'expirydates', filter_filters: [{id: 'All', name: 'All'}, {id: 'today', name: 'today'}, {id: '-7', name: 'last 7 days'}, {id: '-30', name: 'last 30 days'}, {id: '+7', name: 'next 7 days'}, {id: '+30', name: 'next 30 days'}], filter_id: 'id', filter_name: 'name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        var expirydates = [
            {id: 'All', name: 'All'},
            {id: 'today', name: 'today'},
            {id: '-7', name: 'last 7 days'},
            {id: '-30', name: 'last 30 days'},
            {id: '+7', name: 'next 7 days'},
            {id: '+30', name: 'next 30 days'}
        ]


        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'manufacturersrep') {
                $scope.module = coreService.getCurrentState()
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        $scope.db.refresh = false
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing Manufacturers reps .. Please wait'})
                        manufacturersrepService.getManufacturersReps().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                $scope.db.items = response.data.items
                                $scope.db.count = response.data.count
                                $scope.db.currentPage = 1
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'})

                    $scope.db = {}
                    $scope.db.module = $scope.module

                    $scope.db.profile = {}
                    $q.all([
                        manufacturersrepService.getActionTypes(),
                        manufacturersrepService.getRepTypes(),
                        manufacturersrepService.getManufacturersReps(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[3].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedRep'
                                    $scope.db.selectedProfile.uisref = "manufacturersrepview.manufacturersrepmain"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.actiontypes = queues[0].data
                                    $scope.db.selectedProfile.filters.actiontypes.unshift({actiontype_name: 'All'});
                                    $scope.db.selectedProfile.filters.reptypes = queues[1].data
                                    $scope.db.selectedProfile.filters.reptypes.unshift({reptype_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    $scope.db.add = true
                                    console.log($scope.db.selectedProfile)
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.items = queues[2].data.items
                                    $scope.db.count = queues[2].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }else{
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedRep'
                                    $scope.db.selectedProfile.uisref = "manufacturersrepview.manufacturersrepmain"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.actiontypes = queues[0].data
                                    $scope.db.selectedProfile.filters.actiontypes.unshift({actiontype_name: 'All'});
                                    $scope.db.selectedProfile.filters.reptypes = queues[1].data
                                    $scope.db.selectedProfile.filters.reptypes.unshift({reptype_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    console.log($scope.db.selectedProfile)
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.add = true
                                    $scope.db.items = queues[2].data.items
                                    $scope.db.count = queues[2].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                        coreService.setAlert({type: 'exception', message: errors[2].data})
                    })
                }
            } else {
                return
            }
        }, true)
    }
    controller.$inject = ['$scope', 'coreService', 'manufacturersrepService', '$state', '$filter', '$q']
    angular.module('manufacturersrepModule')
            .controller('ManufacturersrepController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getManufacturersReps: function(){
                return $http.get(coreService.getApi()+'manufacturersreps');
            },
            getActionTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepactiontypes')
            },
            getRepTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepreptypes')
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('manufacturersrepModule')
            .factory('manufacturersrepService', factory)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getRep: function(repid){
                return $http.get(coreService.getApi()+'manufacturersrep/'+repid)
            },
            getActionTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepactiontypes')
            },
            getAddressTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepaddresstypes')
            },
            getEmailTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepemailtypes')
            },
            getPhoneTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepphonetypes')
            },
            getRepTypes: function(){
                return $http.get(coreService.getApi()+'manufacturersrepreptypes')
            },
            getTerritories: function(){
                return $http.get(coreService.getApi()+'manufacturersrepterritories')
            },
            getCountries: function(){
                return $http.get(coreService.getApi()+'manufacturersrepcountries')
            },
            getStates: function(countryid){
                return $http.get(coreService.getApi()+'manufacturersrepstates/'+countryid)
            },
            getCities: function(stateid){
                return $http.get(coreService.getApi()+'manufacturersrepcities/'+stateid)
            },
            saveManufacturersRep: function(rep){
                return $http.put(coreService.getApi()+'savemanufacturersrep',rep)
            },
            addCity: function(city){
                return $http.post(coreService.getApi()+'addcity',city)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('manufacturersrepviewModule')
            .factory('manufacturersrepviewService', factory)
}());(function () {
    var controller = function ($scope, coreService, $state) {
        $scope.version = coreService.getVersion();
        $scope.sliding = function () {
            $(".submenuslide").slideToggle();
        }

        $scope.slidingSub = function () {
            $(".slidingSub").slideToggle();
            $(".slidingSub2").hide();
            $(".slidingSub3").hide();
        }

        $scope.hidePrent = function () {
            $(".submenuslide").hide();
        }

        $scope.slidingSub2 = function () {
            $(".slidingSub2").slideToggle();
            $(".slidingSub").hide();
            $(".slidingSub3").hide();
        }

        $scope.hidePrent2 = function () {
            $(".submenuslide2").hide();
        }

        $scope.slidingSub3 = function () {
            $(".slidingSub3").slideToggle();
            $(".slidingSub").hide();
            $(".slidingSub2").hide();
        }

        $scope.hidePrent3 = function () {
            $(".submenuslide3").hide();
        }

        $scope.$watch(function () {
            return coreService.getStates()
        }, function (newValue) {
            var user = coreService.getUser(); // this check if user doesn't have any groups who can access portal modules so he logs to dashboard only.
            if (newValue.length || user) {
                $scope.states = newValue
                $scope.hasPublications = false;
                $scope.privileges = coreService.getPrivileges()
                angular.forEach($scope.states, function (state) {
                    if (state.publication === true) {
                        $scope.hasPublications = true
                    }
                })
                $scope.user = coreService.getUser()
                $scope.groups = $scope.user.groups

                $scope.loggedin = true
                $state.go('dashboard')
            } else {
                $scope.states = []
                $scope.user = null
                $scope.loggedin = false
                $state.go('auth')
            }
        })
        $scope.logOut = function () {
            coreService.clearAll()
        }
        $scope.usergroupspopover = {
            templateUrl: 'app/navModule/views/usergroups.html',
            title: 'Your groups',
            placement: 'bottom-left'
        }

        /*Menu Collapsed*/
        $(document).ready(function () {

            $(".navbar-toggle").on("click", function () {

                $(".navbar-collapse").toggleClass("in");
                console.log("addClass");
            });

        });
        $scope.removing = function () {

            $(".navbar-collapse").removeClass("in");



        };
        $("ul.dropDpown").slideUp();
        $scope.QuoteAdmin = function () {

            $("ul.dropDpown").stop().slideToggle();
            return false;

        }

        //$scope.hideMenu = function (){

        //  $("ul.dropDpown").stop().slideUp();
        //     return false;
        // }


        $(".head-menu").on("click", function () {

            $(".submenu").toggleClass("show");

        });





    }
    controller.$inject = ['$scope', 'coreService', '$state']
    angular.module('navModule')
            .controller('NavController', controller)
}());(function () {
    var controller = function ($scope, coreService, manufacturersrepviewService, $q, $filter, Upload, $state) {
        $scope.isNew = false
        $scope.fetched = false;
        $scope.tabData = [
            {
                heading: "Main",
                route: "manufacturersrepview.manufacturersrepmain"
            },
            {
                heading: "Phones",
                route: "manufacturersrepview.manufacturersrepphone"
            },
            {
                heading: "Email Addresses",
                route: "manufacturersrepview.manufacturersrepemail"
            },
            {
                heading: "Postal Addresses",
                route: "manufacturersrepview.manufacturersrepaddress"
            },
            {
                heading: "Notes",
                route: "manufacturersrepview.manufacturersrepnote"
            },
            {
                heading: "Actions",
                route: "manufacturersrepview.manufacturersrepaction"
            }
        ]
        $scope.$watch(function () {
            return coreService.getParentDB('manufacturersrep')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "manufacturersrepview.manufacturersrepmain") {
                $scope.db = newVal
                if ($scope.db.hasOwnProperty('selectedRep') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Fetching Manufacturers Rep .. Please wait'})
                    $q.all([
                        manufacturersrepviewService.getActionTypes(),
                        manufacturersrepviewService.getAddressTypes(),
                        manufacturersrepviewService.getEmailTypes(),
                        manufacturersrepviewService.getPhoneTypes(),
                        manufacturersrepviewService.getRepTypes(),
                        manufacturersrepviewService.getTerritories(),
                        manufacturersrepviewService.getCountries()
                    ]).then(function (queues) {
                        $scope.actiontypes = queues[0].data
                        $scope.addresstypes = queues[1].data
                        $scope.emailtypes = queues[2].data
                        $scope.phonetypes = queues[3].data
                        $scope.reptypes = queues[4].data
                        $scope.territories = queues[5].data
                        $scope.countries = queues[6].data
                        if ($scope.db.selectedRep !== null) {
                            manufacturersrepviewService.getRep($scope.db.selectedRep.manufacturersrep_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {

                                    $scope.db.selectedRep = response.data
                                    $scope.db.selectedRep.actionsdeleted = []
                                    $scope.db.selectedRep.emailsdeleted = []
                                    $scope.db.selectedRep.phonesdeleted = []
                                    $scope.db.selectedRep.addressesdeleted = []
                                    $scope.db.selectedRep.attachmentsdeleted = []
                                    $scope.db.selectedRep.notesdeleted = []
                                    angular.forEach($scope.db.selectedRep.actions, function (action) {
                                        action.actiontypes = []
                                        angular.copy($scope.actiontypes, action.actiontypes)
                                        action.action_date = moment(action.action_date, 'YYYY-MM-DD HH:mm:ss').toDate();
                                        action.action_expirydate = moment(action.action_expirydate, 'YYYY-MM-DD HH:mm:ss').toDate();

                                    })
                                    angular.forEach($scope.db.selectedRep.notes, function (note) {
                                        note.note_date = moment(note.note_date, 'YYYY-MM-DD HH:mm:ss').toDate();
                                    })
                                    angular.forEach($scope.db.selectedRep.emails, function (email) {
                                        email.emailtypes = []
                                        angular.copy($scope.emailtypes, email.emailtypes)
                                    })
                                    angular.forEach($scope.db.selectedRep.phones, function (phone) {
                                        phone.phonetypes = []
                                        angular.copy($scope.phonetypes, phone.phonetypes)
                                    })
                                    angular.forEach($scope.db.selectedRep.addresses, function (address) {
                                        address.addresstypes = []
                                        angular.copy($scope.addresstypes, address.addresstypes)
                                        address.countries = []
                                        angular.copy($scope.countries, address.countries)
                                        manufacturersrepviewService.getStates(address.country.country_id).then(function (states) {
                                            if (!states.data.hasOwnProperty('file')) {
                                                address.states = states.data
                                                manufacturersrepviewService.getCities(address.state.state_id).then(function (cities) {
                                                    if (!cities.data.hasOwnProperty('file')) {
                                                        address.cities = cities.data
                                                        coreService.resetAlert()
                                                        console.log($scope.db)
                                                    } else {
                                                        coreService.resetAlert()
                                                        coreService.setAlert({type: 'exception', message: cities.data})
                                                    }
                                                }, function (response) {
                                                    coreService.resetAlert()
                                                    coreService.setAlert({type: 'exception', message: response.data})
                                                })
                                            } else {
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'exception', message: states.data})
                                            }
                                        }, function (response) {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: response.data})
                                        })
                                    })



                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        } else {
                            $scope.isNew = true
                            coreService.getUuid().then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    var uuid = response.data.success
                                    var rep = {
                                        actions: [],
                                        addresses: [],
                                        company_name: "",
                                        emails: [],
                                        first_name: "",
                                        last_name: "",
                                        notes: [],
                                        notesedit: false,
                                        phones: [],
                                        reptype_id: $scope.reptypes[0].reptype_id,
                                        manufacturersrep_id: uuid,
                                        territory_id: $scope.territories[0].territory_id,
                                        web_page: ""
                                    }
                                    
                                    $scope.db.selectedRep = rep
                                    $scope.db.selectedRep.actionsdeleted = []
                                    $scope.db.selectedRep.emailsdeleted = []
                                    $scope.db.selectedRep.phonesdeleted = []
                                    $scope.db.selectedRep.addressesdeleted = []
                                    $scope.db.selectedRep.attachmentsdeleted = []
                                    $scope.db.selectedRep.notesdeleted = []
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }
                    }, function (errors) {

                    })
                } else {
                    return
                }
            }
        }, true)

        $scope.addNewPhone = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var phone = {}
                    phone.phonetypes = []
                    angular.copy($scope.phonetypes, phone.phonetypes)
                    phone.is_main = 0
                    phone.phone_id = uuid
                    phone.phone_text = ""
                    phone.phonetype_id = phone.phonetypes[0].phonetype_id
                    phone.manufacturersrep_id = $scope.db.selectedRep.manufacturersrep_id
                    phone.edit = true
                    $scope.db.selectedRep.phones.push(phone)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewEmail = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var email = {}
                    email.emailtypes = []
                    angular.copy($scope.emailtypes, email.emailtypes)
                    email.email_id = uuid
                    email.email_text = ""
                    email.emailtype_id = email.emailtypes[0].emailtype_id
                    email.is_main = 0
                    email.manufacturersrep_id = $scope.db.selectedRep.manufacturersrep_id
                    email.edit = true
                    $scope.db.selectedRep.emails.push(email)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewAddress = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var address = {
                        manufacturersrep_id: $scope.db.selectedRep.manufacturersrep_id,
                        address_id: uuid,
                        address_text: "",
                        postal_code: "",
                        is_main: 0
                    }
                    address.addresstypes = []
                    angular.copy($scope.addresstypes, address.addresstypes)
                    address.addresstype_id = address.addresstypes[0].addresstype_id
                    if ($scope.db.selectedRep.addresses.length) {
                        var prevAddress = $scope.db.selectedRep.addresses[$scope.db.selectedRep.addresses.length - 1]
                        address.cities = []
                        angular.copy(prevAddress.cities, address.cities)
                        address.city = {}
                        angular.copy(prevAddress.city, address.city)
                        address.states = []
                        angular.copy(prevAddress.states, address.states)
                        address.state = {}
                        angular.copy(prevAddress.state, address.state)
                        address.countries = []
                        angular.copy(prevAddress.countries, address.countries)
                        address.country = {}
                        angular.copy(prevAddress.country, address.country)
                        address.edit = true
                        console.log(address.cities)
                        $scope.db.selectedRep.addresses.push(address)

                    } else {
                        var address = {
                            manufacturersrep_id: $scope.db.selectedRep.manufacturersrep_id,
                            address_id: uuid,
                            address_text: "",
                            postal_code: "",
                            is_main: 0
                        }
                        address.addresstypes = []
                        angular.copy($scope.addresstypes, address.addresstypes)
                        address.addresstype_id = address.addresstypes[0].addresstype_id
                        address.countries = []
                        angular.copy($scope.countries, address.countries)
                        address.country = {}
                        angular.copy($filter('filter')(address.countries, {country_code: 'CAN'})[0], address.country)
                        //address.country = $filter('filter')(address.countries,{country_code: 'CAD'})[0];
                        manufacturersrepviewService.getStates(address.country.country_id).then(function (states) {
                            if (!states.data.hasOwnProperty('file')) {
                                address.states = states.data
                                address.state = address.states[0]
                                manufacturersrepviewService.getCities(address.state.state_id).then(function (cities) {
                                    if (!cities.data.hasOwnProperty('file')) {
                                        address.cities = cities.data
                                        address.city = address.cities[0]
                                        address.edit = true
                                        $scope.db.selectedRep.addresses.push(address)
                                        coreService.resetAlert()
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: cities.data})
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                })
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: states.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewAction = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var action = {
                        attachments: []
                    }
                    action.actiontypes = []
                    angular.copy($scope.actiontypes, action.actiontypes)
                    action.action_date = new Date()
                    action.action_expirydate = null
                    action.action_id = uuid
                    action.actiontype_id = action.actiontypes[0].actiontype_id
                    action.manufacturersrep_id = $scope.db.selectedRep.manufacturersrep_id
                    action.edit = true
                    $scope.db.selectedRep.actions.splice(0, 0, action)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewNote = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var note = {
                        manufacturersrep_id: $scope.db.selectedRep.manufacturersrep_id,
                        note_text: "",
                        note_date: new Date(),
                        note_id: uuid,
                        edit: true
                    }
                    $scope.db.selectedRep.notes.splice(0, 0, note)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.checkCity = function (address) {
           if (address.edit) {
                console.log(address)
                if (address.city.city_id === 'NOID') {
                    coreService.addCity(address.city).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            address.city.city_id = response.data.reason
                            angular.forEach($scope.db.selectedRep.addresses, function (add) {
                                if (add.state.state_id === address.city.state_id)
                                    add.cities.push(address.city)
                            })
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.refreshCities = function ($select, address) {
            var search = $select.search
            var list = []
            angular.copy($select.items, list)
            var FLAG = 'NOID'
            var cities = []
            angular.copy(address.cities, cities)

            /*
             list = list.filter(function (item) {
             return item.city_id !== FLAG
             })
             */
            if (search.length) {
                var userInputItem = {
                    city_id: FLAG,
                    city_name: search,
                    state_id: address.state.state_id
                }
                for (var i = list.length - 1; i >= 0; i--) {
                    if (list[i].city_id === FLAG)
                        list.splice(i, 1)
                }

                list.push(userInputItem)
                console.log(list)
                address.city = userInputItem
            } else {
                $select.items = list
            }

        }

        $scope.selectedCountry = function (item, address) {
            manufacturersrepviewService.getStates(item.country_id).then(function (states) {
                if (!states.hasOwnProperty('file')) {
                    address.states = states.data
                    address.state = address.states[0]
                    manufacturersrepviewService.getCities(address.state.state_id).then(function (cities) {
                        if (!cities.hasOwnProperty('file')) {
                            address.cities = cities.data
                            address.city = address.cities[0]
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: cities.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: states.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.selectedState = function (item, address) {
            manufacturersrepviewService.getCities(item.state_id).then(function (cities) {
                if (!cities.hasOwnProperty('file')) {
                    address.cities = cities.data
                    address.city = address.cities[0]
                    angular.forEach($scope.db.selectedRep.addresses, function (add) {
                        if (!angular.equals(add, address)) {
                            if (add.state.state_id === item.state_id) {
                                var newItem = $filter('filter')(add.cities, {city_id: -1}, true)
                                if (angular.isDefined(newItem)) {
                                    address.cities.push(newItem[0])
                                }
                            }
                        }
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: cities.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.getFiles = function ($files, action) {
            console.log($files)
            var filenames = []
            var names = []

            for (var x = 0; x < $files.length; x++) {
                filenames.push({filename: $files[x].name, type: $files[x].type})
                names.push($files[x].name)
            }
            var data = {
                db: 'manufacturersrep',
                action: action,
                filenames: filenames
            }
            var url = "api/common/receiveupload.php"
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Uploading files ... Please wait'})
            var upload = Upload.upload({
                url: url,
                methos: "POST",
                fields: data,
                fileFormDataNames: names,
                file: $files
            })
            upload.then(function (response) {
                if (response.data.hasOwnProperty('success')) {
                    if (response.data.success == 1) {
                        for (var x = 0; x < response.data.reason.length; x++) {
                            action.attachments.push(response.data.reason[x])
                        }
                        coreService.resetAlert()
                        coreService.setAlert({type: 'info', message: 'Files uploaded successfule'})
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'error', message: response.data.reason})
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error', message: response.data})
            }, function (evt) {
                coreService.resetAlert()
                coreService.setAlert({type: 'info', message: "progress: " + parseInt(100.0 * evt.loaded / evt.total) + "%0"})
            })
        }
        $scope.saveManufacturersRep = function () {
            console.log($scope.db.selectedRep)
            angular.forEach($scope.db.selectedRep.actions, function (action) {
                delete action.actiontypes
                action.action_date = $filter('localToUtc')(action.action_date, 'datetime')
                action.action_expirydate = $filter('localToUtc')(action.action_expirydate, 'datetime')
            })
            angular.forEach($scope.db.selectedRep.actionsdeleted, function (action) {
                delete action.actiontypes
            })
            angular.forEach($scope.db.selectedRep.addresses, function (address) {
                delete address.addresstypes
                delete address.cities
                delete address.countries
                delete address.country
                delete address.states
                delete address.state
            })
            angular.forEach($scope.db.selectedRep.addressesdeleted, function (address) {
                delete address.addresstypes
                delete address.cities
                delete address.countries
                delete address.country
                delete address.states
                delete address.state
            })
            angular.forEach($scope.db.selectedRep.emails, function (email) {
                delete email.emailtypes
            })
            angular.forEach($scope.db.selectedRep.emailsdeleted, function (email) {
                delete email.emailtypes
            })
            angular.forEach($scope.db.selectedRep.notes, function (note) {
                note.note_date = $filter('localToUtc')(note.note_date, 'datetime')
            })
            angular.forEach($scope.db.selectedRep.phones, function (phone) {
                delete phone.phonetypes
            })
            angular.forEach($scope.db.selectedRep.phonesdeleted, function (phone) {
                delete phone.phonetypes
            })
            console.log($scope.db.selectedRep)
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Saving manufacturers rep .. Please wait'})
            manufacturersrepviewService.saveManufacturersRep($scope.db.selectedRep).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.refresh = true
                    $state.go('manufacturersrep')
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }
    }
    controller.$inject = ['$scope', 'coreService', 'manufacturersrepviewService', '$q', '$filter', 'Upload', '$state']
    angular.module('manufacturersrepviewModule')
            .controller('ManufacturersrepviewController', controller)
}());(function () {
    var controller = function ($scope, coreService, opsService, $filter, $uibModal) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            console.log(newVal);
            console.log(coreService.getCurrentState());
            if (coreService.getCurrentState() === "ops") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {

                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions
                        if (!$scope.privileges.opsreadonly) {
                            $scope.db.upload = {
                                showUpload: true,
                                acceptedFiles: ".pdf,.doc,.docx,.wpd,.xls,.xlsx,.dwfx,.qpw,.wb3,.jpg,.png,.mp4,.mov",
                                multiple: true,
                                uploadMessage: "Drop PDF, DOC, DOCX, WPD, XLS, XLSX, JPG, PNG, DWFX, QPW, WB3, MP4 or MOV files here to upload",
                                doneUpload: false
                            }
                        }
                        if ($scope.db.tree.selectedNode.name !== 'Root') {
                            getFiles()
                        } else {
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }

                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    getTree()
                }

            }
        }, true)
        var setMenuOptions = function () {
            if ($scope.privileges.opsreadonly === false) {
                if ($scope.db.tree.selectedNode.name === 'Root') {
                    $scope.menuOptions = [
                        ['New folder', function ($itemScope) {
                                newFolder();
                            }]
                    ]
                } else {
                    if ($scope.db.tree.parents.length < 4) {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.opsuser === true || $scope.privileges.opsadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                            ]

                        }
                    } else {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.opsuser === true || $scope.privileges.opsadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                            ]

                        }
                    }
                }
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/opsModule/views/newfolder.html',
                controller: 'OpsFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var deleteFolder = function () {
            if ($scope.db.tree.selectedNode.hasFiles) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder contains files, Please remove these files first'
                })
                return
            }
            if ($scope.db.tree.selectedNode.children.length) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder has children, Please remove the children first and try again'
                })
                return
            }
            opsService.deleteFolder($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    getTree()
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/opsModule/views/newfolder.html',
                controller: 'OpsFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var getTree = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Getting ops tree .. Please wait'
            })
            opsService.getOpsRoot()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var treedata = response.data
                            coreService.resetAlert()
                            var selectedNode;
                            var parents = []
                            if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                                parents.push(treedata[0]);
                                angular.forEach($scope.db.tree.parents, function ($value, $key) {
                                    if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                        parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                                    if ($key === $scope.db.tree.parents.length - 1) {
                                        if (angular.isDefined(parents[parents.length - 1]))
                                            selectedNode = parents[parents.length - 1]; // in case of create new folder
                                        else
                                            selectedNode = parents[parents.length - 2]; // in case of delete folder
                                    }
                                })
                                console.log(parents)
                                console.log($scope.db.tree)
                            }
                            $scope.db.tree = {
                                treedata: treedata,
                                selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                                parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Fetchinf files .. Please wait'
            })
            opsService.getOpsFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                user: $scope.user,
                db: $scope.module,
                node: $scope.db.tree.selectedNode,
                filenames: $scope.filenames,
                parents: []
            }
            $scope.db.files.data = data
        }
    }

    controller.$inject = ['$scope', 'coreService', 'opsService', '$filter', '$uibModal']
    angular.module('opsModule')
            .controller('OpsController', controller)
}());(function () {
    var controller = function ($scope, node, op, coreService, $uibModalInstance, $filter, opsService) {
        $scope.node = node
        $scope.op = op
        $scope.foldername = ''
        console.log($scope.parent)
        $scope.addFolder = function () {
            if ($scope.foldername !== '') {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'folder name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
                var folder = {
                    name: $scope.foldername
                }
                if ($filter('lowerCaseCompare')($scope.node.children, folder, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A folder with the same name exists under the same folder'})
                    return
                }

                if (op === 'add') {
                    var post = {
                        parent: $scope.node.id,
                        name: $scope.foldername,
                        userid: coreService.getUser().user_id
                    }
                    opsService.addFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    var post = {
                        nodeid: $scope.node.id,
                        name: $scope.foldername
                    }
                    opsService.renameFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'op', 'coreService', '$uibModalInstance', '$filter', 'opsService']
    angular.module('opsModule')
            .controller('OpsFolderController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getOpsRoot: function () {
                return $http.get(coreService.getApi() + 'opsroot');
            },
            getOpsFiles: function (node) {
                return $http.get(coreService.getApi() + 'opsfiles/' + node.id);
            },
            addFolder: function(post){
                return $http.post(coreService.getApi()+'opsfolder',post)
            },
            deleteFolder: function(folderid){
                return $http.delete(coreService.getApi()+'opsfolder/'+folderid)
            },
            renameFolder: function(post){
                return $http.put(coreService.getApi()+'opsfolder',post)
            }
        }
    }
    factory.$inject = ['$http', 'coreService']
    angular.module('opsModule')
            .factory('opsService', factory)
}());(function () {
    var controller = function ($scope, coreService,photocollectionService,$uibModalInstance,$filter) {
        $scope.photoadmin = coreService.getPrivileges().photoadmin;
        $scope.user = coreService.getUser();
        $scope.selectedRoot = null;
        $scope.selectedcat = null;
        $scope.selectedSubcat = null;
        photocollectionService.getCatTypes($scope.photoadmin ? 1 : 0)
                .then(function(response){
                    if(!response.data.hasOwnProperty('file')){
                        $scope.cattypes = response.data
                        var staging = $scope.cattypes.indexOf($filter('filter')($scope.cattypes,{name: 'Staging'})[0]);
                        $scope.cattypes.splice(staging,1);
                        if(angular.isDefined($scope.cattypes))
                        $scope.selectedRoot = $scope.cattypes[0].id
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
        },function(response){
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
        })
        $scope.$watch('selectedRoot',function(newVal){
            if(newVal !== null){
                photocollectionService.getCats($scope.selectedRoot,$scope.photoadmin ? 0 : $scope.user.userid)
                        .then(function(response){
                            if(!response.data.hasOwnProperty('file')){
                                $scope.cats = response.data
                        if(angular.isDefined($scope.cats))
                                $scope.selectedCat = $scope.cats[0].id
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                },function(response){
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        })
        
        $scope.$watch('selectedCat',function(newVal){
            if(newVal !== null){
                photocollectionService.getSubCats($scope.selectedCat)
                        .then(function(response){
                            if(!response.data.hasOwnProperty('file')){
                                $scope.subcats = response.data
                            if(angular.isDefined($scope.subcats) && $scope.subcats.length)
                                $scope.selectedSubcat = $scope.subcats[0].id
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                },function(response){
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        })
        $scope.save = function(){
            $uibModalInstance.close($scope.selectedSubcat)
        }
        
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }  
    controller.$inject = ['$scope', 'coreService','photocollectionService','$uibModalInstance','$filter']
    angular.module('photocollectionModule')
            .controller('PhotocollectionSelectsubcatController', controller)
}());(function () {
    var controller = function ($scope, coreService, photocollectionService, $uibModal) {
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (newVal !== null) {
                $scope.db = newVal
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
            }
        },true)
        $scope.clearCollection = function () {
            delete $scope.db.photocollection
        }
        $scope.removeFromCollection = function (item) {
            var index = $scope.db.photocollection.indexOf(item)
            $scope.db.photocollection.splice(index, 1)
        }

        $scope.accpetTo = function () {
            var data = {
                collection: $scope.db.photocollection
            }
            photocollectionService.acceptCollection(data)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'info',
                                message: 'collection has been copied successfuly'})
                            $scope.db.photocollection = [];
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
        }
        $scope.copyTo = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/photocollectionModule/views/selectsubcat.html',
                controller: 'PhotocollectionSelectsubcatController',
                size: null
            })
            uibModalInstance.result.then(function (result) {
                if (result === 'cancel')
                    return
                else {
                    $scope.tosubcat = result
                    copyPhotos();
                }
            }, function (err) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error',
                    message: 'Cannot get modal response'})
                return;
            })

        }

        var copyPhotos = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait',
                message: 'Copying collection .. please wait'})
            var data = {
                collection: $scope.db.photocollection,
                table: $scope.db.tree.parents[1].name === "Staging" ? 'staging' : 'pic_subcat',
                tosubcat: $scope.tosubcat,
                userid: $scope.user.user_id
            }
            photocollectionService.copyCollection(data)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'info',
                                message: 'collection has been copied successfuly'})

                            $scope.db.photocollection = [];
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception',
                                message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception',
                            message: response.data})
                    })
        }

        $scope.removeDB = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Deleting pics .. please wait'})
            var table;
            switch ($scope.module) {
                case "photolib":
                    table = $scope.db.tree.parents[1].name === "Staging" ? 'staging' : 'pic'
                    break;
                case "workorder":
                    table = "file"
                    break;
            }
            var post = {
                collection: $scope.db.photocollection,
                module: $scope.module,
                table: table
            }
            photocollectionService.deleteFromDB(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.photocollection = []
                    $scope.db.filesChanged = true;
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.emailCollection = function () {
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'Zipping collection.. please wait'});
            coreService.zipCollection($scope.db.photocollection, $scope.module)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            var zipfile = response.data.zipfile;
                            email(zipfile);
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception',
                                message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception',
                            message: response.data})
                    })
        }
        $scope.slideShow = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait',
                message: 'creating slide show .. please wait'})
            var post = {
                userid: coreService.getUser().user_id,
                collection: $scope.db.photocollection,
                db: $scope.module
            }
            photocollectionService.slideShow(post)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            var id = response.data.id;
                            var password = response.data.password;
                            var link = coreService.getBaseUrl();
                            var post = {
                                id: id,
                                password: password,
                                link: link
                            }
                            slideShow(post);
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
        }
        var email = function (zipfile) {
            var email = {
                subject: 'Sprung photo collection',
                body: '',
                attachments: [
                    {
                        db: 'photolib',
                        file: '/data/zip/' + zipfile,
                        name: zipfile
                    }
                ]
            }
            $scope.db.email = email
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/email.html',
                controller: 'EmailController',
                size: 'lg'
            })
            uibModal.result.then(function(response){
                if(response === "success"){
                    $scope.db.photocollection = []
                }
            })
        }
        var slideShow = function (slideshow) {
            var email = {
                subject: 'Sprung photo slide show service',
                body: '<p>Hello</p><p><b>Slide show link:</b> <a href="' + slideshow.link + '">' + slideshow.link + '</a></p><p><b>Slide show number:</b> ' + slideshow.id + '</p><p><b>Slide show password:</b> ' + slideshow.password + '</p>',
                attachments: []
            }
            $scope.db.email = email
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/email.html',
                controller: 'EmailController',
                size: 'lg'
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'photocollectionService', '$uibModal']
    angular.module('photocollectionModule')
            .controller('PhotocollectionController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            zipCollection: function(collection,module){
                var post = {
                    collection: collection,
                    user: coreService.getUser(),
                    db: module
                }
                return $http.post(coreService.getApi()+'zipcollection',post);
            },
            slideShow: function(post){
                return $http.post(coreService.getApi()+'photolibslideshow',post)
            },
            acceptCollection: function(data){
                return $http.put(coreService.getApi()+'photolibacceptcollection',data)
            },
            getCatTypes: function(admin){
                return $http.get(coreService.getApi()+'photolibcattypes/'+admin)
            },
            getCats: function(cattypeid,userid){
                return $http.get(coreService.getApi()+'photolibcats/'+cattypeid+'/'+userid)
            },
            getSubCats: function(catid){
                return $http.get(coreService.getApi()+'photolibsubcats/'+catid)
            },
            copyCollection: function(data){
                return $http.put(coreService.getApi()+'photolibcopycollection',data)
            },
            deleteFromDB: function(post){
                return $http.post(coreService.getApi()+'photolibremovedb',post)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('photocollectionModule')
            .factory('photocollectionService', factory)
}());(function () {
    var controller = function ($scope, node, mode, catuserid, $uibModalInstance, photolibService, coreService, $filter) {
        $scope.catname = mode === 'add' ? '' : node.name
        $scope.addNewCat = function () {
            if ($scope.catname !== '') {
                var item = {
                    name: $scope.catname
                }
                if ($scope.catname !== node.name && !$filter('lowerCaseCompare')(node.children, item, 'name')) {

                    if (mode === 'add') {
                        var post = {
                            cattypeid: node.id,
                            catname: $scope.catname,
                            catuserid: catuserid
                        }
                        photolibService.addNewCat(post)
                                .then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $uibModalInstance.close('success')
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data})
                                        $uibModalInstance.close('failed')
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                    $uibModalInstance.close('failed')
                                })
                    } else {
                        var post = {
                            catid: node.id,
                            catname: $scope.catname
                        }
                        photolibService.renameCat(post)
                                .then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $uibModalInstance.close('success')
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data})
                                        $uibModalInstance.close('failed')
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                    $uibModalInstance.close('failed')
                                })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A category with the same name exists under ' + node.name})
                }
            }
        }
        $scope.cancel = function () {
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'mode', 'catuserid', '$uibModalInstance', 'photolibService', 'coreService', '$filter']
    angular.module('photolibModule')
            .controller('PhotolibCatController', controller)
    }());(function () {
    var controller = function ($scope, coreService, photolibService, $uibModal, $interval, $filter) {
        $scope.selected = null

        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === 'photolib') {
                $scope.module = coreService.getCurrentState()
                $scope.photoadmin = coreService.getPrivileges().photoadmin
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if ((angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== null) && $scope.db.tree.selectedNode.name !== "Root" && $scope.db.tree.selectedNode !== $scope.selected) {
                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        console.log($scope.menuOptions);
                        $scope.db.tree.menuOptions = $scope.menuOptions
                        if ($scope.db.tree.selectedNode.type === "subcat") {
                            $scope.db.upload = {
                                showUpload: true,
                                acceptedFiles: ".jpg,.zip",
                                multiple: true,
                                uploadMessage: "Drop JPG or ZIP files here to upload",
                                doneUpload: false
                            }
                            console.log()
                            if ($scope.db.tree.parents[1].name === "Global" || $scope.db.tree.parents[1].name === "Private") {
                                getThumbs()
                            } else {
                                getStagingThumbs()
                            }

                        } else {
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload.showUpload = false
                        }

                    }
                    var stop;
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
//                        processFiles()
                        //console.log($scope.db.files)
                        if (angular.isDefined(stop))
                            return;

                        stop = $interval(processFiles, 100, 1);
                    }
                    ;
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        console.log($scope.db.tree.parents)
                        if ($scope.db.tree.parents[1].name === "Global" || $scope.db.tree.parents[1].name === "Private") {
                            getThumbs()
                        } else {
                            getStagingThumbs()
                        }
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        if ($scope.db.tree.parents[1].name === "Global" || $scope.db.tree.parents[1].name === "Private") {
                            getThumbs()
                        } else {
                            getStagingThumbs()
                        }
                    }
                    //coreService.setDB($scope.db)
                } else {
                    $scope.db = {}
                    getPhotolibTree()
                }
            }
        }, true)
        var getPhotolibTree = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Getting photolib tree .. Please wait'})
            photolibService.getPhotolibTree($scope.photoadmin ? 1 : 0, $scope.user.user_id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var treedata = response.data
                    coreService.resetAlert()
//                    var selected = null
//                    var parents = null
//                    if ($scope.db.hasOwnProperty('tree')) {
//                        selected = $scope.db.tree.selectedNode
//                        parents = $scope.db.tree.parents
//                    }
//                    $scope.db.tree = {
//                        treedata: response.data,
//                        selectedNode: selected === null ? selected : response.data[0],
//                        parents: parents === null ? parents : [response.data[0]]
//                    }
//                    coreService.setDB($scope.db)

                    var selectedNode;
                    var parents = []
                    if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                        parents.push(treedata[0]);
                        angular.forEach($scope.db.tree.parents, function ($value, $key) {
                            if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                            if ($key === $scope.db.tree.parents.length - 1) {
                                if (angular.isDefined(parents[parents.length - 1]))
                                    selectedNode = parents[parents.length - 1]; // in case of create new folder
                                else
                                    selectedNode = parents[parents.length - 2]; // in case of delete folder
                            }
                        })
                        console.log(parents)
                        console.log($scope.db.tree)
                    }
                    $scope.db.tree = {
                        treedata: treedata,
                        selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                        parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                    }
                    coreService.setDB($scope.db)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        var setMenuOptions = function () {
            console.log($scope.db.tree.selectedNode.type);
            $scope.menuOptions = []
            switch ($scope.db.tree.selectedNode.type) {
                case "cattype":
                    if (($scope.db.tree.selectedNode.name === "Global" && $scope.photoadmin) || $scope.db.tree.selectedNode.name === "Private") {
                        $scope.menuOptions = [
                            ['New Category', function ($itemScope) {
                                    newCategory();
                                }]
                        ]
                    }
                    break;
                case "cat":
                    if (($scope.db.tree.parents[1].name === "Global" && $scope.photoadmin) || $scope.db.tree.parents[1].name === "Private") {
                        $scope.menuOptions = [
                            ['New Subcategory', function ($itemScope) {
                                    newSubCategory();
                                }],
                            null,
                            ['Delete Category', function ($itemScope) {
                                    deleteCategory();
                                }],
                            ['Rename Category', function ($itemScope) {
                                    renameCategory();
                                }]
                        ]
                    }
                    break;
                case "subcat":
                    if (($scope.db.tree.parents[1].name === "Global" && $scope.photoadmin) || $scope.db.tree.parents[1].name === "Private") {
                        $scope.menuOptions = [
                            ['Delete Subcategory', function ($itemScope) {
                                    deleteSubCategory();
                                }],
                            ['Rename Subcategory', function ($itemScope) {
                                    renameSubCategory();
                                }]
                        ]
                    }
                    break;
                    /*case "user":
                     
                     break;*/
                default:
                    $scope.menuOptions = []
                    break;
                    console.log($scope.menuOptions);
            }
        }
        var getThumbs = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Getting photo thumbs'})
            photolibService.getThumbs($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.photolist = response.data
                    if (response.data.length)
                        $scope.db.tree.selectedNode.hasPhotos = true
                    else
                        $scope.db.tree.selectedNode.hasPhotos = false
                    $scope.db.filesChanged = false
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        var getStagingThumbs = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Getting photo thumbs'})
            photolibService.getStagingThumbs($scope.db.tree.parents[2].id, $scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.photolist = response.data
                    if (response.data.length)
                        $scope.db.tree.selectedNode.hasPhotos = true
                    else
                        $scope.db.tree.selectedNode.hasPhotos = false
                    $scope.db.filesChanged = false
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        var processFiles = function () {
            $scope.filenames = []
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/photolibModule/views/photonames.html',
                controller: 'PhotolibNamesController',
                size: null,
                resolve: {
                    files: function () {
                        return $scope.db.files.$files
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                $scope.db.upload.called = false;
                $scope.db.upload.uploadDone = false
                if (response !== 'cancel') {
                    var parents = []
                    angular.copy($scope.db.tree.parents, parents)
                    angular.forEach(parents, function (parent) {
                        delete parent.children
                    })
                    $scope.db.files.data = {
                        db: $scope.module,
                        filenames: response,
                        user: $scope.user,
                        node: $scope.db.tree.selectedNode,
                        parents: parents
                    }
                    console.log('sent one')
                    //$scope.db.files.data = data
                }
            }, function (err) {

            })
        }

        var newCategory = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/photolibModule/views/newcattemplate.html',
                controller: 'PhotolibCatController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    catuserid: function () {
                        return coreService.getUser().user_id
                    },
                    mode: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (result) {
                if (result === "success") {
                    getPhotolibTree()
                }
            }, function (err) {

            })
        }

        var newSubCategory = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/photolibModule/views/newsubcattemplate.html',
                controller: 'PhotolibSubcatController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    mode: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (result) {
                if (result === "success") {
                    getPhotolibTree()
                }
            }, function (err) {

            })
        }

        var deleteCategory = function () {
            if ($scope.db.tree.selectedNode.children.length > 0) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error',
                    message: 'The category has sub categories and cannot be deleted'})
                return;
            } else {
                photolibService.deleteCat($scope.db.tree.selectedNode.id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                getPhotolibTree()
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
            }
        }
        var deleteSubCategory = function () {
            if ($scope.db.tree.selectedNode.hasPhotos) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error',
                    message: 'The sub category has photos and cannot be deleted'})
                return;
            } else {
                photolibService.deleteSubCat($scope.db.tree.selectedNode.id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                getPhotolibTree()
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
            }
        }
        var renameCategory = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/photolibModule/views/newcattemplate.html',
                controller: 'PhotolibCatController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    catuserid: function () {
                        return coreService.getUser().user_id
                    },
                    mode: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (result) {
                if (result === "success") {
                    getPhotolibTree()
                }
            }, function (err) {

            })
        }
        var renameSubCategory = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/photolibModule/views/newsubcattemplate.html',
                controller: 'PhotolibSubcatController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    mode: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (result) {
                if (result === "success") {
                    getPhotolibTree()
                }
            }, function (err) {

            })
        }

    }
    controller.$inject = ['$scope', 'coreService', 'photolibService', '$uibModal', '$interval', '$filter']
    angular.module('photolibModule')
            .controller('PhotolibController', controller)
}());(function () {
    var controller = function ($scope, files, $uibModalInstance) {
        $scope.files = files
        $scope.filenames = []
        for(var x=0;x<$scope.files.length;x++){
            $scope.filenames.push({
                filename: $scope.files[x].name.split('.')[0]
            })
        }
        $scope.save = function(){
            $uibModalInstance.close($scope.filenames)
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }  
    controller.$inject = ['$scope', 'files', '$uibModalInstance']
    angular.module('photolibModule')
            .controller('PhotolibNamesController', controller)
}());(function () {
    var controller = function ($scope, node, mode, $uibModalInstance, coreService, photolibService, $filter) {
        $scope.subcatname = mode === 'add' ? '' : node.name
        $scope.addNewSubCat = function () {
            if ($scope.newsubcat !== '') {
                var item = {
                    name: $scope.subcatname
                }
                if ($scope.subcatname !== node.name && !$filter('lowerCaseCompare')(node.children, item, 'name')) {
                    if (mode === 'add') {
                        var post = {
                            catid: node.id,
                            subcatname: $scope.subcatname
                        }
                        photolibService.addNewSubCat(post)
                                .then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $uibModalInstance.close('success')
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data})
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                })
                    } else {
                        var post = {
                            subcatid: node.id,
                            subcatname: $scope.subcatname
                        }
                        photolibService.renameSubCat(post)
                                .then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        $uibModalInstance.close('success')
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data})
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A subcategory with the same name exists under ' + node.name})
                }

            }
        }
        $scope.cancel = function () {
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'mode', '$uibModalInstance', 'coreService', 'photolibService', '$filter']
    angular.module('photolibModule')
            .controller('PhotolibSubcatController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getPhotolibTree: function(admin,userid){
                return $http.get(coreService.getApi()+'photolibtree/'+admin+'/'+userid)
            },
            getThumbs: function (subcatid) {
                return $http.get(coreService.getApi() + 'photolibthumbs/' + subcatid)
            },
            getStagingThumbs: function (userid, subcatid) {
                return $http.get(coreService.getApi() + 'photolibstagingthumbs/' + userid + '/' + subcatid);
            },
            addNewCat: function(post){
                return $http.post(coreService.getApi()+'photolibnewcat',post)
            },
            addNewSubCat: function(post){
                return $http.post(coreService.getApi()+'photolibnewsubcat',post)
            },
            deleteCat: function(id){
                return $http.delete(coreService.getApi()+'photolibdeletecat/'+id)
            },
            deleteSubCat: function(id){
                return $http.delete(coreService.getApi()+'photolibdeletesubcat/'+id)
            },
            renameCat: function(post){
                return $http.put(coreService.getApi()+'photolibrenamecat',post)
            },
            renameSubCat: function(post){
                return $http.put(coreService.getApi()+'photolibrenamesubcat',post)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('photolibModule')
            .factory('photolibService', factory)
}());(function () {
    var controller = function ($scope, coreService, photolistService,$uibModal) {
        $scope.startsWith = function (actual, expected) {
            var lowerStr = (actual + "").toLowerCase();
            return lowerStr.indexOf(expected.toLowerCase()) === 0;
        }
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (newVal !== null) {
                $scope.db = newVal
                if (($scope.db !== null && angular.isDefined($scope.db)) && angular.isDefined($scope.db.photolist)) {
                    $scope.module = coreService.getCurrentState()
                    $scope.items = $scope.db.photolist
                }
            }
        }, true)
        $scope.addToCollection = function (item) {
            if (angular.isDefined($scope.db.photocollection)) {
                if ($scope.db.photocollection.indexOf(item) == -1) {
                    $scope.db.photocollection.push(item)
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error', message: 'This photo already in the collection'})
                }
            } else {
                $scope.db.photocollection = [
                    item
                ]
            }
        }
        $scope.openPhoto = function(picid){
            $uibModal.open({
                templateUrl: 'app/photolistModule/views/fullphoto.html',
                controller: 'PhotolistFullphotoController',
                size: 'lg',
                resolve: {
                    picid: function(){
                        return picid
                    },
                    module: function(){
                        return $scope.module
                    }
                }
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'photolistService','$uibModal']
    angular.module('photolistModule')
            .controller('PhotolistController', controller)
}());(function () {
    var controller = function ($scope,picid,module) {
        $scope.picid = picid
        $scope.module = module
        
    }  
    controller.$inject = ['$scope','picid','module']
    angular.module('photolistModule')
            .controller('PhotolistFullphotoController', controller)
}());(function () {
    var factory = function ($http, coreService,coreService) {
        return {
            
        }
    }  
    factory.$inject = ['$http', 'coreService','coreService']
    angular.module('photolistModule')
            .factory('photolistService', factory)
}());(function () {
    var controller = function ($scope, coreService, procService, $filter, $uibModal) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "proc") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {

                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions
                        if (!$scope.privileges.procreadonly) {
                            $scope.db.upload = {
                                showUpload: true,
                                acceptedFiles: ".pdf,.docx,.zip",
                                multiple: true,
                                uploadMessage: "Drop PDF, Word or ZIP files here to upload",
                                doneUpload: false
                            }
                        }
                        if ($scope.db.tree.selectedNode.name !== 'Root') {
                            getFiles()
                        } else {
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }

                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    getTree()
                }

            }
        }, true)
        var setMenuOptions = function () {
            if ($scope.privileges.procreadonly === false) {
                if ($scope.db.tree.selectedNode.name === 'Root') {
                    $scope.menuOptions = [
                        ['New folder', function ($itemScope) {
                                newFolder();
                            }]
                    ]
                } else {
                    if ($scope.db.tree.parents.length < 4) {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.procuser === true || $scope.privileges.procadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                            ]

                        }
                    } else {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.procuser === true || $scope.privileges.procadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                            ]

                        }
                    }
                }
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/procModule/views/newfolder.html',
                controller: 'ProcFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var deleteFolder = function () {
            if ($scope.db.tree.selectedNode.hasFiles) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder contains files, Please remove these files first'
                })
                return
            }
            if ($scope.db.tree.selectedNode.children.length) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder has children, Please remove the children first and try again'
                })
                return
            }
            procService.deleteFolder($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    getTree()
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/procModule/views/newfolder.html',
                controller: 'ProcFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var getTree = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Getting proc tree .. Please wait'
            })
            procService.getProcRoot()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var treedata = response.data
                            coreService.resetAlert()
                            var selectedNode;
                            var parents = []
                            if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                                parents.push(treedata[0]);
                                angular.forEach($scope.db.tree.parents, function ($value, $key) {
                                    if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                        parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                                    if ($key === $scope.db.tree.parents.length - 1) {
                                        if (angular.isDefined(parents[parents.length - 1]))
                                            selectedNode = parents[parents.length - 1]; // in case of create new folder
                                        else
                                            selectedNode = parents[parents.length - 2]; // in case of delete folder
                                    }
                                })
                                console.log(parents)
                                console.log($scope.db.tree)
                            }
                            $scope.db.tree = {
                                treedata: treedata,
                                selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                                parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Fetchinf files .. Please wait'
            })
            procService.getProcFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                user: $scope.user,
                db: $scope.module,
                node: $scope.db.tree.selectedNode,
                filenames: $scope.filenames,
                parents: []
            }
            $scope.db.files.data = data
        }
    }

    controller.$inject = ['$scope', 'coreService', 'procService', '$filter', '$uibModal']
    angular.module('procModule')
            .controller('ProcController', controller)
}());(function () {
    var controller = function ($scope, node, op, coreService, $uibModalInstance, $filter, procService) {
        $scope.node = node
        $scope.op = op
        $scope.foldername = ''
        console.log($scope.parent)
        $scope.addFolder = function () {
            if ($scope.foldername !== '') {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'folder name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
                var folder = {
                    name: $scope.foldername
                }
                if ($filter('lowerCaseCompare')($scope.node.children, folder, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A folder with the same name exists under the same folder'})
                    return
                }

                if (op === 'add') {
                    var post = {
                        parent: $scope.node.id,
                        name: $scope.foldername,
                        userid: coreService.getUser().user_id
                    }
                    procService.addFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    var post = {
                        nodeid: $scope.node.id,
                        name: $scope.foldername
                    }
                    procService.renameFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'op', 'coreService', '$uibModalInstance', '$filter', 'procService']
    angular.module('procModule')
            .controller('ProcFolderController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getProcRoot: function () {
                return $http.get(coreService.getApi() + 'procroot');
            },
            getProcFiles: function (node) {
                return $http.get(coreService.getApi() + 'procfiles/' + node.id);
            },
            addFolder: function(post){
                return $http.post(coreService.getApi()+'procfolder',post)
            },
            deleteFolder: function(folderid){
                return $http.delete(coreService.getApi()+'procfolder/'+folderid)
            },
            renameFolder: function(post){
                return $http.put(coreService.getApi()+'procfolder',post)
            }
        }
    }
    factory.$inject = ['$http', 'coreService']
    angular.module('procModule')
            .factory('procService', factory)
}());(function () {
    var controller = function ($scope, coreService, constantService, producttypeService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'product_type_no', display: 'Id', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'product_type_name', display: 'Product Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbProductType = coreService.getParentDB('producttype');
            if (coreService.getCurrentState() === 'producttype') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'producttype';
                    $scope.db.assignBtn = 'producttype';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        producttypeService.getProductType(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedProductType'
                                    $scope.db.selectedProfile.uisref = "addproducttype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedProductType'
                            $scope.db.selectedProfile.uisref = "addproducttype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbProductType.selectedProductType.product_type_id);
            producttypeService.deleteProductType($scope.dbProductType.selectedProductType.product_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            if (response.data.success === '2'  || response.data.success === 2) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            }
                            else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                                $scope.dbProductType.selectedProductType = $scope.db.selectedProductType;
                                $scope.dbProductType.refresh = true;
                                $state.go('producttype');
                            }
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'producttypeService', '$state', '$filter', '$q'];
    angular.module('producttypeModule')
            .controller('producttypeController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getProductType: function () {
                return $http.get(coreService.getApi() + 'getProductType');
            },
            deleteProductType: function (product_type_id) {
                return $http.get(coreService.getApi() + 'deleteProductType/' + product_type_id);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('producttypeModule')
            .factory('producttypeService', factory);
}());;(function () {
    var controller = function ($scope, $rootScope, coreService, constantService, producttypepropertyService, $filter, $q, $state, $confirm) {

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('producttype');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "addproducttype") {
                $scope.db = newVal;
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbProductType = coreService.getParentDB('producttype');
                if ($scope.dbProductType.hasOwnProperty('selectedProductType') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    $scope.product_type_id = 0;
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    if ($scope.dbProductType.selectedProductType !== null) {
                        $scope.product_type_id = $scope.dbProductType.selectedProductType.product_type_id;
                    }

                    var postedData = {
                        search: '',
                        product_type_id: $scope.product_type_id
                    };

                    $q.all([
                        producttypepropertyService.getProductTypeProperty(postedData),
                        coreService.getUuid(),
                        producttypepropertyService.getPropertyList(postedData)
                    ]).then(function (queues) {
                        $scope.propertytypelist = queues[0].data;
                        $scope.propertylist = queues[2].data;
                        $scope.propertydeleted = [];
                        $scope.propertyadded = [];
                        if ($scope.dbProductType.selectedProductType !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var producttype = {
                                product_type_id: queues[1].data.success,
                                product_type_name: '',
                                propertytypelist: []
                            }
                            $scope.db.selectedProductType = producttype;
                        }
                        console.log('product_type_name: ' + $scope.dbProductType.selectedProductType.product_type_name);
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                        coreService.setAlert({type: 'exception', message: errors[2].data})
                    });

                }
            }
        }, true);

        /*
         $scope.allpropertiesSearching = function () {
         if ($scope.allpropertySearch !== undefined) {
         var postedData = {
         search: "%" + $scope.allpropertySearch + "%",
         product_type_id: $scope.product_type_id
         };
         producttypepropertyService.getPropertyList(postedData).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         $scope.propertylist = response.data;
         }
         }, function (response) {
         coreService.resetAlert()
         coreService.setAlert({type: 'exception', message: response.data})
         });
         }
         };
         
         $scope.producttypepropertySearching = function () {
         if ($scope.propertySearch !== undefined) {
         var postedData = {
         search: "%" + $scope.propertySearch + "%",
         product_type_id: $scope.product_type_id
         };
         producttypepropertyService.getProductTypeProperty(postedData).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         $scope.propertytypelist = response.data;
         }
         }, function (response) {
         coreService.resetAlert()
         coreService.setAlert({type: 'exception', message: response.data})
         });
         }
         };*/

        $scope.assignProperty = function (node, i) {
            $scope.found = false;
            $scope.propertylist.splice(i, 1);
            angular.forEach($scope.propertytypelist, function (item) {
                if (item.property_id === node.property_id) {
                    $scope.found = true;
                }
            });
            if (!$scope.found) {
                $scope.propertytypelist.push(node);
                $scope.propertyadded.push(node);
            }
            $scope.propertylist.splice($scope.propertylist.indexOf(node), 1);
        };

        $scope.removeAllItems = function () {
            angular.forEach($scope.propertytypelist, function (item) {
                $scope.propertydeleted.push(item);
                $scope.propertylist.push(item);
                angular.forEach($scope.propertyadded, function (node, x) {
                    if (item.property_id == node.property_id) {
                        $scope.propertyadded.splice(x, 1);
                    }
                });
            });
            $scope.propertytypelist.splice(0);
        }

        $scope.removeAssignProperty = function (node, i) {
            $scope.found = false;
//            $scope.propertytypelist.splice(i, 1);
            $scope.propertydeleted.push(node);
            
            angular.forEach($scope.propertylist, function (item) {
                if (item.property_id == node.property_id) {
                    $scope.found = true;
                }
            });
            
            if (!$scope.found) {
                $scope.propertylist.push(node);
            }
            angular.forEach($scope.propertyadded, function (item, x) {
                if (item.property_id == node.property_id) {
                    $scope.propertyadded.splice(x, 1);
                }
            });

            $scope.propertytypelist.splice($scope.propertytypelist.indexOf(node), 1);
        };

        $scope.saveProductType = function () {
            $scope.dbProductType.selectedProductType = $scope.db.selectedProductType;
            $scope.db.selectedProductType.propertytypelist = $scope.propertytypelist;
            $scope.db.selectedProductType.propertydeleted = $scope.propertydeleted;
            $scope.db.selectedProductType.propertyadded = $scope.propertyadded;

            if ($scope.propertydeleted.length > 0) {
                $confirm({
                    text: constantService.getMessage('deleteassignedproperties'),
                    title: 'Delete assigned properties',
                    cancel: 'No',
                    ok: "Yes, I'm sure"
                }).then(function () {
                    $scope.updateProductType();
                });
            }
            else {
                $scope.updateProductType();
            }

        };

        $scope.updateProductType = function () {
            producttypepropertyService.writeProductType($scope.db.selectedProductType).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.product_type_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.product_type_name_valid = constantService.getMessage('product_type_name_valid');
                    } else {
                        $scope.propertydeleted = [];
                        $scope.propertyadded = [];
                        $scope.dbProductType.refresh = true;
                        $state.go('producttype');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };


    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'constantService', 'producttypepropertyService', '$filter', '$q', '$state', '$confirm'];
    angular.module('producttypepropertyModule')
            .controller('producttypepropertyController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            writeProductType: function (producttype) {
                return $http.post(coreService.getApi() + 'updateProductType', producttype);
            },
            getProductTypeProperty: function (postedData) {
                return $http.post(coreService.getApi() + 'getProductTypeProperty' , postedData);
            },
            getPropertyList: function (postedData) {
                return $http.post(coreService.getApi() + 'getPropertyList' , postedData);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('producttypepropertyModule')
            .factory('producttypepropertyService', factory);
}());;(function () {
    var controller = function ($scope, $uibModalInstance, coreService, $filter, $uibModal, $window, oldProfile) {
        $scope.updatedProfile = {};
        $scope.oldProfile = oldProfile;
        console.log($scope.oldProfile);

        // getting module data
        $scope.module = coreService.getCurrentState();
        $scope.profileData = coreService.getProfileData();
        $scope.fields = $scope.profileData.fields;
        $scope.filters = $scope.profileData.filters;
        console.log($scope.profiles);

        // getting db by module name
        $scope.$watch(function () {
            return coreService.getParentDB($scope.module)
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal)) {
                $scope.db = newVal;
            }
        }, true);

        // saving the updated profile
        $scope.saveUpdatedProfile = function () {
            console.log($scope.oldProfile);
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Updating profile .. please wait'})
            angular.copy($scope.oldProfile, $scope.updatedProfile);
//            $scope.updatedProfile = $scope.oldProfile;
            $scope.updatedProfile.fields = [];
            if ($scope.oldProfile.profile_name) {
                angular.forEach($scope.oldProfile.fields, function (value, key) {
//                    console.log(value);
                    if (value.field_used) {
//                        $scope.oldProfile.fields.splice(key,1);
                        $scope.updatedProfile.fields.push(value);
                    }
                });
//                angular.forEach($scope.fields, function (value) {
//                    console.log(value);
//                    if (value.field_used) {
//                        $scope.oldProfile.fields.push($filter('filter')($scope.fields, {name: value.name})[0]);
//                    }
//                });
                console.log($scope.oldProfile);
                console.log($scope.updatedProfile);
//                $scope.db.selectedProfile = {};
//                $scope.oldProfile.module = $scope.db.module;
//                $scope.oldProfile.user_id = coreService.getUser().user_id;
                coreService.updateTableProfile($scope.updatedProfile).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.profiles = response.data;
                        console.log($scope.db.profiles);
                        console.log($scope.db.selectedProfile);
                        console.log($scope.updatedProfile);
                        if ($scope.db.selectedProfile.profile_id === $scope.updatedProfile.profile_id) {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: $scope.updatedProfile.name})[0]
                            $scope.db.selectedProfile.selected = $scope.profileData.selectedRow;
                            $scope.db.selectedProfile.uisref = $scope.profileData.viewSref;
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters = $scope.filters;
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                        }
                        console.log($scope.db.selectedProfile);
//                        $scope.db.refresh = true;
                        coreService.setDB($scope.db);
                        coreService.resetAlert();
                        coreService.setAlert({type: 'success', message: 'Profile is updated successfully'});
                        var res;
                        $uibModalInstance.close(res);
//                        if ($scope.db.selectedProfile.profile_id === $scope.updatedProfile.profile_name) {
//                        $rootScope.chooseProfile($scope.updatedProfile);
//                        }
                    } else {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                });
            } else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: 'Please choose profile name first'});
            }
        };

        $(".newProfileModal").parents(".modal-dialog").css({width: 800});

    };
    controller.$inject = ['$scope', '$uibModalInstance', 'coreService', '$filter', '$uibModal', '$window', 'oldProfile']
    angular.module('profilesModule')
            .controller('EditProfileController', controller)
}());
;(function () {
    var controller = function ($scope, $uibModalInstance, coreService, $filter, $uibModal, $window) {
        $scope.newProfile = {
            name: '',
            fields: [],
            filters: {}
        };
        $scope.oldProfile = {};

        // getting module data
        $scope.module = coreService.getCurrentState();
        $scope.profileData = coreService.getProfileData();
        $scope.fields = $scope.profileData.fields;
        $scope.filters = $scope.profileData.filters;
        console.log($scope.profiles);

        // getting db by module name
        $scope.$watch(function () {
            return coreService.getParentDB($scope.module)
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal)) {
                $scope.db = newVal;
            }
        }, true);

        // choosing profile and put it in db to apply to the grid
        $scope.chooseProfile = function (profile) {
            console.log($scope.db);

            $scope.db.selectedProfile = profile;
            $scope.db.selectedProfile.selected = $scope.profileData.selectedRow;
            $scope.db.selectedProfile.uisref = $scope.profileData.viewSref;
            $scope.db.selectedProfile.filters = {};
            $scope.db.selectedProfile.filters = $scope.filters;
            $scope.db.refresh = true;
            console.log($scope.db.selectedProfile);
            var res;
            $uibModalInstance.close(res);
            coreService.setDB($scope.db);
        };

        // open newprofile popup to add new one
        $scope.openAddNewProfile = function () {
            var res;
            $uibModalInstance.close(res);
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/profilesModule/views/newprofile.html',
                controller: 'ProfilesController'
            });
        };

        $(".newProfileModal").parents(".modal-dialog").css({width: 800});

        // saving the new profile and put it in db to apply to the grid
        $scope.saveProfile = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Saving profile .. please wait'})
            console.log($scope.newProfile.name);
            if ($scope.newProfile.name) {
                angular.forEach($scope.fields, function (value) {
                    console.log(value);
                    if (value.field_default) {
                        $scope.newProfile.fields.push($filter('filter')($scope.fields, {name: value.name})[0]);
                    }
                });
                console.log($scope.newProfile);
                $scope.db.selectedProfile = {};
                $scope.newProfile.module = $scope.db.module;
                $scope.newProfile.user_id = coreService.getUser().user_id;
                coreService.writeTableProfile($scope.newProfile).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.profiles = response.data;
                        console.log($scope.db.profiles);
                        $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: $scope.newProfile.name})[0]
                        $scope.db.selectedProfile.selected = $scope.profileData.selectedRow;
                        $scope.db.selectedProfile.uisref = $scope.profileData.viewSref;
                        $scope.db.selectedProfile.filters = {};
                        $scope.db.selectedProfile.filters = $scope.filters;
                        angular.forEach($scope.db.selectedProfile.fields, function (field) {
                            if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                            }
                        });
                        console.log($scope.db.selectedProfile);
                        coreService.setDB($scope.db);
                        coreService.resetAlert();
                        coreService.setAlert({type: 'success', message: 'Profile is saved successfully'});
                        var res;
                        $uibModalInstance.close(res);
                    } else {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    }
                }, function (response) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                });
            } else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: 'Please choose profile name first'});
            }
        };

        // open editprofile popup to edit old one
        $scope.openEditOldProfile = function (profile) {
            angular.copy(profile,$scope.oldProfile);
            //$scope.oldProfile = profile;
            console.log(profile);
            angular.forEach($scope.fields, function (value) {
                var f = $filter('filter')($scope.oldProfile.fields, {name: value.name});
//                console.log(f);
                if(f[0])
                    f[0].field_used = true;
                else{
                    value.field_used = false;
                    $scope.oldProfile.fields.push(value);
                }
            });
            console.log($scope.oldProfile);
            var res;
            $uibModalInstance.close(res);
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/profilesModule/views/editprofile.html',
                controller: 'EditProfileController',
                resolve: {
                    'oldProfile': $scope.oldProfile
                }
            });
//        }
        };

        // deleting profile
        $scope.deleteProfile = function (profile) {
            var confirm = false;
            console.log(profile);
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'Profile is deleting .. Please wait'});
            if ($scope.module === 'techsched') {
                confirm = $window.confirm("Once you delete profile, you will delete all custom filters of this profile, Do you want to delete ?");
            } else {
                confirm = true;
            }
            if (confirm)
                coreService.deleteTableProfile(profile.profile_id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                console.log(response.data);
                                // delete profile custom filters
                                if ($scope.module === 'techsched') {
                                    TechSchedService.deleteProfileCustomFilters(profile.profile_id)
                                            .then(function (response2) {
                                                console.log(response2.data)
                                                if (!response2.data.hasOwnProperty('file')) {
                                                    var res;
                                                    $uibModalInstance.close(res);
                                                    coreService.resetAlert();
                                                    coreService.setAlert({type: 'success', message: 'Profile is deleted successfully'});
                                                }
                                            }, function (error) {
                                                coreService.resetAlert();
                                                coreService.setAlert({type: 'exception', message: error.data});
                                            });
                                } else {
                                    var res;
                                    $uibModalInstance.close(res);
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'success', message: 'Profile is deleted successfully'});
                                }
                                coreService.getTableProfiles($scope.module)
                                        .then(function (response) {
                                            if (!response.data.hasOwnProperty('file')) {
                                                $scope.db.profiles = response.data;
                                                if ($scope.db.selectedProfile.profile_id === profile.profile_id)
                                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                                console.log($scope.db);
                                            } else {
                                                coreService.resetAlert();
                                                coreService.setAlert({type: 'exception', message: response.data});
                                            }
                                        }, function (error) {
                                            coreService.resetAlert();
                                            coreService.setAlert({type: 'exception', message: error.data});
                                        });
                            } else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: error.data});
                        });
        };

    };
    controller.$inject = ['$scope', '$uibModalInstance', 'coreService', '$filter', '$uibModal', '$window']
    angular.module('profilesModule')
            .controller('ProfilesController', controller)
}());
;(function () {
    var controller = function ($scope, $rootScope, coreService, quotecustomerService, constantService, $filter, $q, hotkeys, $state) {
        $scope.isNew = false
        $scope.fetched = false;
        var fields = [
            {name: 'first_name', display: 'First name', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'middle_name', display: 'Middle name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'last_name', display: 'Last name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'title', display: 'Title', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'salute', display: 'Salute', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'is_active', display: 'Active', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '', filter_default: 0}

        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        /*     $scope.tabData = [
         {
         heading: "Main",
         route: "quotecustomer.main"
         },
         {
         heading: "Contacts",
         route: "quotecustomer.contacts"
         }
         ]
         
         hotkeys.bindTo($scope).add({
         combo: 'alt+m',
         description: 'Go to Main',
         callback: function () {
         $state.go('quotecustomer.main')
         }
         })
         hotkeys.bindTo($scope).add({
         combo: 'alt+c',
         description: 'Go to Contacts',
         callback: function () {
         $state.go('quotecustomer.contacts')
         }
         })*/



        $scope.$watch(function () {
            return coreService.getParentDB('quotecustomers');
        }, function (newVal) {
            $scope.dbCustomer = coreService.getParentDB('quotecustomer');
            if (coreService.getCurrentState() === 'quotecustomer') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.selectedContact !== null && angular.isDefined($scope.db.selectedContact)) {
                        $scope.db.update = true;
                    }
                }

                coreService.resetAlert();
                coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                $scope.db = {};
                $scope.db.module = $scope.module;
                $scope.db.deleteBtn = 'quotecustomercontact';
                $scope.db.small = true;
                $scope.db.profile = {};

                $scope.maindb = coreService.getParentDB('quotecustomers');
                $rootScope.customerId = null;
                if ($scope.maindb.selectedCustomer !== null) {
                    $rootScope.customerId = $scope.maindb.selectedCustomer.customer_id;
                }
                console.log(coreService.getPrivileges().primary);

                console.log(coreService.getTerritoryId(coreService.getPrivileges().primary));
                $q.all([
                    coreService.getUuid(),
                    coreService.getTableProfiles($scope.db.module),
                    quotecustomerService.getScopes(),
                    quotecustomerService.getContacts($rootScope.customerId),
                    coreService.getTerritoryId(coreService.getPrivileges().primary)
                ]).then(function (queues) {
                    $scope.scopes = queues[2].data;
                    $scope.db.territoryid = queues[4].data.territory_id;
                    if ($scope.maindb.selectedCustomer !== null) {
                        $scope.db.selectedCustomer = {};
                        var customer = {
                            customer_id: $scope.maindb.selectedCustomer.customer_id,
                            customer_name: $scope.maindb.selectedCustomer.customer_name,
                            customer_site: $scope.maindb.selectedCustomer.customer_site,
                            is_active: $scope.maindb.selectedCustomer.is_active,
                            scope_id: $scope.maindb.selectedCustomer.scope_id,
                            territory_id: queues[4].data.territory_id,
                            user_id: coreService.getUser().user_id
                        }
                        $scope.db.selectedCustomer = customer;
                        $rootScope.customer_id = $scope.maindb.selectedCustomer.customer_id;
                        $rootScope.selectedCustomer = customer;
                    }
                    else {
                        $scope.isNew = true;
                        var customer = {
                            customer_id: queues[0].data.success,
                            customer_name: '',
                            customer_site: '',
                            is_active: 1,
                            scope_id: $scope.scopes[0].scope_id,
                            territory_id: queues[4].data.territory_id,
                            user_id: coreService.getUser().user_id
                        }
                        $scope.db.selectedCustomer = customer;
                        $rootScope.customer_id = queues[0].data.success;

                        $rootScope.selectedCustomer = customer;
                    }

                    coreService.resetAlert();
                    $scope.db.profiles = queues[1].data;

                    // $scope.db.pricingtypes = queues[3].data;
                    if (!$scope.db.profiles.length) {
                        profile.module = $scope.db.module;
                        profile.user_id = coreService.getUser().user_id;
                        coreService.writeTableProfile(profile).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                $scope.db.profiles = response.data;
                                $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                $scope.db.selectedProfile.selected = 'selectedContact'
                                $scope.db.selectedProfile.uisref = 'quotecustomercontact.main';
                                $scope.db.selectedProfile.filters = {};
                                $scope.db.add = true;

                                $scope.db.selectedProfile.filters['customer_id'] = $rootScope.customerId;
                                angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                    if (field.hasOwnProperty('filter_filters')) {
                                        $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                    }
                                })
                                angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                $scope.db.items = queues[3].data.items;
                                $scope.db.count = queues[3].data.count;
                                $scope.db.currentPage = 1;
                                coreService.setDB($scope.db);
                            } else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }, function (response) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        })
                    } else {
                        $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                        console.log($scope.db.selectedProfile);

                        $scope.db.selectedProfile.selected = 'selectedContact'
                        $scope.db.selectedProfile.uisref = 'quotecustomercontact.main';
                        $scope.db.selectedProfile.filters = {};
                        $scope.db.selectedProfile.filters['customer_id'] = $rootScope.customerId;
                        angular.forEach($scope.db.selectedProfile.fields, function (field) {
                            if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                            }
                        });
                        angular.copy($scope.db.selectedProfile, $scope.db.profile);
                        $scope.db.add = true;
                        $scope.db.items = queues[3].data.items;
                        $scope.db.count = queues[3].data.count;
                        $scope.db.currentPage = 1;
                        coreService.setDB($scope.db);
                    }

                }, function (errors) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: errors[0].data});
                    coreService.setAlert({type: 'exception', message: errors[1].data});
                    coreService.setAlert({type: 'exception', message: errors[2].data});
                });
                // }
            } else {
                return;
            }
        }, true);


        /*  $scope.checkUrl = function () {
         console.log($scope.db.module);
         if ($scope.db.module === 'quotecustomer') {
         if ($scope.db.selectedCustomer.customer_name != '') {
         $scope.db.selectedProfile.uisref = 'quotecustomercontact.main';
         var x = document.getElementById("btnAddRecord");
         if (x.hasAttribute("href")) {
         x.setAttribute("href", "quotecustomercontact.main");
         }
         $state.go('quotecustomercontact.main');
         }
         } 
         }*/
//        $scope.$watch('db.selectedCustomer.customer_name', function (newVal, oldVal) {
//            //    $scope.maindb = coreService.getParentDB('quotecustomers');
//            console.log($scope.db.add);
//            if (angular.isDefined(newVal) && newVal !== null) {
//                // console.log($scope.db.selectedProfile);
//                if ($scope.db.selectedCustomer.customer_name != '') {
//                    // $scope.isNew = true;
//                    $scope.db.add = true;
//                } else {
//                    $scope.db.add = false;
//                    //$scope.db.selectedProfile.uisref = 'quotecustomer';
//                }
//            }
//        });

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.db.selectedCustomer.customer_id);
            quotecustomerService.deleteCustomerContact($scope.db.selectedContact.contact_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            if (response.data.success == '1' || response.data.success == 1) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                                $scope.db.selectedCustomer = $scope.db.selectedCustomer;
                                $scope.db.refresh = true;
                            } else {
                                coreService.resetAlert();
                                // var err = response.data.message;
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

        /* add/edit   */
        $scope.saveCustomer = function () {
            console.log('selectedCustomer: ' + $scope.db.selectedCustomer);
            if ($scope.db.selectedCustomer.customer_name != '') {
                quotecustomerService.writeCustomer($scope.db.selectedCustomer).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.customer_name_valid = '';
                        if (response.data.success === 2) {
                            $scope.customer_name_valid = constantService.getMessage('customer_name_valid');
                        } else { 
                            $scope.maindb.refresh = true;
                            $scope.db.refresh = true;
                            $state.go('quotecustomers');
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('update_customer')});
                        }
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                });
            }
        };

    }
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'quotecustomerService', 'constantService', '$filter', '$q', 'hotkeys', '$state']
    angular.module('quotecustomerModule')
            .controller('quotecustomerController', controller);
}());;(function () {
    var controller = function ($scope, coreService, quotecustomerService, $filter, $q, hotkeys, $state) {
        $scope.isNew = false
        $scope.fetched = false;
        var fields = [
            {name: 'first_name', display: 'First name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'middle_name', display: 'Middle name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'last_name', display: 'Last name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'title', display: 'Title', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: '', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'salute', display: 'Salute', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: '', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'is_active', display: 'Active', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '', filter_default: 0},
            {name: 'is_main', display: 'Main', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.tabData = [
            {
                heading: "Main",
                route: "quotecustomer.main"
            },
            {
                heading: "Contacts",
                route: "quotecustomer.contacts"
            }
        ]

        hotkeys.bindTo($scope).add({
            combo: 'alt+m',
            description: 'Go to Main',
            callback: function () {
                $state.go('quotecustomer.main')
            }
        })
        hotkeys.bindTo($scope).add({
            combo: 'alt+c',
            description: 'Go to Contacts',
            callback: function () {
                $state.go('quotecustomer.contacts')
            }
        })


        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'quotecustomer.main') {
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_')
                $scope.maindb = coreService.getParentDB('quotecustomers');
                if ($scope.maindb.hasOwnProperty('selectedCustomer')) {
                    if (newVal !== null && angular.isDefined(newVal)) {
                        $scope.db = newVal
//                        if($scope.db.hasOwnProperty('refresh') && $scope.db.refresh){
//                            $scope.db.refresh = false
//                            //$scope.db.items = $scope.db.contacts
//                            //$scope.db.count = $scope.db.contacts.length
//                        }
                    } else {                    
                        if ($scope.maindb.selectedCustomer === null) {
                            console.log('null');

                            $scope.db = {};
                            $scope.db.isNew = true;
                            $scope.db.small = true;
                            $scope.db.selectedCustomer = {};
                            $scope.db.scopes = [];
                            angular.copy($scope.maindb.scopes, $scope.db.scopes);
                            $scope.db.module = $scope.module
                            $q.all([
                                coreService.getTerritoryId(coreService.getPrivileges().primary),
                                coreService.getPhoneTypes(),
                                coreService.getAddressTypes(),
                                coreService.getEmailTypes(),
                                coreService.getTableProfiles($scope.db.module),
                                coreService.getUuid()
                            ]).then(function (queues) {
                                $scope.db.profiles = queues[4].data;
                                if (!$scope.db.profiles.length) {
                                    profile.module = $scope.db.module;
                                    profile.user_id = coreService.getUser().user_id;
                                    coreService.writeTableProfile(profile).then(function (response) {
                                        if (!response.data.hasOwnProperty('file')) {
                                            $scope.db.profiles = response.data;
                                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                            $scope.db.selectedProfile.selected = 'selectedContact';
                                            $scope.db.selectedProfile.uisref = "quotecustomercontact.main";
                                            $scope.db.selectedProfile.filters = {}
                                            $scope.db.selectedProfile.filters.scopes = []
                                            angular.copy($scope.db.scopes, $scope.db.selectedProfile.filters.scopes);
                                            $scope.db.selectedProfile.filters.scopes.unshift({scope_name: 'All'});
                                            $scope.db.add = true;
                                            $scope.db.territoryid = queues[0].data.territory_id;
                                            $scope.db.phonetypes = queues[1].data;
                                            $scope.db.addresstypes = queues[2].data;
                                            $scope.db.emailtypes = queues[3].data;
                                            var customer = {
                                                customer_id: queues[5].data.success,
                                                customer_name: '',
                                                customer_site: '',
                                                is_active: 1,
                                                territory_id: $scope.db.territoryid,
                                                user_id: coreService.getUser().user_id,
                                                scopes: []
                                            }
                                            angular.copy($scope.db.scopes, customer.scopes)
                                            $scope.db.selectedCustomer = customer
                                            $scope.db.selectedCustomer.scope_id = $scope.db.selectedCustomer.scopes[0].scope_id
                                            $scope.db.items = []
                                            $scope.db.count = 0
                                            coreService.setDB($scope.db)

                                        } else {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: response.data})
                                        }
                                    }, function (response) {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data})
                                    })
                                } else {
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedContact';
                                    $scope.db.selectedProfile.uisref = "quotecustomercontact.main";
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.scopes = []
                                    angular.copy($scope.db.scopes, $scope.db.selectedProfile.filters.scopes)
                                    $scope.db.selectedProfile.filters.scopes.unshift({scope_name: 'All'});
                                    $scope.db.add = true
                                    $scope.db.territoryid = queues[0].data.territory_id
                                    $scope.db.phonetypes = queues[1].data
                                    $scope.db.addresstypes = queues[2].data
                                    $scope.db.emailtypes = queues[3].data
                                    var customer = {
                                        customer_id: queues[5].data.success,
                                        customer_name: '',
                                        customer_site: '',
                                        is_active: 1,
                                        territory_id: $scope.db.territoryid,
                                        user_id: coreService.getUser().user_id,
                                        scopes: []
                                    }
                                    angular.copy($scope.db.scopes, customer.scopes)
                                    $scope.db.selectedCustomer = customer
                                   // $scope.db.selectedCustomer.scope_id = $scope.db.selectedCustomer.scopes[0].scope_id
                                    $scope.db.items = []
                                    $scope.db.count = 0
                                    coreService.setDB($scope.db)
                                }
                            }, function (errors) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: errors[0].data})
                                coreService.setAlert({type: 'exception', message: errors[1].data})
                                coreService.setAlert({type: 'exception', message: errors[2].data})
                                coreService.setAlert({type: 'exception', message: errors[3].data})
                                coreService.setAlert({type: 'exception', message: errors[4].data})
                                coreService.setAlert({type: 'exception', message: errors[5].data})
                            })
                        }
                    }

                }
            }
        }, true);

        $scope.saveCustomer = function () {
            console.log('$scope.db.isNew): ' + $scope.db.isNew)
            $scope.maindb.selectedCustomer = $scope.db.selectedCustomer;
            $scope.maindb.refresh = true;
            $scope.maindb.update = true;
            $state.go('quotecustomers');
//            console.table( $scope.db.selectedCustomer);
        };

        /* fill contact grid*/
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'quotecustomer.contacts') {
                $scope.module = coreService.getCurrentState();
                $scope.dbmain = coreService.getParentDB('quotecustomer_main');
                $scope.dbcontacts = coreService.getParentDB('quotecustomer_contacts');

                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;

                        console.log($scope.db.selectedContact);
                        quotecustomerService.writeContact($scope.db.selectedContact).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'wait', message: 'Refreshing customers .. Please wait'});
                                quotecustomerService.getContacts().then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        coreService.resetAlert();
                                        $scope.db.items = response.data.items;
                                        $scope.db.count - response.data.count;
                                        $scope.db.currentPage = 1;
                                    }
                                }, function (response) {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data})
                                });
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        });
                    }
                } else {
                    console.log('   $scope.module:  ' + $scope.module);
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.profile = {};
                    $q.all([
                        quotecustomerService.getContacts($scope.dbmain.selectedCustomer.customer_id),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        console.log('$scope.db.profiles.length:  ' + $scope.db.profiles.length);
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedContact';
                                    $scope.db.selectedProfile.uisref = 'quotecustomercontact.main';
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedContact';
                            $scope.db.selectedProfile.uisref = 'quotecustomercontact.main';
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);
        /* end fill contact grid*/

    }
    controller.$inject = ['$scope', 'coreService', 'quotecustomerService', '$filter', '$q', 'hotkeys', '$state']
    angular.module('quotecustomerModule')
            .controller('quotecustomerController', controller);
}());;(function () {
    var controller = function ($scope, coreService, quotecustomerService, $filter, $q) {
        $scope.isNew = false
        $scope.fetched = false;
        var fields = [
            {name: 'customercontact_firstname', display: 'First name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'customercontact_lastname', display: 'Last name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'customercontact_title', display: 'Title', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: '', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'customercontact_salute', display: 'Salute', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: '', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'customercontact_active', display: 'Active', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '', filter_default: 1},
            {name: 'customercontact_main', display: 'Main', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '', filter_default: 1},
            {name: 'customercontact_scopeid', display: 'Scope', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'scopes', filter_id: 'scope_id', filter_name: 'scope_name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.tabData = [
            {
                heading: "Main",
                route: "quotecustomer.main"
            },
            {
                heading: "Contacts",
                route: "quotecustomer.contacts"
            }
        ]
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === 'quotecustomer.main') {
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_')
                $scope.maindb = coreService.getParentDB('quotecustomers')
                console.log($scope.maindb)
                if (newVal !== null && angular.isDefined(newVal) && newVal.hasOwnProperty('selectedCustomer')) {
                    $scope.db = newVal
                    $scope.fetched = true
                } else {
                    $scope.isNew = true
                    $scope.db = {}
                    $scope.db.small = true
                    $scope.db.selectedCustomer = {}
                    $scope.db.scopes = []
                    angular.copy($scope.maindb.scopes, $scope.db.scopes)
                    $scope.db.module = $scope.module
                    $q.all([
                        coreService.getTerritoryId(coreService.getPrivileges().primary),
                        coreService.getPhoneTypes(),
                        coreService.getAddressTypes(),
                        coreService.getEmailTypes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[4].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedContact'
                                    $scope.db.selectedProfile.uisref = "quotecustomercontact"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.scopes = []
                                    angular.copy($scope.maindb.scopes, $scope.db.selectedProfile.filters.scopes)
                                    $scope.db.selectedProfile.filters.scopes.unshift({scope_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.add = true
                                    $scope.db.territoryid = queues[0].data.territory_id
                                    $scope.db.phonetypes = queues[1].data
                                    $scope.db.addresstypes = queues[2].data
                                    $scope.db.emailtypes = queues[3].data

                                    if ($scope.maindb.selectedCustomer === null) {
                                        coreService.getUuid().then(function (uuid) {
                                            if (!uuid.data.hasOwnProperty('file')) {
                                                var customer = {
                                                    quotecustomer_id: uuid.data.success,
                                                    quotecustomer_name: '',
                                                    quotecustomer_site: '',
                                                    quotecustomer_active: 1,
                                                    quotecustomer_territoryid: $scope.db.territoryid,
                                                    quotecustomer_userid: coreService.getUser().user_id
                                                }
                                                customer.scopes = []
                                                angular.copy($scope.db.scopes, customer.scopes)

                                                $scope.db.selectedCustomer = customer
                                                $scope.db.selectedCustomer.quotecustomer_scopeid = $scope.db.selectedCustomer.scopes[0].scope_id
                                                coreService.setDB($scope.db)
                                            } else {
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'exception', message: uuid.data})
                                            }
                                        }, function (uuid) {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: uuid.data})
                                        })
                                        
                                    } else {
                                        angular.copy($scope.maindb.selectedCustomer, $scope.db.selectedCustomer)
                                        coreService.setDB($scope.db)
                                    }
                                    console.log($scope.db.selectedCustomer)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }else{
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedContact'
                                    $scope.db.selectedProfile.uisref = "quotecustomercontact"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.scopes = []
                                    angular.copy($scope.maindb.scopes, $scope.db.selectedProfile.filters.scopes)
                                    $scope.db.selectedProfile.filters.scopes.unshift({scope_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.add = true
                                    $scope.db.territoryid = queues[0].data.territory_id
                                    $scope.db.phonetypes = queues[1].data
                                    $scope.db.addresstypes = queues[2].data
                                    $scope.db.emailtypes = queues[3].data

                                    if ($scope.maindb.selectedCustomer === null) {
                                        coreService.getUuid().then(function (uuid) {
                                            if (!uuid.data.hasOwnProperty('file')) {
                                                var customer = {
                                                    quotecustomer_id: uuid.data.success,
                                                    quotecustomer_name: '',
                                                    quotecustomer_site: '',
                                                    quotecustomer_active: 1,
                                                    quotecustomer_territoryid: $scope.db.territoryid,
                                                    quotecustomer_userid: coreService.getUser().user_id
                                                }
                                                customer.scopes = []
                                                angular.copy($scope.db.scopes, customer.scopes)

                                                $scope.db.selectedCustomer = customer
                                                $scope.db.selectedCustomer.quotecustomer_scopeid = $scope.db.selectedCustomer.scopes[0].scope_id
                                                coreService.setDB($scope.db)
                                            } else {
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'exception', message: uuid.data})
                                            }
                                        }, function (uuid) {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: uuid.data})
                                        })
                                        
                                    } else {
                                        angular.copy($scope.maindb.selectedCustomer, $scope.db.selectedCustomer)
                                        coreService.setDB($scope.db)
                                    }
                                    console.log($scope.db.selectedCustomer)
                        }

                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                        coreService.setAlert({type: 'exception', message: errors[2].data})
                        coreService.setAlert({type: 'exception', message: errors[3].data})
                        coreService.setAlert({type: 'exception', message: errors[4].data})
                    })

                }
            } else {
                return
            }
        }, true)
    }
    controller.$inject = ['$scope', 'coreService', 'quotecustomerService', '$filter', '$q']
    angular.module('quotecustomerModule')
            .controller('quotecustomerController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getScopes: function () {
                return $http.get(coreService.getApi() + 'quotescopes');
            },
            getContacts: function (customer_id) {
                return $http.post(coreService.getApi() + 'getcontactsgrid', customer_id);
            },
            writeCustomer: function (customer) {
                return $http.post(coreService.getApi() + 'savecustomer', customer);
            },
           
            getCustomerById: function (customer_id) {
                return $http.get(coreService.getApi() + 'getcustomerbyid/' + customer_id);
            },
            deleteCustomerContact: function (contact_id) {
                return $http.get(coreService.getApi() + 'deletecustomercontact/' + contact_id);
            }

        };
    };
    factory.$inject = ['$http', 'coreService'];
    angular.module('quotecustomerModule')
            .factory('quotecustomerService', factory);
}());;(function () {
    var controller = function ($scope, $rootScope, coreService, quotecustomercontactService, quotecustomerService, constantService, $filter, $q, $state, hotkeys, $uibModal) {
        $scope.isNew = false
        $scope.fetched = false
        $scope.tabData = [
            {
                heading: "Main",
                route: "quotecustomercontact.main"
            },
            {
                heading: "Addresses",
                route: "quotecustomercontact.address"
                        //, disable: true
            },
            {
                heading: "Phones",
                route: "quotecustomercontact.phone"
                        //, disable: true
            },
            {
                heading: "Emails",
                route: "quotecustomercontact.email"
                        // , disable: true
            }
        ]
        hotkeys.bindTo($scope).add({
            combo: 'alt+m',
            description: 'Go to main',
            callback: function () {
                $state.go('quotecustomercontact.main');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+a',
            description: 'Go to Addresses',
            callback: function () {
                $state.go('quotecustomercontact.address');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+p',
            description: 'Go to Phones',
            callback: function () {
                $state.go('quotecustomercontact.phone');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+e',
            description: 'Go to Emails',
            callback: function () {
                $state.go('quotecustomercontact.email');
            }
        });
        $scope.btnSaveContact = true;
//        $scope.$watch('db.selectedContact.first_name', function (newVal) {
//            if (angular.isDefined(newVal) && newVal !== null && newVal !== '') {
//                $filter('filter')($scope.tabData, {
//                    route: 'quotecustomercontact.address'
//                })[0].disable = false;
//            }
//        });
        $scope.number_valid = constantService.getMessage('number_valid');
        $scope.checkEmail = constantService.getMessage('checkEmail');
        $scope.$watch(function () {
            return coreService.getParentDB('quotecustomer');
        }, function (newVal) {
            // console.log(coreService.getCurrentState());
            $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
            if (newVal !== null && angular.isDefined(newVal) && $scope.module === "quotecustomercontact_main") {
                $scope.db = newVal;
                $scope.dbContact = coreService.getParentDB('quotecustomer');
                if ($scope.dbContact.hasOwnProperty('selectedContact') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getUuid(),
                        coreService.getTerritoryId(coreService.getPrivileges().primary),
                        coreService.getCountries(),
                        coreService.getPhoneTypes(),
                        coreService.getAddressTypes(),
                        coreService.getEmailTypes(),
                        quotecustomerService.getScopes()
                    ]).then(function (queues) {
                        $scope.phonetypes = queues[3].data;
                        $scope.addresstypes = queues[4].data;
                        $scope.emailtypes = queues[5].data;
                        $scope.scopes = queues[6].data;
                        // angular.copy($scope.scopes, $scope.db.selectedProfile.filters.scopes);
                        console.log($rootScope.customer_id);
                        $scope.countries = queues[2].data;
                        if ($scope.db.selectedContact !== null) {
                            quotecustomercontactService.getCustomerContacts($scope.db.selectedContact.contact_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {

                                    $scope.db.selectedContact = response.data;
                                    $scope.db.selectedContact.emailsdeleted = [];
                                    $scope.db.selectedContact.phonesdeleted = [];
                                    $scope.db.selectedContact.addressesdeleted = [];
                                    angular.forEach($scope.db.selectedContact.emails, function (email) {
                                        email.emailtypes = []
                                        angular.copy($scope.emailtypes, email.emailtypes)
                                    })
                                    angular.forEach($scope.db.selectedContact.phones, function (phone) {
                                        phone.phonetypes = []
                                        angular.copy($scope.phonetypes, phone.phonetypes)
                                    })
                                    angular.forEach($scope.db.selectedContact.addresses, function (address) {
                                        address.addresstypes = []
                                        angular.copy($scope.addresstypes, address.addresstypes)
                                        address.countries = []
                                        angular.copy($scope.countries, address.countries)
                                        coreService.getCountryStates(address.country.country_id).then(function (states) {
                                            if (!states.data.hasOwnProperty('file')) {
                                                address.states = states.data
                                                coreService.getCities(address.state.state_id).then(function (cities) {
                                                    if (!cities.data.hasOwnProperty('file')) {
                                                        address.cities = cities.data
                                                        coreService.resetAlert()
                                                        console.log($scope.db)
                                                    } else {
                                                        coreService.resetAlert()
                                                        coreService.setAlert({type: 'exception', message: cities.data})
                                                    }
                                                }, function (response) {
                                                    coreService.resetAlert()
                                                    coreService.setAlert({type: 'exception', message: response.data})
                                                })
                                            } else {
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'exception', message: states.data})
                                            }
                                        }, function (response) {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: response.data})
                                        })
                                    })
                                    /*
                                     if (!$scope.db.selectedContact.addresses.length) {
                                     $scope.addNewAddress();
                                     }
                                     if (!$scope.db.selectedContact.phones.length) {
                                     $scope.addNewPhone();
                                     }
                                     
                                     if (!$scope.db.selectedContact.emails.length) {
                                     $scope.addNewEmail();
                                     }*/
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }
                        else {
                            $scope.isNew = true;
                            var contact = {
                                user_id: coreService.getUser().user_id,
                                contact_id: queues[0].data.success,
                                customer_id: $rootScope.customer_id,
                                scope_id: $scope.scopes[0].scope_id,
                                first_name: '',
                                middle_name: '',
                                last_name: '',
                                is_active: 1,
                                title: '',
                                salute: '',
                                is_main: 0,
                                territory_id: queues[1].data.territory_id,
                                addresses: [],
                                phones: [],
                                emails: [],
                                addressesdeleted: [],
                                phonesdeleted: [],
                                emailsdeleted: []
                            };
                            $scope.db.selectedContact = contact;
                            $scope.db.selectedContact.selectedCustomer = $rootScope.selectedCustomer;
                            /*    
                             $scope.addNewAddress();
                             $scope.addNewPhone();
                             $scope.addNewEmail();
                             */
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                        coreService.setAlert({type: 'exception', message: errors[2].data})
                    });
                }
            }

        }, true);
        $scope.saveContact = function () {
            coreService.resetAlert();
            console.log($scope.db.selectedContact);
            var notvalid = false;
            if ($.trim($scope.db.selectedContact.first_name) === '') {
                notvalid = true;
                $state.go('quotecustomercontact.main');
                coreService.setAlert({type: 'error', message: constantService.getMessage('valid_customer_name')});
            }
            if ($scope.db.selectedContact.addresses.length === 1) {
                var address = $scope.db.selectedContact.addresses[0];
                if ($.trim(address.address_text) === '') {
                    notvalid = true;
                    $state.go('quotecustomercontact.address');
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_address')});
                }
            }
            if ($scope.db.selectedContact.phones.length === 1 && !notvalid) {
                var phone = $scope.db.selectedContact.phones[0];
                if ($.trim(phone.phone_text) === '') {
                    notvalid = true;
                    $state.go('quotecustomercontact.phone');
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_phone')});
                }
            }
            if ($scope.db.selectedContact.emails.length === 1 && !notvalid) {
                var email = $scope.db.selectedContact.emails[0];
                console.log(email);
                if ($.trim(email.email_text) === '') {
                    notvalid = true;
                    $state.go('quotecustomercontact.email');
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_email')});
                }
            }

            if (!$scope.db.selectedContact.addresses.length && !notvalid) {
                notvalid = true;
                $state.go('quotecustomercontact.address');
                coreService.setAlert({type: 'error', message: constantService.getMessage('emptyAddress')});
            }
            if (!$scope.db.selectedContact.phones.length && !notvalid) {
                notvalid = true;
                $state.go('quotecustomercontact.phone');
                coreService.setAlert({type: 'error', message: constantService.getMessage('emptyPhone')});
            }
            if (!$scope.db.selectedContact.emails.length && !notvalid) {
                notvalid = true;
                $state.go('quotecustomercontact.email');
                coreService.setAlert({type: 'error', message: constantService.getMessage('emptyEmail')});
            }
            if (!notvalid) {
                angular.forEach($scope.db.selectedContact.addresses, function (address) {
                    delete address.addresstypes;
                    delete address.cities;
                    delete address.countries;
                    delete address.country;
                    delete address.states;
                    delete address.state;
                })
                angular.forEach($scope.db.selectedContact.addressesdeleted, function (address) {
                    delete address.addresstypes;
                    delete address.cities;
                    delete address.countries;
                    delete address.country;
                    delete address.states;
                    delete address.state;
                })
                angular.forEach($scope.db.selectedContact.emails, function (email) {
                    delete email.emailtypes;
                })
                angular.forEach($scope.db.selectedContact.emailsdeleted, function (email) {
                    delete email.emailtypes;
                })

                angular.forEach($scope.db.selectedContact.phones, function (phone) {
                    delete phone.phonetypes;
                })
                angular.forEach($scope.db.selectedContact.phonesdeleted, function (phone) {
                    delete phone.phonetypes;
                })
                $state.go('quotecustomercontact.main');
                coreService.setAlert({type: 'wait', message: constantService.getMessage('savingLoad')});
                quotecustomercontactService.writeCustomerContact($scope.db.selectedContact).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        coreService.resetAlert();
                        $scope.contact_name_valid = '';
                        if (response.data.success === 2) {
                            $scope.contact_name_valid = constantService.getMessage('contact_name_valid');
                        } else {
                            $scope.db.refresh = true;
                            $state.go('quotecustomer');
                        }

                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        };
        $scope.addNewPhone = function () {
            coreService.resetAlert();
            var len = $scope.db.selectedContact.phones.length;
            var check = true;
            if (len > 0) {
                var phone = $scope.db.selectedContact.phones[len - 1];
                console.log(phone);
                if ($.trim(phone.phone_text) === '') {
                    check = false;
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_phone')});
                }
            }
            if (check) {
                coreService.getUuid().then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        var uuid = response.data.success;
                        var phone = {}
                        phone.phonetypes = []
                        angular.copy($scope.phonetypes, phone.phonetypes);
                        phone.is_main = 0
                        phone.phone_id = uuid
                        phone.phone_text = ""
                        phone.phonetype_id = phone.phonetypes[0].phonetype_id;
                        phone.contact_id = $scope.db.selectedContact.contact_id;
                        phone.extesnion = ''
                        phone.edit = true;
                        $scope.db.selectedContact.phones.push(phone);
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }

        }

        hotkeys.bindTo($scope).add({
            combo: 'ctrl+p',
            description: 'Add new phone',
            callback: function () {
                $scope.addNewPhone();
            }
        });
        $scope.addNewEmail = function () {
            coreService.resetAlert();
            var len = $scope.db.selectedContact.emails.length;
            var check = true;
            if (len > 0) {
                var email = $scope.db.selectedContact.emails[len - 1];
                if ($.trim(email.email_text) === '') {
                    check = false;
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_email')});
                }
            }
            if (check) {
                coreService.getUuid().then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        var uuid = response.data.success
                        var email = {}
                        email.emailtypes = []
                        angular.copy($scope.emailtypes, email.emailtypes)
                        email.email_id = uuid
                        email.email_text = ""
                        email.emailtype_id = email.emailtypes[0].emailtype_id
                        email.is_main = 0
                        email.contact_id = $scope.db.selectedContact.contact_id
                        email.edit = true
                        $scope.db.selectedContact.emails.push(email)
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        }

        $scope.checkAddressIsMain = function (index) {
            angular.forEach($scope.db.selectedContact.addresses, function (item, i) {
                if (i !== index) {
                    $scope.db.selectedContact.addresses[i].is_main = 0;
                }
            });
        }

        $scope.checkEmailIsMain = function (index) {
            angular.forEach($scope.db.selectedContact.emails, function (item, i) {
                if (i !== index) {
                    $scope.db.selectedContact.emails[i].is_main = 0;
                }
            });
        }

        $scope.checkPhonesIsMain = function (index) {
            angular.forEach($scope.db.selectedContact.phones, function (item, i) {
                if (i !== index) {
                    $scope.db.selectedContact.phones[i].is_main = 0;
                }
            });
        }


        hotkeys.bindTo($scope).add({
            combo: 'ctrl+e',
            description: 'Add new email',
            callback: function () {
                $scope.addNewEmail();
            }
        });
        $scope.addNewAddress = function () {
            var len = $scope.db.selectedContact.addresses.length;
            var check = true;
            if (len > 0) {
                var address = $scope.db.selectedContact.addresses[len - 1];
                if ($.trim(address.address_text) === '') {
                    check = false;
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_address')});
                } else if (!angular.isDefined(address.city)) {
                    check = false;
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_city')});
                }
            }
            if (check) {
                if (!$scope.db.selectedContact.hasOwnProperty('addresses')) {
                    $scope.db.selectedContact.addresses = [];
                }
                coreService.getUuid().then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        var uuid = response.data.success;
                        var address = {
                            contact_id: $scope.db.selectedContact.contact_id,
                            address_id: uuid,
                            address_text: "",
                            postal_code: "",
                            is_main: 0
                        }
                        address.addresstypes = [];
                        angular.copy($scope.addresstypes, address.addresstypes)
                        address.addresstype_id = address.addresstypes[0].addresstype_id;
                        address.countries = [];
                        angular.copy($scope.countries, address.countries)
                        address.country = {}
                        angular.copy($filter('filter')(address.countries, {country_code: 'CAN'})[0], address.country)
                        //address.country = $filter('filter')(address.countries,{country_code: 'CAD'})[0];
                        coreService.getCountryStates(address.country.country_id).then(function (states) {
                            if (!states.data.hasOwnProperty('file')) {
                                address.states = states.data;
                                address.state = address.states[0];
                                coreService.getCities(address.state.state_id).then(function (cities) {
                                    if (!cities.data.hasOwnProperty('file')) {
                                        address.cities = cities.data;
                                        address.city = address.cities[0];
                                        address.edit = true;
                                        $scope.db.selectedContact.addresses.push(address)
                                        coreService.resetAlert()
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: cities.data})
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                })
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: states.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })

                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                });
            }

        }

        hotkeys.bindTo($scope).add({
            combo: 'ctrl+a',
            description: 'Add new address',
            callback: function () {
                $scope.addNewAddress();
            }
        });
//        $scope.checkEnablePhone = function (address) {
//            var disable = true;
//            console.log(address.edit);
//            if (address.edit) {
//                if ($.trim(address.address_text) !== '' && angular.isDefined(address.city) && $scope.db.selectedContact.addresses.length > 0) {
//                    disable = false;
//                }
//            }
//            else {
//                if ($scope.db.selectedContact.addresses.length > 0) {
//                    disable = false;
//                }
//            }
//            $filter('filter')($scope.tabData, {
//                route: 'quotecustomercontact.phone'
//            })[0].disable = disable;
//        }

        $scope.checkCity = function (address) {
            coreService.resetAlert();
            if (address.edit) {
                console.log(address);
                if ($.trim(address.address_text) === '') {
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_address')});
                } else if (!angular.isDefined(address.city)) {
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_city')});
                } else {
                    address.edit = !address.edit;
                    if (angular.isDefined(address.city) && address.city != '') {
                        if (address.city.city_id === 'NOID') {
                            coreService.addCity(address.city).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    address.city.city_id = response.data.reason
                                    angular.forEach($scope.db.selectedContact.addresses, function (add) {
                                        if (add.state.state_id === address.city.state_id)
                                            add.cities.push(address.city)
                                    })
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })

                        }
//                        $filter('filter')($scope.tabData, {
//                            route: 'quotecustomercontact.phone'
//                        })[0].disable = false;
                    }
                }
            } else {
                address.edit = !address.edit;
            }
        }

        $scope.refreshCities = function ($select, address) {
            var search = $select.search
            var list = []
            angular.copy($select.items, list)
            var FLAG = 'NOID'
            var cities = []
            angular.copy(address.cities, cities)

            if (search.length) {
                var userInputItem = {
                    city_id: FLAG,
                    city_name: search,
                    state_id: address.state.state_id
                }
                for (var i = list.length - 1; i >= 0; i--) {
                    if (list[i].city_id === FLAG)
                        list.splice(i, 1)
                }

                list.push(userInputItem)
                address.city = userInputItem
            } else {
                $select.items = list
            }

        }

        $scope.selectedCountry = function (item, address) {
            coreService.getCountryStates(item.country_id).then(function (states) {
                if (!states.hasOwnProperty('file')) {
                    address.states = states.data;
                    address.state = address.states[0];
                    var city = {
                        city_id: ''
                        , city_name: ''
                        , state_id: ''
                    };
                    coreService.getCities(address.state.state_id).then(function (cities) {
                        if (!cities.hasOwnProperty('file')) {
                            address.cities = cities.data;
                            if (angular.isDefined(address.cities[0])) {
                                address.city = address.cities[0];
                            }
                            else {
                                address.city = city;
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: cities.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: states.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.selectedState = function (item, address) {
            coreService.getCities(item.state_id).then(function (cities) {
                if (!cities.hasOwnProperty('file')) {
                    address.cities = cities.data
                    address.city = address.cities[0]
                    angular.forEach($scope.db.selectedContact.addresses, function (add) {
                        if (!angular.equals(add, address)) {
                            if (add.state.state_id === item.state_id) {
                                var newItem = $filter('filter')(add.cities, {city_id: -1}, true)
                                if (angular.isDefined(newItem)) {
                                    address.cities.push(newItem[0])
                                }
                            }
                        }
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: cities.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.saveEmail = function (email) {
            coreService.resetAlert();
            console.log(email);
            if (email.edit) {
                if (email.email_text === '') {
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_email')});
                }
                else if (!angular.isDefined(email.email_text)) {
                    coreService.setAlert({type: 'error', message: constantService.getMessage('checkEmail')});
                } else {
                    email.edit = !email.edit;
                }
            } else {
                email.edit = !email.edit;
            }
        }

        $scope.savePhone = function (phone) {
            console.log(phone);
            coreService.resetAlert();
            if (phone.edit) {
                if (phone.phone_text !== '' && angular.isDefined(phone.phone_text)) {
                    phone.edit = !phone.edit;
                } else {
                    coreService.setAlert({type: 'error', message: constantService.getMessage('valid_phone')});
                }
            } else {
                phone.edit = !phone.edit;
            }
        }
    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'quotecustomercontactService', 'quotecustomerService', 'constantService', '$filter', '$q', '$state', 'hotkeys', '$uibModal']
    angular.module('quotecustomercontactModule')
            .controller('QuotecustomercontactController', controller)
}());(function () {
    var controller = function ($scope, coreService, quotecustomercontactService, $filter, $q) {
        $scope.isNew = false
        $scope.fetched = false;
        $scope.tabData = [
            {
                heading: "Main",
                route: "quotecustomercontact.main"
            },
            {
                heading: "Addresses",
                route: "quotecustomercontact.address"
            },
            {
                heading: "phones",
                route: "quotecustomercontact.phone"
            },
            {
                heading: "Emails",
                route: "quotecustomercontact.email"
            }
        ]

        $scope.$watch(function () {
            return coreService.getParentDB('quotecustomer_main')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState === "quotecustomercontact.main") {
                $scope.db = newVal
                console.log($scope.db)
                if ($scope.db.hasOwnProperty('selectedContact')) {
                    $scope.fetched = true
                    if ($scope.db.selectedContact === null) {
                        $scope.isNew = true
                        $q.all([
                            coreService.getUuid(),
                            coreService.getTerritoryId(coreService.getPrivileges().primary),
                            coreService.getCountries()
                        ]).then(function (queues) {
                            console.log(queues)
                            $scope.countries = queues[2].data
                            var contact = {
                                customercontact_id: queues[0].data.success,
                                customer_id: $scope.db.selectedCustomer.quotecustomer_id,
                                customercontact_firstname: '',
                                customercontact_middlename: '',
                                customercontact_lastname: '',
                                customercontact_active: 1,
                                customercontact_title: '',
                                customercontact_salute: '',
                                customercontact_main: 0,
                                customercontact_userid: coreService.getUser().user_id,
                                customercontact_territoryid: queues[1].data.territory_id,
                                addressesdeletes: [],
                                phonedeleted: [],
                                emailsdeleted: []
                            }
                            $scope.db.selectedContact = contact
                            $scope.db.selectedContact.countries = []
                            angular.copy($scope.countries, $scope.db.selectedContact.countries)
                            $scope.db.selectedContact.scopes = []
                            angular.copy($scope.db.scopes, $scope.db.selectedContact.scopes)
                            $scope.db.selectedContact.customercontact_scopeid = $scope.db.selectedContact.scopes[0].scope_id
                            $scope.db.selectedContact.phones = []
                            $scope.db.selectedContact.addresses = []
                            $scope.db.selectedContact.emails = []
                            console.log($scope.db)
                        }, function (errors) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: errors[0].data})
                            coreService.setAlert({type: 'exception', message: errors[1].data})
                        })
                    }
                }
            }
        }, true)

        $scope.addNewAddress = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var address = {
                        contactaddress_contactid: $scope.db.selectedCustomer.quotecustomer_id,
                        contactaddress_id: uuid,
                        contactaddress_street: '',
                        contactaddress_postalcode: '',
                        contactaddress_main: 0
                    }
                    address.addresstypes = []
                    angular.copy($scope.db.addresstypes, address.addresstypes)
                    address.contactaddress_addresstype = address.addresstypes[0].addresstype_id
                    if ($scope.db.selectedContact.addresses.length) {
                        var prevAddress = $scope.db.selectedContact.addresses[$scope.db.selectedContact.addresses.length - 1]
                        address.cities = []
                        angular.copy(prevAddress.cities, address.cities)
                        address.city = {}
                        angular.copy(prevAddress.city, address.city)
                        address.states = []
                        angular.copy(prevAddress.states, address.states)
                        address.state = {}
                        angular.copy(prevAddress.state, address.state)
                        address.countries = []
                        angular.copy(prevAddress.countries, address.countries)
                        address.country = {}
                        angular.copy(prevAddress.country, address.country)
                        address.edit = true
                        console.log(address.cities)
                        $scope.db.selectedContact.addresses.push(address)

                    } else {
                        var address = {
                            salesrep_id: $scope.db.selectedCustomer.quotecustomer_id,
                            contactaddress_id: uuid,
                        contactaddress_street: '',
                        contactaddress_postalcode: '',
                        contactaddress_main: 0
                        }
                        address.addresstypes = []
                        angular.copy($scope.db.addresstypes, address.addresstypes)
                        address.addresstype_id = address.addresstypes[0].addresstype_id
                        address.countries = []
                        angular.copy($scope.countries, address.countries)
                        address.country = {}
                        angular.copy($filter('filter')(address.countries, {country_code: 'CAN'})[0], address.country)
                        //address.country = $filter('filter')(address.countries,{country_code: 'CAD'})[0];
                        coreService.getCountryStates(address.country.country_id).then(function (states) {
                            if (!states.data.hasOwnProperty('file')) {
                                address.states = states.data
                                address.state = address.states[0]
                                coreService.getCities(address.state.state_id).then(function (cities) {
                                    if (!cities.data.hasOwnProperty('file')) {
                                        address.cities = cities.data
                                        address.city = address.cities[0]
                                        address.edit = true
                                        $scope.db.selectedContact.addresses.push(address)
                                        coreService.resetAlert()
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: cities.data})
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                })
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: states.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.checkCity = function (address) {
            if (address.edit) {
                angular.forEach(address.cities, function (city) {
                    if (city.city_id == -1) {
                        coreService.addCity(city).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                city.city_id = response.data.reason
                                angular.forEach($scope.db.selectedContact.addresses, function (add) {
                                    if (!angular.equals(add, address) && angular.equals(add.state, address.state)) {
                                        add.cities.push(city)
                                    } else if (angular.equals(add, address)) {
                                        add.city_id = city.city_id
                                    }
                                })
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                })
            }
        }
        $scope.refreshCities = function ($select, address) {
            var search = $select.search
            var list = []
            angular.copy(address.cities, list)
            var city_id = -1
            //console.log(search)
            list = list.filter(function (city) {
                return city.city_id != city_id
            })
            if (search) {
                var userInputItem = {
                    city_id: city_id,
                    city_name: search,
                    state_id: address.state.state_id
                }
                list.push(userInputItem)
                $select.selected = userInputItem
                angular.forEach($scope.db.selectedContact.addresses, function (add) {
                    if (angular.equals(address, add)) {
                        add.cities = list
                    }
                })
            }
        }

        $scope.selectedCountry = function (item, address) {
            coreService.getCountryStates(item.country_id).then(function (states) {
                if (!states.hasOwnProperty('file')) {
                    address.states = states.data
                    address.state = address.states[0]
                    coreService.getCities(address.state.state_id).then(function (cities) {
                        if (!cities.hasOwnProperty('file')) {
                            address.cities = cities.data
                            address.city = address.cities[0]
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: cities.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: states.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.selectedState = function (item, address) {
            coreService.getCities(item.state_id).then(function (cities) {
                if (!cities.hasOwnProperty('file')) {
                    address.cities = cities.data
                    address.city = address.cities[0]
                    angular.forEach($scope.db.selectedContact.addresses, function (add) {
                        if (!angular.equals(add, address)) {
                            if (add.state.state_id === item.state_id) {
                                var newItem = $filter('filter')(add.cities, {city_id: -1}, true)
                                if (angular.isDefined(newItem)) {
                                    address.cities.push(newItem[0])
                                }
                            }
                        }
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: cities.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'quotecustomercontactService', '$filter', '$q']
    angular.module('quotecustomercontactModule')
            .controller('QuotecustomercontactController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            writeCustomerContact: function (contact) {
                return $http.post(coreService.getApi() + 'savecustomercontact', contact);
            },
            getCustomerContacts: function (contact_id) {
                return $http.get(coreService.getApi() + 'getcustomercontacts/'+ contact_id);
            }
        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('quotecustomercontactModule')
            .factory('quotecustomercontactService', factory);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotecustomersService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'customer_name', display: 'Customer name', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'scope_name', display: 'Scope', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'scopes', filter_id: 'scope_id', filter_name: 'scope_name', filter_default: 0},
            {name: 'territory_name', display: 'Territory', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'contact_name', display: 'Main contact', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'contact_email', display: 'Email', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'contact_phone', display: 'Phone', type: 'phone', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }


        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = coreService.getParentDB('quotecustomers');
            if (coreService.getCurrentState() === 'quotecustomers') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotecustomers';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotecustomersService.getCustomers(),
                        coreService.getTableProfiles($scope.db.module),
                        quotecustomersService.getScopes()
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        //$scope.scopes = queues[2].data;

                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedCustomer'
                                    $scope.db.selectedProfile.uisref = "quotecustomer";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;

                                    $scope.db.selectedProfile.filters.scopes = queues[2].data;
                                    $scope.db.selectedProfile.filters.scopes.unshift({scope_name: 'All'});

                                    $scope.db.selectedProfile.filters['scope_name'] = 'All';
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedCustomer'
                            $scope.db.selectedProfile.uisref = "quotecustomer";
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters.scopes = queues[2].data;
                            $scope.db.selectedProfile.filters.scopes.unshift({scope_name: 'All'});
                            $scope.db.selectedProfile.filters['scope_name'] = 'All';
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                        coreService.setAlert({type: 'exception', message: errors[2].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.db.selectedCustomer.customer_id);
            quotecustomersService.deleteCustomer($scope.db.selectedCustomer.customer_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            if (response.data.success == '1' || response.data.success == 1) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                                $scope.db.selectedCustomer = $scope.db.selectedCustomer;
                                $scope.db.refresh = true;
                                $state.go('quotecustomers');
                            } else {
                                coreService.resetAlert();
                                // var err = response.data.message;
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotecustomersService', '$state', '$filter', '$q'];
    angular.module('quotecustomersModule')
            .controller('quotecustomersController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getScopes: function () {
                return $http.get(coreService.getApi() + 'quotescopes');
            },
            getCustomers: function () {
                return $http.get(coreService.getApi() + 'quotecustomersgrid');
            },
            writeCustomer: function (customer) {
                return $http.post(coreService.getApi() + 'quotecustomer', customer);
            },
            deleteCustomer: function (customer_id) {
                return $http.get(coreService.getApi() + 'deletecustomer/'+ customer_id);
            }
        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('quotecustomersModule')
            .factory('quotecustomersService', factory);
}());(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'building_code_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'building_code_name', display: 'Building Code', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbBuildingCode = coreService.getParentDB('quotelookups_buildingcode');
            if (coreService.getCurrentState() === 'quotelookups.buildingcode') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getBuildingCode(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedBuildingCode'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addbuildingcode";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedBuildingCode'
                            $scope.db.selectedProfile.uisref = "quotelookups.addbuildingcode";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_buildingcode');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addbuildingcode") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbBuildingCode = coreService.getParentDB('quotelookups_buildingcode');
                if ($scope.dbBuildingCode.hasOwnProperty('selectedBuildingCode') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {
                        if ($scope.dbBuildingCode.selectedBuildingCode !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var bulidingdcode = {
                                building_code_id: queues[1].data.success,
                                building_code_name: '',
                                description: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedBuildingCode = bulidingdcode;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.saveBuildingCode = function () {
            console.log('selectedBuildingCode: ' + $scope.db.selectedBuildingCode);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbBuildingCode.selectedBuildingCode = $scope.db.selectedBuildingCode;
            quotelookupsService.writeBuildingCode($scope.db.selectedBuildingCode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.building_code_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.building_code_name_valid = constantService.getMessage('building_code_name_valid');
                    } else {
                        $scope.isNew=false;                        
                        $scope.dbBuildingCode.refresh = true;
                        $state.go('quotelookups.buildingcode');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbBuildingCode.selectedBuildingCode.building_code_id);
            quotelookupsService.deleteBuildingCode($scope.dbBuildingCode.selectedBuildingCode.building_code_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbBuildingCode.selectedBuildingCode = $scope.db.selectedBuildingCode;
                            $scope.dbBuildingCode.refresh = true;
                            $state.go('quotelookups.buildingcode');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('buildingcodeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'contact_type_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'contact_type_name', display: 'Contact Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'quotelookups.contacttype') {
                $scope.module = coreService.getCurrentState();
                $scope.dbcontacttype = coreService.getParentDB('quotelookups_contacttype');
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        console.log(newVal)
                        $scope.db.refresh = false;
                        coreService.resetAlert();
                        coreService.setAlert({type: 'wait', message: 'Refreshing Contact Types .. Please wait'});
                        quotelookupsService.getContactTypes().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                $scope.db.items = response.data.items;
                                $scope.db.count = response.data.count;
                            }
                        }, function (response) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        });
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'});

                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getContactTypes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedContactType'
                                    $scope.db.selectedProfile.uisref = "quotelookups.contacttype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    });
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedContactType'
                            $scope.db.selectedProfile.uisref = "quotelookups.contacttype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            })
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});

                    });
                }
            } else {
                return;
            }
        }, true);

        /*  delete Contact type */
        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbcontacttype.selectedContactType.contact_type_id);
            quotelookupsService.deleteContactType($scope.dbcontacttype.selectedContactType.contact_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: 'Contact Type is deleted successfully'});
                            $scope.dbcontacttype.selectedContactType = $scope.db.selectedContactType;
                            $scope.dbcontacttype.refresh = true;
                            $state.go('quotelookups.contacttype');
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('contacttypeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'location_type_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'location_type_name', display: 'Location Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'tree_level', display: 'Tree Level', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.tree_level_valid = '';
        $scope.location_type_name_valid = '';


        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbLocationType = coreService.getParentDB('quotelookups_locationtype');
            if (coreService.getCurrentState() === 'quotelookups.locationtype') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getLocationTypes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedLocationType'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addlocationtype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedLocationType'
                            $scope.db.selectedProfile.uisref = "quotelookups.addlocationtype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_locationtype');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addlocationtype") {
                $scope.db = newVal;
                $scope.number_valid = constantService.getMessage('number_valid');
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbLocationType = coreService.getParentDB('quotelookups_locationtype');
                if ($scope.dbLocationType.hasOwnProperty('selectedLocationType') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {
                        if ($scope.dbLocationType.selectedLocationType !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var locationtype = {
                                location_type_id: queues[1].data.success,
                                location_type_name: '',
                                tree_level: '',
                                description: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedLocationType = locationtype;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.saveLocationType = function () {
            console.log('selectedLocationType: ' + $scope.db.selectedLocationType);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbLocationType.selectedLocationType = $scope.db.selectedLocationType;
            $scope.dbLocationType.refresh = true;
            //$scope.dbLocationType.update = true;
            quotelookupsService.writeLocationType($scope.db.selectedLocationType)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.tree_level_valid = '';
                            $scope.location_type_name_valid = '';
                            if (response.data.success === 3) {
                                $scope.tree_level_valid = constantService.getMessage('tree_level_valid');
                            }
                            else if (response.data.success === 2) {
                                $scope.location_type_name_valid = constantService.getMessage('location_type_name_valid');
                            } else {
                                $scope.dbLocationType.selectedLocationType = $scope.db.selectedLocationType;
                                $scope.dbLocationType.refresh = true;
                                $state.go('quotelookups.locationtype');
                            }
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })

        };
        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbLocationType.selectedLocationType.location_type_id);
            quotelookupsService.deleteLocationType($scope.dbLocationType.selectedLocationType.location_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbLocationType.selectedLocationType = $scope.db.selectedContactType;
                            $scope.dbLocationType.refresh = true;
                            $state.go('quotelookups.locationtype');
                        } else {
                           coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('locationtypeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q, $uibModal) {
        var items = []
        var fields = [
            {name: 'pricing_policy_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'pricing_policy_name', display: 'Pricing Policy', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'pricing_policy_symbol', display: 'Pricing Policy Symbol', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        };

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbpricingpolicy = coreService.getParentDB('quotelookups_pricingpolicy');
            $scope.dbpricingtype = coreService.getParentDB('quotelookups_pricingtype');
            if (coreService.getCurrentState() === 'quotelookups.pricingpolicy') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;                       
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getPricingPolicies(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedPricingPolicy'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addpricingpolicy";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedPricingPolicy'
                            $scope.db.selectedProfile.uisref = "quotelookups.addpricingpolicy";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_pricingpolicy');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addpricingpolicy") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbpricingpolicy = coreService.getParentDB('quotelookups_pricingpolicy');
                if ($scope.dbpricingpolicy.hasOwnProperty('selectedPricingPolicy') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message:constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {

                        if ($scope.dbpricingpolicy.selectedPricingPolicy !== null) {
                            /* quotelookupsService.getPricingPolicyById($scope.dbpricingpolicy.selectedPricingPolicy.pricing_policy_id).then(function (response) {
                             if (!response.data.hasOwnProperty('file')) {
                             console.log('pricing_policy_id: ' + response.data.pricing_policy_id);
                             console.log('response.data: ' + response.data);
                             $scope.db.selectedPricingPolicy = response.data;
                             
                             } else {
                             coreService.resetAlert();
                             coreService.setAlert({type: 'exception', message: response.data});
                             }
                             }, function (response) {
                             coreService.resetAlert();
                             coreService.setAlert({type: 'exception', message: response.data});
                             });*/
                        }
                        else {
                            $scope.isNew = true;
                            var pricing = {
                                pricing_policy_id: queues[1].data.success,
                                pricing_policy_name: '',
                                pricing_policy_symbol: '',
                                description: '',
                                is_visible: 1,
                                is_visible_in_quote: 1,
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedPricingPolicy = pricing;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.savePricingPolicy = function () {
            console.log('selectedPricingPolicy: ' + $scope.db.selectedPricingPolicy);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbpricingpolicy.selectedPricingPolicy = $scope.db.selectedPricingPolicy;
//            $scope.dbpricingpolicy.refresh = true;
//            $scope.dbpricingpolicy.update = true;
//            $state.go('quotelookups.pricingpolicy');
            quotelookupsService.writePricingPolicy($scope.db.selectedPricingPolicy).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.pricing_policy_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.pricing_policy_name_valid = constantService.getMessage('pricing_policy_name_valid');
                    } else {
                        $scope.dbpricingpolicy.refresh = true;
                        $state.go('quotelookups.pricingpolicy');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        /*  delete Pricing  Policy */
        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbpricingpolicy.selectedPricingPolicy.pricing_policy_id);

            quotelookupsService.deletePricingPolicy($scope.dbpricingpolicy.selectedPricingPolicy.pricing_policy_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});

                            $scope.dbpricingpolicy.selectedPricingPolicy = $scope.db.selectedPricingPolicy;
                            $scope.dbpricingpolicy.refresh = true;
                            $state.go('quotelookups.pricingpolicy');

                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };

    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q', '$uibModal'];
    angular.module('quotelookupsModule')
            .controller('pricingpolicyController', controller);
}());


;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'pricing_type_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'purchase_type_name', display: 'Purchase Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'price_term', display: 'Pricing Term', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'pricing_type_name', display: 'Pricing Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }


        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbPricingType = coreService.getParentDB('quotelookups_pricingtype');
            if (coreService.getCurrentState() === 'quotelookups.pricingtype') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getPricingTypes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedPricingType'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addpricingtype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedPricingType'
                            $scope.db.selectedProfile.uisref = "quotelookups.addpricingtype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_pricingtype');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addpricingtype") {
                $scope.db = newVal;
                $scope.number_valid = constantService.getMessage('number_valid');
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbPricingType = coreService.getParentDB('quotelookups_pricingtype');
                if ($scope.dbPricingType.hasOwnProperty('selectedPricingType') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid(),
                        quotelookupsService.getAllPurchaseTypes()
                    ]).then(function (queues) {

                        if ($scope.dbPricingType.selectedPricingType !== null) {
                            quotelookupsService.getPricingTypeById($scope.dbPricingType.selectedPricingType.pricing_type_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    ;
                                    $scope.db.selectedPricingType = response.data;
                                    $scope.db.selectedPricingType.purchasetypes = queues[2].data;

                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                        else {
                            $scope.isNew = true;
                            var ptype = {
                                pricing_type_id: queues[1].data.success,
                                pricing_type_name: '',
                                price_term: '',
                                purchasetypes: queues[2].data,
                                purchase_type_id: queues[2].data[0].purchase_type_id,
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedPricingType = ptype;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });

                }
            }
        }, true);

        $scope.savePricingType = function () {
            console.log('selectedPricingType: ' + $scope.db.selectedPricingType);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbPricingType.selectedPricingType = $scope.db.selectedPricingType;
            $scope.dbPricingType.refresh = true;
            $scope.dbPricingType.update = true;
//            $state.go('quotelookups.pricingtype');
            quotelookupsService.writePricingType($scope.db.selectedPricingType).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.pricing_type_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.pricing_type_name_valid = constantService.getMessage('pricing_type_name_valid');
                    } else {
                        $scope.dbPricingType.refresh = true;
                        $state.go('quotelookups.pricingtype');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });

        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbPricingType.selectedPricingType.pricing_type_id);
            quotelookupsService.deletePricingType($scope.dbPricingType.selectedPricingType.pricing_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbPricingType.selectedPricingType = $scope.db.selectedPricingType;
                            $scope.dbPricingType.refresh = true;
                            $state.go('quotelookups.pricingtype');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('pricingtypeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'property_type_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'property_type_name', display: 'Property Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbPropertyType = coreService.getParentDB('quotelookups_propertytype');
            if (coreService.getCurrentState() === 'quotelookups.propertytype') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;                
                }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getPropertyTypes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedPropertyType'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addpropertytype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedPropertyType'
                            $scope.db.selectedProfile.uisref = "quotelookups.addpropertytype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_propertytype');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addpropertytype") {
                $scope.db = newVal;
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbPropertyType = coreService.getParentDB('quotelookups_propertytype');
                if ($scope.dbPropertyType.hasOwnProperty('selectedPropertyType') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {
                        if ($scope.dbPropertyType.selectedPropertyType !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var propertytype = {
                                property_type_id: queues[1].data.success,
                                property_type_name: '',
                                description: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedPropertyType = propertytype;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });
                }
            }
        }, true);

        /* add/edit   */
        $scope.savePropertyType = function () {
            console.log('selectedPropertyType: ' + $scope.db.selectedPropertyType);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbPropertyType.selectedPropertyType = $scope.db.selectedPropertyType;
            quotelookupsService.writePropertyType($scope.db.selectedPropertyType).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.property_type_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.property_type_name_valid = constantService.getMessage('property_type_name_valid');
                    } else {
                        $scope.dbPropertyType.refresh = true;
                        $scope.dbPropertyType.update = true;
                        $state.go('quotelookups.propertytype');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };
        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbPropertyType.selectedPropertyType.property_type_id);
            quotelookupsService.deletePropertyType($scope.dbPropertyType.selectedPropertyType.property_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbPropertyType.selectedPropertyType = $scope.db.selectedPropertyType;
                            $scope.dbPropertyType.refresh = true;
                            $state.go('quotelookups.propertytype');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('propertytypeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService,quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'purchase_type_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'purchase_type_name', display: 'Purchase Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbPurchaseType = coreService.getParentDB('quotelookups_purchasetype');
            if (coreService.getCurrentState() === 'quotelookups.purchasetype') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;                     
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getPurchaseTypes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedPurchaseType'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addpurchasetype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedPurchaseType'
                            $scope.db.selectedProfile.uisref = "quotelookups.addpurchasetype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_purchasetype');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addpurchasetype") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbPurchaseType = coreService.getParentDB('quotelookups_purchasetype');
                if ($scope.dbPurchaseType.hasOwnProperty('selectedPurchaseType') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {

                        if ($scope.dbPurchaseType.selectedPurchaseType !== null) {
                            /*  quotelookupsService.getpurchasetypeById($scope.dbPurchaseType.selectedPurchaseType.purchasetype_id).then(function (response) {
                             if (!response.data.hasOwnProperty('file')) {
                             console.log('purchasetype_id: ' + response.data.purchasetype_id);
                             console.log('response.data: ' + response.data);
                             $scope.db.selectedPurchaseType = response.data;
                             
                             } else {
                             coreService.resetAlert();
                             coreService.setAlert({type: 'exception', message: response.data});
                             }
                             }, function (response) {
                             coreService.resetAlert();
                             coreService.setAlert({type: 'exception', message: response.data});
                             });*/
                        }
                        else {
                            $scope.isNew = true;
                            var purchasetype = {
                                purchase_type_id: queues[1].data.success,
                                purchase_type_name: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedPurchaseType = purchasetype;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        $scope.savePurchaseType = function () {
            console.log('selectedPurchaseType: ' + $scope.db.selectedPurchaseType);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbPurchaseType.selectedPurchaseType = $scope.db.selectedPurchaseType;

            quotelookupsService.writePurchaseType($scope.db.selectedPurchaseType).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                     $scope.purchase_type_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.purchase_type_name_valid = constantService.getMessage('purchase_type_name_valid');
                    } else {
                        $scope.dbPurchaseType.update = true;
                        $scope.dbPurchaseType.refresh = true;
                        $state.go('quotelookups.purchasetype');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbPurchaseType.selectedPurchaseType.purchase_type_id);
            quotelookupsService.deletePurchaseType($scope.dbPurchaseType.selectedPurchaseType.purchase_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbPurchaseType.selectedPurchaseType = $scope.db.selectedPurchaseType;
                            $scope.dbPurchaseType.refresh = true;
                            $state.go('quotelookups.purchasetype');
                        } else {
                           coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('purchasetypeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, quotelookupsService, $filter, $q, hotkeys, $state, $timeout) {
        $scope.tabData = [
            /* {
             heading: "Contact Types"
             , route: "quotelookups.contacttype"
             }, */{
                heading: "Location Types"
                , route: "quotelookups.locationtype"
            }
           /* , {
                heading: "Properties Types"
                , route: "quotelookups.propertytype"
            }*/, {
                heading: "Building Codes"
                , route: "quotelookups.buildingcode"
            }, {
                heading: "Purchase Types"
                , route: "quotelookups.purchasetype"
            }, {
                heading: "Pricing Policies"
                , route: "quotelookups.pricingpolicy"
            }, {
                heading: "Pricing Types"
                , route: "quotelookups.pricingtype"
            }, {
                heading: "Units"
                , route: "quotelookups.unit"
            }, {
                heading: "Scopes"
                , route: "quotelookups.scope"
            }, {
                heading: "Territories"
                , route: "quotelookups.territory"
            }
        ]


        hotkeys.bindTo($scope).add({
            combo: 'alt+p'
            , description: 'go to Pricing Policies'
            , callback: function () {
                $state.go('quotelookups.pricingpolicy');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+i'
            , description: 'go to Pricing Types'
            , callback: function () {
                $state.go('quotelookups.pricingtype');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+r'
            , description: 'go to Purchase Types'
            , callback: function () {
                $state.go('quotelookups.purchasetype');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+c'
            , description: 'go to Contact Types'
            , callback: function () {
                $state.go('quotelookups.contacttype');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+l'
            , description: 'go to Location Types'
            , callback: function () {
                $state.go('quotelookups.locationtype');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+t'
            , description: 'go to Territories'
            , callback: function () {
                $state.go('quotelookups.territory');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+s'
            , description: 'go to Scopes'
            , callback: function () {
                $state.go('quotelookups.scope');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+u'
            , description: 'go to Units'
            , callback: function () {
                $state.go('quotelookups.unit');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+b'
            , description: 'go to Building Codes'
            , callback: function () {
                $state.go('quotelookups.buildingcode');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+b'
            , description: 'go to Properties Types'
            , callback: function () {
                $state.go('quotelookups.propertytype');
            }
        });

    };


    controller.$inject = ['$scope', 'coreService', 'quotelookupsService', '$filter', '$q', 'hotkeys', '$state', '$timeout'];
    angular.module('quotelookupsModule')
            .controller('quotelookupsController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'scope_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'scope_name', display: 'Scope', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbScope = coreService.getParentDB('quotelookups_scope');
            if (coreService.getCurrentState() === 'quotelookups.scope') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;                        
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getScopes(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedScope'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addscope";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedScope';
                            $scope.db.selectedProfile.uisref = "quotelookups.addscope";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);


        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_scope');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addscope") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbScope = coreService.getParentDB('quotelookups_scope');
                if ($scope.dbScope.hasOwnProperty('selectedScope') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {

                        if ($scope.dbScope.selectedScope !== null) {

                        }
                        else {
                            $scope.isNew = true;
                            var scope = {
                                scope_id: queues[1].data.success,
                                scope_name: '',
                                description: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedScope = scope;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.saveScopes = function () {
            console.log('selectedScope: ' + $scope.db.selectedScope);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbScope.selectedScope = $scope.db.selectedScope;
            $scope.dbScope.update = true;
            quotelookupsService.writeScope($scope.db.selectedScope).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.scope_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.scope_name_valid = constantService.getMessage('scope_name_valid');
                    } else {
                        $scope.dbScope.refresh = true;
                        $state.go('quotelookups.scope');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };


        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbScope.selectedScope.scope_id);
            quotelookupsService.deleteScope($scope.dbScope.selectedScope.scope_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbScope.selectedScope = $scope.db.selectedScope;
                            $scope.dbScope.refresh = true;
                            $state.go('quotelookups.scope');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('scopeController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = [];
        var fields = [
            {name: 'territory_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'territory_name', display: 'Territory', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'territory_address', display: 'Address', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'territory_phone', display: 'Phone', type: 'phone', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbTerritory = coreService.getParentDB('quotelookups_territory');
            if (coreService.getCurrentState() === 'quotelookups.territory') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getTerritories(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedTerritory'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addterritory";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedTerritory'
                            $scope.db.selectedProfile.uisref = "quotelookups.addterritory";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_territory');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addterritory") {
                $scope.db = newVal;
                $scope.phone_valid = constantService.getMessage('phone_valid');
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbTerritory = coreService.getParentDB('quotelookups_territory');
                if ($scope.dbTerritory.hasOwnProperty('selectedTerritory') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {

                        if ($scope.dbTerritory.selectedTerritory !== null) {

                        }
                        else {
                            $scope.isNew = true;
                            var territory = {
                                territory_id: queues[1].data.success,
                                territory_name: '',
                                territory_address: '',
                                territory_phone: '',
                                description: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedTerritory = territory;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.saveTerritories = function () {
            console.log('selectedTerritory: ' + $scope.db.selectedTerritory);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbTerritory.selectedTerritory = $scope.db.selectedTerritory;
            quotelookupsService.writeTerritory($scope.db.selectedTerritory).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.territory_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.territory_name_valid = constantService.getMessage('territory_name_valid');
                    } else {
                        $scope.dbTerritory.refresh = true;
                        $scope.dbTerritory.update = true;
                        $state.go('quotelookups.territory');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbTerritory.selectedTerritory.territory_id);
            quotelookupsService.deleteTerritory($scope.dbTerritory.selectedTerritory.territory_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbTerritory.selectedTerritory = $scope.db.selectedTerritory;
                            $scope.dbTerritory.refresh = true;
                            $state.go('quotelookups.territory');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('territoryController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotelookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'unit_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'unit_name', display: 'Unit Name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbunit = coreService.getParentDB('quotelookups_unit');
            if (coreService.getCurrentState() === 'quotelookups.unit') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $q.all([
                        quotelookupsService.getUnits(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedUnit'
                                    $scope.db.selectedProfile.uisref = "quotelookups.addunit";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedUnit'
                            $scope.db.selectedProfile.uisref = "quotelookups.addunit";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.$watch(function () {
            return coreService.getParentDB('quotelookups_unit');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "quotelookups.addunit") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbunit = coreService.getParentDB('quotelookups_unit');
                if ($scope.dbunit.hasOwnProperty('selectedUnit') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {

                        if ($scope.dbunit.selectedUnit !== null) {
                            /*  quotelookupsService.getunitById($scope.dbunit.selectedUnit.unit_id).then(function (response) {
                             if (!response.data.hasOwnProperty('file')) {
                             console.log('unit_id: ' + response.data.unit_id);
                             console.log('response.data: ' + response.data);
                             $scope.db.selectedUnit = response.data;
                             
                             } else {
                             coreService.resetAlert();
                             coreService.setAlert({type: 'exception', message: response.data});
                             }
                             }, function (response) {
                             coreService.resetAlert();
                             coreService.setAlert({type: 'exception', message: response.data});
                             });*/
                        }
                        else {
                            $scope.isNew = true;
                            var unit = {
                                unit_id: queues[1].data.success,
                                unit_name: '',
                                description: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedUnit = unit;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        $scope.saveUnit = function () {
            console.log('selectedUnit: ' + $scope.db.selectedUnit);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbunit.selectedUnit = $scope.db.selectedUnit;
            quotelookupsService.writeUnit($scope.db.selectedUnit).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.unit_name_valid = '';
                    if (response.data.success === 2) {
                        $scope.unit_name_valid = constantService.getMessage('unit_name_valid');
                    } else {
                        $scope.dbunit.refresh = true;
                        $scope.dbunit.update = true;
                        $state.go('quotelookups.unit');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbunit.selectedUnit.unit_id);
            quotelookupsService.deleteUnit($scope.dbunit.selectedUnit.unit_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbunit.selectedUnit = $scope.db.selectedUnit;
                            $scope.dbunit.refresh = true;
                            $state.go('quotelookups.unit');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotelookupsService', '$state', '$filter', '$q'];
    angular.module('quotelookupsModule')
            .controller('unitController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getPricingPolicies: function (post) {
                return $http.get(coreService.getApi() + 'pricingpolicy');
            },
            getPricingTypes: function (post) {
                return $http.get(coreService.getApi() + 'pricingtype');
            },
            writePricingPolicy: function (pricingpolicy) {
                return $http.post(coreService.getApi() + 'updatePricingPolicy', pricingpolicy);
            },
            getPricingPolicyById: function (pricing_policy_id) {
                return $http.get(coreService.getApi() + 'getPricingPolicyById/' + pricing_policy_id);
            },
            deletePricingPolicy: function (pricing_policy_id) {
                return $http.get(coreService.getApi() + 'deletePricingPolicy/' + pricing_policy_id);
            },
            getPurchaseTypes: function (post) {
                return $http.get(coreService.getApi() + 'purchasetype');
            },
            getContactTypes: function (post) {
                return $http.get(coreService.getApi() + 'contacttype');
            },
            getUnits: function (post) {
                return $http.get(coreService.getApi() + 'unit');
            },
            getLocationTypes: function (post) {
                return $http.get(coreService.getApi() + 'locationtype');
            },
            getTerritories: function (post) {
                return $http.get(coreService.getApi() + 'territory');
            },
            getScopes: function (post) {
                return $http.get(coreService.getApi() + 'scope');
            },
            getBuildingCode: function (post) {
                return $http.get(coreService.getApi() + 'buildingcode');
            },
            getPropertyTypes: function (post) {
                return $http.get(coreService.getApi() + 'propertytype');
            },
            deleteContactType: function (contact_type_id) {
                return $http.get(coreService.getApi() + 'deleteContactType/' + contact_type_id);
            },
            deleteLocationType: function (location_type_id) {
                return $http.get(coreService.getApi() + 'deleteLocationType/' + location_type_id);
            },
            deleteTerritory: function (territory_id) {
                return $http.get(coreService.getApi() + 'deleteTerritory/' + territory_id);
            },
            deleteBuildingCode: function (building_code_id) {
                return $http.get(coreService.getApi() + 'deleteBuildingCode/' + building_code_id);
            },
            deletePropertyType: function (property_type_id) {
                return $http.get(coreService.getApi() + 'deletePropertyType/' + property_type_id);
            },
            deletePurchaseType: function (purchase_type_id) {
                return $http.get(coreService.getApi() + 'deletePurchaseType/' + purchase_type_id);
            },
            deleteUnit: function (unit_id) {
                return $http.get(coreService.getApi() + 'deleteUnit/' + unit_id);
            },
            deleteScope: function (scope_id) {
                return $http.get(coreService.getApi() + 'deleteScope/' + scope_id);
            },
            deletePricingType: function (pricing_type_id) {
                return $http.get(coreService.getApi() + 'deletePricingType/' + pricing_type_id);
            },
            writeUnit: function (unit) {
                return $http.post(coreService.getApi() + 'updateUnit', unit);
            },
            writePurchaseType: function (purchasetype) {
                return $http.post(coreService.getApi() + 'updatePurchaseType', purchasetype);
            },
            getAllPurchaseTypes: function (post) {
                return $http.get(coreService.getApi() + 'getpurchasetypes');
            },
            getPricingTypeById: function (pricing_type_id) {
                return $http.get(coreService.getApi() + 'getPricingTypeById/' + pricing_type_id);
            },
            writePricingType: function (purchasetype) {
                return $http.post(coreService.getApi() + 'updatePricingType', purchasetype);
            },
            writeBuildingCode: function (buildingcode) {
                return $http.post(coreService.getApi() + 'updateBuildingCode', buildingcode);
            },
            writePropertyType: function (propertytype) {
                return $http.post(coreService.getApi() + 'updatePropertyType', propertytype);
            },
            writeLocationType: function (locationtype) {
                return $http.post(coreService.getApi() + 'updateLocationType', locationtype);
            },
            writeScope: function (scope) {
                return $http.post(coreService.getApi() + 'updateScope', scope);
            },
            writeTerritory: function (territory) {
                return $http.post(coreService.getApi() + 'updateTerritory', territory);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('quotelookupsModule')
            .factory('quotelookupsService', factory);
}());;(function () {
    var controller = function ($scope, $rootScope, coreService, constantService, quoteproductService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'pricing_policy_name', display: 'Policy', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'pricing_type_name', display: 'Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'price', display: 'Price', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
        var decimal = {};
        decimal.round = function (number, precision) {
            var factor = Math.pow(10, precision);
            var tempNumber = number * factor;
            var roundedTempNumber = Math.round(tempNumber);
            return roundedTempNumber / factor;
        };

        $scope.refresh = true;

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbProductPrices = coreService.getParentDB('quoteproduct_productprices');
            if (coreService.getCurrentState() === 'quoteproduct.productprices') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.selectedProductPrices !== null && angular.isDefined($scope.db.selectedProductPrices)) {
                        $scope.db.update = true;
                    }
                }
                if ($rootScope.oldProductId2 !== $scope.currentProduct.product_id || $scope.refresh) {
                    $scope.refresh = false;
                    $rootScope.oldProductId2 = $scope.currentProduct.product_id;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'quotelookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    var post = {
                        product_id: $scope.currentProduct.product_id
                    }
                    $q.all([
                        quoteproductService.getProductPrices(post),
                        coreService.getTableProfiles($scope.db.module),
                        quoteproductService.getPolicyList(),
                        quoteproductService.getPricingTypeList()
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        $scope.db.pricingpolicy = queues[2].data;
                        $scope.db.pricingtypes = queues[3].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedProductPrices'
                                    $scope.db.selectedProfile.uisref = "quoteproduct.productprices";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;

                                    $scope.db.selectedProfile.filters['product_id'] = $scope.currentProduct.product_id;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedProductPrices'
                            $scope.db.selectedProfile.uisref = "quoteproduct.productprices";
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters['product_id'] = $scope.currentProduct.product_id;
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }

                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                        coreService.setAlert({type: 'exception', message: errors[2].data});
                        coreService.setAlert({type: 'exception', message: errors[3].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.restPriceForm = function () {
            if ($scope.dbProductPrices.selectedProductPrices !== null && angular.isDefined($scope.dbProductPrices.selectedProductPrices)) {
                $scope.refresh = true;
                $state.go('quoteproduct.productprices');
                $scope.dbProductPrices.selectedProductPrices = {price: '', pricing_policy_id: '', pricing_type_id: ''};
            }
            $scope.db[$scope.db.selectedProfile.selected] = null;
            $scope.addPricing.price.$error.pattern = false;
            $scope.addPricing.price.$valid = true;
            $scope.addPricing.price.$error.required = false;
        }

        $scope.saveProductPrice = function () {
            if ($scope.db.selectedProductPrices !== null && angular.isDefined($scope.db.selectedProductPrices)) {
                console.log($scope.db.selectedProductPrices.id_for_view);
                if ($scope.db.selectedProductPrices.id_for_view === null || !angular.isDefined($scope.db.selectedProductPrices.id_for_view)) {
                    $scope.db.selectedProductPrices.id_for_view = '';
                }
                $scope.db.selectedProductPrices.product_id = $scope.currentProduct.product_id;
                $scope.db.selectedProductPrices.price = decimal.round($scope.db.selectedProductPrices.price, 4);
                $scope.dbProductPrices.selectedProductPrices = $scope.db.selectedProductPrices;

                quoteproductService.writeProductPrice($scope.dbProductPrices.selectedProductPrices).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.policy_price_valid = '';
                        if (response.data.success === '2' || response.data.success === 2) {
                            $scope.policy_price_valid = constantService.getMessage('policy_price_valid');
                        } else {
                            $scope.dbProductPrices.refresh = true;
                            $scope.dbProductPrices.selectedProductPrices = null;
                        }
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                });
            }
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            $scope.dbProductPrices.selectedProductPrices.product_id = $scope.currentProduct.product_id;
            quoteproductService.deleteProductPrice($scope.dbProductPrices.selectedProductPrices)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbProductPrices.selectedProductPrices = $scope.db.dbProductPrices;
                            $scope.dbProductPrices.refresh = true;
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };


        /*
         $scope.$watch(function () {
         return coreService.getDB();
         }, function (newVal) {
         $scope.dbProductPrices = coreService.getParentDB('quoteproduct_productprices');
         if (coreService.getCurrentState() === 'quoteproduct.productprices') {
         $scope.module = coreService.getCurrentState();
         if (newVal !== null && angular.isDefined(newVal)) {
         $scope.db = newVal;
         $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
         if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
         $scope.db.update = false;
         //console.log($scope.db.selectedProductPrices)
         quoteproductService.writeProductPrices($scope.db.selectedProductPrices).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         coreService.resetAlert();
         coreService.setAlert({type: 'wait', message: 'Refreshing Properties .. Please wait'})
         quoteproductService.getProductPrices().then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         coreService.resetAlert()
         $scope.db.items = response.data.items;
         $scope.db.count - response.data.count;
         $scope.db.currentPage = 1;
         }
         }, function (response) {
         coreService.resetAlert()
         coreService.setAlert({type: 'exception', message: response.data})
         });
         }
         }, function (response) {
         coreService.resetAlert()
         coreService.setAlert({type: 'exception', message: response.data})
         })
         
         }
         } else {
         coreService.resetAlert();
         coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'});
         $scope.db = {};
         $scope.db.module = $scope.module;
         $scope.db.deleteBtn = 'quoteproduct';
         $scope.db.small = true;
         $scope.db.profile = {};
         var post = {
         product_id: $scope.currentProduct.product_id
         }
         $q.all([
         quoteproductService.getProductPrices(post),
         coreService.getTableProfiles($scope.db.module)
         ]).then(function (queues) {
         coreService.resetAlert();
         $scope.db.profiles = queues[1].data;
         if (!$scope.db.profiles.length) {
         profile.module = $scope.db.module;
         profile.user_id = coreService.getUser().user_id;
         coreService.writeTableProfile(profile).then(function (response) {
         if (!response.data.hasOwnProperty('file')) {
         $scope.db.profiles = response.data;
         $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
         $scope.db.selectedProfile.selected = 'selectedProductPrices'
         $scope.db.selectedProfile.uisref = "quoteproduct.editproductprices";
         $scope.db.selectedProfile.filters = {};
         $scope.db.add = true;
         angular.forEach($scope.db.selectedProfile.fields, function (field) {
         if (field.hasOwnProperty('filter_filters')) {
         $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
         }
         })
         //console.log($scope.db.selectedProfile);
         angular.copy($scope.db.selectedProfile, $scope.db.profile);
         $scope.db.items = queues[0].data.items;
         $scope.db.count = queues[0].data.count;
         $scope.db.currentPage = 1;
         coreService.setDB($scope.db);
         } else {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         }
         }, function (response) {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: response.data});
         })
         } else {
         $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
         $scope.db.selectedProfile.selected = 'selectedProductPrices'
         $scope.db.selectedProfile.uisref = "quoteproduct.editproductprices";
         $scope.db.selectedProfile.filters = {};
         
         angular.forEach($scope.db.selectedProfile.fields, function (field) {
         if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
         $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
         }
         });
         angular.copy($scope.db.selectedProfile, $scope.db.profile);
         $scope.db.add = true;
         $scope.db.items = queues[0].data.items;
         $scope.db.count = queues[0].data.count;
         $scope.db.currentPage = 1;
         coreService.setDB($scope.db);
         }
         }, function (errors) {
         coreService.resetAlert();
         coreService.setAlert({type: 'exception', message: errors[0].data});
         coreService.setAlert({type: 'exception', message: errors[1].data});
         });
         }
         } else {
         return;
         }
         }, true);
         */
    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'constantService', 'quoteproductService', '$state', '$filter', '$q'];
    angular.module('quoteproductModule')
            .controller('productpricesController', controller);
}());;(function () {
    var controller = function ($scope, $rootScope, coreService, constantService, quoteproductService, $state, $filter, $q) {

        var items = []
        var fields = [
            {name: 'property_name', display: 'Property', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'the_value', display: 'Value', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
//        $scope.clear = false;
        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbProductProperties = coreService.getParentDB('quoteproduct_productproperties');
            if (coreService.getCurrentState() === 'quoteproduct.productproperties') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.selectedProductProperties !== null && angular.isDefined($scope.db.selectedProductProperties)) {

                        console.log('property_id:' + $scope.db.selectedProductProperties.property_id);
                        var post2 = {
                            property_id: $scope.db.selectedProductProperties.property_id,
                            product_type_id: $scope.currentProduct.product_type_id
                        }
                        quoteproductService.getPropertiesValues(post2).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                $scope.db.propertyvalues = response.data;
                            }
                        }, function (response) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        });
                        $scope.property_value_id = $scope.db.selectedProductProperties.property_value_id;
                    }
                }

                if ($rootScope.oldProductId !== $scope.currentProduct.product_id || $rootScope.oldproduct_type_id !== $scope.currentProduct.product_type_id) {
                    $rootScope.oldProductId = $scope.currentProduct.product_id;
                    $rootScope.oldproduct_type_id = $scope.currentProduct.product_type_id;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.clearValue = true;
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    var post = {
                        product_id: $scope.currentProduct.product_id,
                        product_type_id: $scope.currentProduct.product_type_id
                    }
                    $q.all([
                        quoteproductService.getProductPropertiesValues(post),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        $scope.db.propertyvalues = [];
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedProductProperties'
                                    $scope.db.selectedProfile.uisref = "quoteproduct.productproperties";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;

                                    // $scope.db.selectedProfile.filters['product_id'] = $scope.currentProduct.product_id;
                                    $scope.db.selectedProfile.filters['product_type_id'] = $scope.currentProduct.product_type_id;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedProductProperties'
                            $scope.db.selectedProfile.uisref = "quoteproduct.productproperties";
                            $scope.db.selectedProfile.filters = {};
                            $scope.db.selectedProfile.filters['product_type_id'] = $scope.currentProduct.product_type_id;
                            // $scope.db.selectedProfile.filters['product_id'] = $scope.currentProduct.product_id;
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        $scope.clearPropertyValue = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.db.selectedProductProperties.the_value);
            quoteproductService.clearProdctPropertyValue($scope.db.selectedProductProperties).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.db.selectedProductProperties.the_value = '';
                    $scope.db.selectedProductProperties.property_value_id = null;
                }
            }, function (error) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: error.data});
            });
        };

        $scope.editProductPropertyValue = function () {
            if ($scope.property_value_id !== '') {
                $scope.db.selectedProductProperties.property_value_id = $scope.property_value_id;
                quoteproductService.editProductPropertyValue($scope.db.selectedProductProperties).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.selectedProductProperties.the_value = $filter('filter')($scope.db.propertyvalues, {
                            property_value_id: $scope.property_value_id
                        })[0].the_value;
                    }
                }, function (error) {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: error.data});
                });
            }
        };
    };
    controller.$inject = ['$scope', '$rootScope', 'coreService', 'constantService', 'quoteproductService', '$state', '$filter', '$q'];
    angular.module('quoteproductModule')
            .controller('productpropertiesController', controller);
}());

;(function () {
    var controller = function ($scope, coreService, treeService, constantService, quoteproductService, $filter, $q, hotkeys, $state, $confirm) {

        var init = function () {
            $scope.productLabels = {};
            $scope.frmlabels = constantService.getproductFormLabels();
            angular.forEach($scope.frmlabels, function (value, key) {
                $scope.productLabels[key] = value;
            });
        };
        init();
        $scope.tabData = [
            {
                heading: $scope.productLabels.general //"General"
                , route: "quoteproduct.productdetails"
                , active: true

            }, {
                heading: "Properties"
                , route: "quoteproduct.productproperties"
                , active: false
            }, {
                heading: $scope.productLabels.price//"Prices"
                , route: "quoteproduct.productprices"
                , active: false
            }
        ]
        hotkeys.bindTo($scope).add({
            combo: 'alt+g'
            , description: $scope.productLabels.descgeneral//'go to General'
            , callback: function () {
                $state.go('quoteproduct.productdetails');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+p'
            , description: $scope.productLabels.descproperty//'go to Properties'
            , callback: function () {
                $state.go('quoteproduct.productproperties');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+r'
            , description: $scope.productLabels.descprice// 'go to Prices'
            , callback: function () {
                $state.go('quoteproduct.productprices');
            }
        });
        $scope.treeOptions = {
            nodeChildren: "children",
            dirSelectable: true,
            injectClasses: {
                ul: "a1",
                li: "a2",
                liSelected: "a7",
                iExpanded: "a3",
                iCollapsed: "a4",
                iLeaf: "a5",
                label: "a6",
                labelSelected: "a8"
            }
        };
        $scope.selected = false;
        $scope.newSibiling = null;
        $scope.searchString = '';
        $scope.product_counter = 0;

        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = newVal;
            if (coreService.getCurrentState() === "quoteproduct") {
                $scope.module = coreService.getCurrentState();
                coreService.setDB($scope.db);
                $scope.getProductsTree();
                $scope.number_valid = constantService.getMessage('number_valid');
                var postedData = {
                    search: ''
                };
                $q.all([
                    coreService.getUuid(),
                    quoteproductService.getProductUnit(),
                    quoteproductService.getAllProductType(),
                    quoteproductService.getAllProducts(postedData)
                ]).then(function (queues) {
                    $scope.isNew = true;
//                    var product = {
//                        product_id: queues[0].data.success,
//                        product_type_id: 0,
//                        unit_id: 0,
//                        product_code: '',
//                        product_name: '',
//                        quote_letter_product_name: '',
//                        is_displayed_inreports: 0,
//                        description: '',
//                        sort_order: 0,
//                        parent_id: 0
//                    }
                    $scope.producttypes = queues[2].data;
                    $scope.productunits = queues[1].data;
                    $scope.allproducts = queues[3].data;

                }, function (errors) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: errors[0].data});
                    coreService.setAlert({type: 'exception', message: errors[1].data});
                    coreService.setAlert({type: 'exception', message: errors[2].data});
                    coreService.setAlert({type: 'exception', message: errors[3].data});
                });
            }
        }, true);

        $scope.getProductsTree = function () {
            var data = {
                search: $scope.searchString
            };
            quoteproductService.getProducts(data)
                    .then(function (response) {
                        $state.go('quoteproduct.productdetails');
                        if (!response.data.hasOwnProperty('file')) {

                            $scope.products = response.data;
                            $scope.selectedNode = $scope.products[0];
                            $scope.currentProduct = $scope.products[0];
                            $scope.filterparentProducts();
                            $scope.currentProduct.selected = true;
                            $scope.selected = true;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        };

        $scope.clearSearch = function () {
            $scope.productSearch = "";
            $scope.productSearching();
            $scope.selected = null;
            $scope.newSibiling = null;
        };

        $scope.productSearching = function () {
            $scope.searchString = '';
            $scope.newChild = false;
            $scope.newSibiling = false;
            if ($scope.productSearch !== undefined) {
                $scope.searchString = "%" + $scope.productSearch + "%";
                $scope.getProductsTree();
            }
        };

        $scope.showSelected = function (node, parentNode) {
            $scope.selected = true;
            $scope.currentProduct = node;
            $scope.currentProduct.selected = true;
            $scope.parentProduct = parentNode;
            $scope.filterparentProducts();

            $state.go('quoteproduct.productdetails');
        };

        $scope.filterparentProducts = function () {
            console.log('currentProduct.product_id: ' + $scope.currentProduct.product_id);
            var postedData = {
                search: $scope.currentProduct.product_id
            };
            quoteproductService.getAllProducts(postedData)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.allproducts = response.data;
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.updateProduct = function () {
            var product = {
                product_id: $scope.currentProduct.product_id,
                product_type_id: $scope.currentProduct.product_type_id,
                unit_id: $scope.currentProduct.unit_id,
                product_code: $scope.currentProduct.product_code,
                product_name: $scope.currentProduct.product_name,
                quote_letter_product_name: $scope.currentProduct.quote_letter_product_name,
                is_displayed_inreports: $scope.currentProduct.is_displayed_inreports,
                description: $scope.currentProduct.description,
                sort_order: $scope.currentProduct.sort_order,
                parent_id: $scope.currentProduct.parent_id,
                is_visible: $scope.currentProduct.is_visible
            }
            quoteproductService.updateProduct(product)
                    .then(function (response) {
                        console.log(response.data.success);
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.product_name_valid = '';
                            if (response.data.success === 2) {
                                $scope.product_name_valid = constantService.getMessage('product_name_valid');
                            } else {
                                $scope.reloadTree();
//                                $scope.clearSearch();
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('update_product')});

                            }
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    });
        };

        $scope.deleteProduct = function () {
            if (!$scope.currentProduct.children.length) {
                quoteproductService.deleteProduct($scope.currentProduct.product_id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                console.log(response.data.success);
                                if (response.data.success === 1) {
                                    //$scope.clearSearch();
                                    $scope.reloadTree();
                                    //$scope.productunits.splice($scope.productunits.indexOf($scope.currentProduct), 1);
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'info', message: constantService.getMessage('deleteRecord')});
                                }
                            } else {
                                coreService.resetAlert();
                                var err = response.data.message;
                                if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                    coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                                } else {
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', error: error.data});
                        });
            }
            else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: constantService.getMessage('deleteChild_valid')});
            }
        };

        $scope.addNewSibling = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newSibiling = true;
                    $scope.product_counter += 1;
                    var product_type_id = '';
                    var unit_id = '';
                    if ($scope.currentProduct.parent_id) {
                        product_type_id = $scope.currentProduct.product_type_id;
                        unit_id = $scope.currentProduct.unit_id;
                    }
                    else {
                        product_type_id = $scope.producttypes[0].product_type_id;
                        unit_id = $scope.productunits[0].unit_id;
                    }

                    var sibling = {
                        parent_id: $scope.currentProduct.parent_id,
                        product_id: uuid,
                        product_name: "New Sibling" + $scope.product_counter,
                        quote_letter_product_name: "New Sibling" + $scope.product_counter,
                        sort_order: 0,
                        children: [],
                        description: "",
                        is_displayed_inreports: 0,
                        is_visible: 1,
                        product_code: "",
                        product_type_id: product_type_id,
                        unit_id: unit_id
                    };
                    if ($scope.parentProduct) {
                        $scope.parentProduct.children.push(sibling);
                        var index = $scope.parentProduct.children.length - 1;
                        $scope.selectedNode = $scope.parentProduct.children[index];
                    } else {
                        $scope.products.push(sibling);
                        $scope.selectedNode = $scope.products[$scope.products.length - 1];
                    }
                    $scope.currentProduct = sibling;
                    $scope.currentProduct.selected = true;
                    $scope.filterparentProducts();
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.addNewChild = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success;
                    $scope.newChild = true;
                    $scope.product_counter += 1;
                    var child = {
                        parent_id: $scope.currentProduct.product_id,
                        product_id: uuid,
                        product_name: "New Child" + $scope.product_counter,
                        quote_letter_product_name: "New Child" + $scope.product_counter,
                        sort_order: 0,
                        children: [],
                        description: "",
                        is_displayed_inreports: 0,
                        is_visible: 1,
                        product_code: "",
                        product_type_id: $scope.currentProduct.product_type_id,
                        unit_id: $scope.currentProduct.unit_id
                    };
                    if (!$scope.currentProduct.children) {
                        $scope.currentProduct.children = [];
                    }
                    $scope.currentProduct.children.push(child);

                    var index = $scope.currentProduct.children.length - 1;
                    $scope.selectedNode = $scope.currentProduct.children[index];
                    $scope.currentProduct = child;
                    $scope.currentProduct.selected = true;
                    $scope.filterparentProducts();

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }

        $scope.reloadTree = function () {
//            $state.go('quoteproduct');
            $scope.productSearch = "";
            $scope.selected = true;
            $scope.newSibiling = null;


//            $state.go("quoteproduct").then(function () {
//                $state.go("quoteproduct.productdetails");
//                //var index= $scope.products.indexOf($scope.currentProduct);
////                console.log(index);
//                $scope.selectedNode = $scope.products[0];
//                        //$scope.products[0];
//                $scope.currentProduct = $scope.products[0];
//            });

            //$scope.clearSearch();
//            $scope.currentProduct.selected = true;
            $state.transitionTo('quoteproduct', null, {'reload': true, inherit: false, notify: true});
            //  $state.forceReload();
//            $state.go('quoteproduct.productproperties');
//            $scope.getProductsTree();
//            $scope.selectedNode = $scope.products[0];
//            $scope.currentProduct = $scope.products[0];
        };

        $scope.validProductType = function (newValue, oldValue) {
            $scope.product_type_id = $scope.currentProduct.product_type_id;
            $confirm({
                text: constantService.getMessage('changeproducttype'),
                title: 'Changing product type',
                cancel: 'No',
                ok: "Yes, I'm sure"
            }).then(function () {

            }, function () {
//                console.log('No');
                $scope.currentProduct.product_type_id = oldValue;
            });

        }


        /*
         $scope.getToggled = function (node, expanded, parent) {
         if (expanded) {
         treeService.getSelectedParents($scope.products, node, $scope.module).then(function (response) {
         $scope.currentProduct.parents = response
         })
         }
         }*/

    };
    controller.$inject = ['$scope', 'coreService', 'treeService', 'constantService', 'quoteproductService', '$filter', '$q', 'hotkeys', '$state', '$confirm'];
    angular.module('quoteproductModule')
            .controller('quoteproductController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            writeProductProperties: function (properties) {
                return $http.post(coreService.getApi() + 'updateProductProperties', properties);
            },
            getProductPrices: function (post) {
                return $http.post(coreService.getApi() + 'productprices', post);
            },
            writeProductPrices: function (properties) {
                return $http.post(coreService.getApi() + 'updateProductPrices', properties);
            },
            getProducts: function (searchquery) {
                return $http.post(coreService.getApi() + 'products', searchquery);
            },
            getAllProducts: function (post) {
                return $http.post(coreService.getApi() + 'allproducts', post);
            },
            getProductUnit: function (post) {
                return $http.get(coreService.getApi() + 'productunit');
            },
            getAllProductType: function (post) {
                return $http.get(coreService.getApi() + 'allproducttype');
            },
            deleteProduct: function (product_id) {
                return $http.get(coreService.getApi() + "deleteproduct/" + product_id);
            },
            updateProduct: function (product) {
                return $http.post(coreService.getApi() + 'updateProduct', product);
            },
            getProductPropertiesValues: function (post) {
                return $http.post(coreService.getApi() + 'productproperties', post)
            },
            getPropertiesValues: function (post) {
                return $http.post(coreService.getApi() + 'propertyValues', post)
            },
            clearProdctPropertyValue: function (property) {
                return $http.post(coreService.getApi() + 'clearProdctPropertyValue', property);
            },
            editProductPropertyValue: function (property) {
                return $http.post(coreService.getApi() + 'editProductPropertyValue', property);
            },
            getPricingTypeList: function (product) {
                return $http.get(coreService.getApi() + 'productpriceslist', product);
            },
            getPolicyList: function (product) {
                return $http.get(coreService.getApi() + 'pricingpolicylist', product);
            },
            writeProductPrice: function (product) {
                return $http.post(coreService.getApi() + 'updateProductPrice', product);
            },
            deleteProductPrice: function (product) {
                return $http.post(coreService.getApi() + 'deleteProductPrice', product);
            }

        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('quoteproductModule')
            .factory('quoteproductService', factory);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotepropertyService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'property_type_name', display: 'Property Type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1,
                filter_type: 'select', filter_source: 'propertytypes', filter_id: 'property_type_id', filter_name: 'property_type_name', filter_default: 0},
            {name: 'property_name', display: 'Property Name', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'the_value', display: 'Values', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}

        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'quoteproperty') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                        quotepropertyService.writeQuoteProperty($scope.db.selectedProperty).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                                quotepropertyService.getProperties().then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                        coreService.resetAlert();
                                        $scope.db.items = response.data.items;
                                        $scope.db.count - response.data.count;
                                        $scope.db.currentPage = 1;
                                    }
                                }, function (response) {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data})
                                });
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        });
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')})
                    $scope.db = {};
                    $scope.db.deleteBtn = 'quoteproperty';
                    $scope.db.module = $scope.module;
                    $scope.db.profile = {};
                    $q.all([
                        quotepropertyService.getProperties(),
                        coreService.getTableProfiles($scope.db.module),
                        quotepropertyService.getPropertyType()
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedProperty'
                                    $scope.db.selectedProfile.uisref = "addProperty"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.propertytypes = queues[2].data
                                    $scope.db.selectedProfile.filters.propertytypes.unshift({property_type_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    $scope.db.add = true
                                    console.log($scope.db.selectedProfile)
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                            $scope.db.selectedProfile.selected = 'selectedProperty'
                            $scope.db.selectedProfile.uisref = "addProperty";
                            $scope.db.selectedProfile.filters = {}
                            $scope.db.selectedProfile.filters.propertytypes = queues[2].data
                            $scope.db.selectedProfile.filters.propertytypes.unshift({property_type_name: 'All'});
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                }
                            })
                            console.log($scope.db.selectedProfile)
                            angular.copy($scope.db.selectedProfile, $scope.db.profile)
                            $scope.db.add = true
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                        coreService.setAlert({type: 'exception', message: errors[2].data})
                    })
                }
            } else {
                return;
            }
        }, true);

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.db.selectedProperty.property_id);
            quotepropertyService.deleteProperty($scope.db.selectedProperty.property_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.db.selectedProperty = $scope.db.selectedProperty;
                            $scope.db.refresh = true;
                            $state.go('quoteproperty');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotepropertyService', '$state', '$filter', '$q'];
    angular.module('quotepropertyModule')
            .controller('quotepropertyController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getProperties: function () {
                return $http.get(coreService.getApi() + 'property');
            },
            getPropertyType: function () {
                return $http.get(coreService.getApi() + 'propertytypelist');
            },
            deleteProperty: function (property_id) {
                return $http.get(coreService.getApi() + 'deleteProperty/' + property_id);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('quotepropertyModule')
            .factory('quotepropertyService', factory);
}());;(function () {
    var controller = function ($scope, coreService, constantService, quotepropertypreviewService, $filter, $q, $state, $confirm) {


        $scope.$watch(function () {
            return coreService.getParentDB('quoteproperty');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "addProperty") {
                $scope.db = newVal;
                $scope.dbproperty = coreService.getParentDB('quoteproperty');

                if ($scope.db.hasOwnProperty('selectedProperty') && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    if ($scope.db.selectedProperty !== null) {
                        $scope.property_id = $scope.db.selectedProperty.property_id;
                    }

                    var postedData = {
                        search: '',
                        property_id: $scope.property_id
                    };

                    $q.all([
                        quotepropertypreviewService.getPropertyType(),
                        quotepropertypreviewService.getPropertyValues(postedData)
                    ]).then(function (queues) {
                        $scope.propertytypes = queues[0].data;
                        $scope.propertyvaluelist = queues[1].data;
                        $scope.disabled_property_type = constantService.getMessage('disabled_property_type');
                        $scope.decimal_valid = constantService.getMessage('decimal_valid');
                        $scope.number_valid = constantService.getMessage('number_valid');
                        $scope.propertyValuedeleted = [];
                        $scope.propertyValueadded = [];
                        $scope.propertyValueedited = [];
                        $scope.usedPropertyValues = [];

                        if ($scope.db.selectedProperty !== null) {
                            $scope.db.valid = false;
                            $scope.property_type_id = $scope.db.selectedProperty.property_type_id;
                            $scope.db.selectedProperty.propertytypes = queues[0].data;
                            $scope.validPropertyType($scope.db.selectedProperty.property_id);
                            $scope.getUsedPropertyValues($scope.db.selectedProperty.property_id);
                            $scope.propertytype = $filter('filter')($scope.propertytypes, {
                                property_type_id: $scope.property_type_id
                            })[0].property_type_name;
                            $scope.db.selectedProperty.the_value = $scope.propertytype === 'Boolean' ? 0 : '';
                        } else {
                            $scope.db.isNew = true;
                            $scope.db.property_type_valid = false;
                            coreService.getUuid().then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    var uuid = response.data.success;
                                    var property = {
                                        property_id: uuid,
                                        property_name: '',
                                        propertytypes: $scope.propertytypes,
                                        property_type_id: $scope.propertytypes[0].property_type_id,
                                        property_type_name: $scope.propertytypes[0].property_type_name
                                    }
                                    $scope.propertytype = $scope.propertytypes[0].property_type_name;
                                    $scope.db.selectedProperty = property;
                                    $scope.db.selectedProperty.the_value = $scope.propertytype === 'Boolean' ? 0 : '';
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            });
                        }
                    }, function (errors) {

                    });
                } else {
                    return;
                }
            }
        }, true);

        $scope.saveQuoteProperty = function () {
            $scope.db.selectedProperty = $scope.db.selectedProperty;
            $scope.db.selectedProperty.propertyValueedited = $scope.propertyValueedited;
            $scope.db.selectedProperty.propertyValuedeleted = $scope.propertyValuedeleted;
            $scope.db.selectedProperty.propertyValueadded = $scope.propertyValueadded;

            console.log('$scope.propertyValuedeleted.length : ' + $scope.propertyValuedeleted.length);
            if ($scope.propertyValuedeleted.length > 0) {
                $confirm({
                    text: constantService.getMessage('deletepropertyvalues'),
                    title: 'Delete property values',
                    cancel: 'No',
                    ok: "Yes, I'm sure"
                }).then(function () {
                    $scope.updateProperty();
                });
            }
            else {
                $scope.updateProperty();
            }
        };

        $scope.updateProperty = function () {
            quotepropertypreviewService.writeQuoteProperty($scope.db.selectedProperty).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.property_name_valid = '';
                    console.log('response.data.success: ' + response.data.success);
                    if (response.data.success === 2) {
                        $scope.property_name_valid = constantService.getMessage('property_name_valid');
                    } else {
                        $scope.restForm();
                        $scope.dbproperty.refresh = true;
                        $state.go('quoteproperty');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deletePropertyValues = function (property_id) {
            quotepropertypreviewService.deletePropertyValues(property_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.restForm();
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        }

        $scope.validPropertyValues = function () {
            $scope.propertytype = $filter('filter')($scope.propertytypes, {
                property_type_id: $scope.db.selectedProperty.property_type_id
            })[0].property_type_name;
            console.log('$scope.propertytype : ' + $scope.propertytype);
            $scope.db.selectedProperty.the_value = $scope.propertytype === 'Boolean' ? 0 : '';
            $scope.selected = false;
            if (!$scope.db.valid && !$scope.db.isNew) {
                switch ($scope.db.property_values_valid) {
                    case '2':
                        $scope.db.property_type_valid = true;
                        break;
                    case '1':
                        $confirm({
                            text: constantService.getMessage('changepropertytype'),
                            title: 'Delete property values',
                            cancel: 'No',
                            ok: "Yes, I'm sure"
                        }).then(function () {
                            $scope.db.valid = true;
                            $scope.selected = false;
                            $scope.deletePropertyValues($scope.db.selectedProperty.property_id);
                        }, function () {
                            console.log('No');
                            $scope.db.selectedProperty.property_type_id = $scope.property_type_id;
                            $scope.propertytype = $filter('filter')($scope.propertytypes, {
                                property_type_id: $scope.property_type_id
                            })[0].property_type_name;

                        });
                        return false;
                        break;
                    case '0':
                        if ($scope.propertyvaluelist.length > 0) {
                            $confirm({
                                text: constantService.getMessage('changepropertytype'),
                                title: 'Delete property values',
                                cancel: 'No',
                                ok: "Yes, I'm sure"
                            }).then(function () {
                                $scope.selected = false;
                                $scope.restForm();
                            }, function () {
                                $scope.db.selectedProperty.property_type_id = $scope.property_type_id;
                                $scope.propertytype = $filter('filter')($scope.propertytypes, {
                                    property_type_id: $scope.property_type_id
                                })[0].property_type_name;
                            });
                            return false;
                        }
                        break;
                }
            } else {
                if ($scope.propertyvaluelist.length > 0) {
                    $confirm({
                        text: constantService.getMessage('changepropertytype'),
                        title: 'Delete property values',
                        cancel: 'No',
                        ok: "Yes, I'm sure"
                    }).then(function () {
                        $scope.restForm();
                    }, function () {
                        $scope.db.selectedProperty.property_type_id = $scope.property_type_id;
                        $scope.propertytype = $filter('filter')($scope.propertytypes, {
                            property_type_id: $scope.property_type_id
                        })[0].property_type_name;
                    });
                    return false;
                }
            }

        }

        $scope.restForm = function () {
            $scope.propertyValuedeleted = [];
            $scope.propertyValueadded = [];
            $scope.propertyValueedited = [];
            $scope.propertyvaluelist.splice(0);
        }

        $scope.validPropertyType = function (property_id) {
            quotepropertypreviewService.checkPropertyType(property_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.disabled_property_type = '';
                            $scope.db.property_type_valid = false;
                            $scope.hidedelete = false;

                            $scope.db.property_values_valid = response.data;
                            if (response.data == 2 || response.data == '2') {
                                $scope.disabled_property_type = constantService.getMessage('disabled_property_type');
                                $scope.db.property_type_valid = true;
                                $scope.hidedelete = true;
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        }

        $scope.getUsedPropertyValues = function (property_id) {
            quotepropertypreviewService.getUsedPropertyValues(property_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.usedPropertyValues = response.data;
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data});
                    });
        }

        $scope.removeAllItems = function () {
            $scope.found = false;
            $scope.removeArray = [];
            angular.forEach($scope.propertyvaluelist, function (item, i) {
                $scope.delete = true;
                if (item.property_value_id !== '' && $scope.hidedelete) {
                    angular.forEach($scope.usedPropertyValues, function (v, x) {
                        if (v.property_value_id === item.property_value_id) {
                            $scope.found = true;
                            $scope.delete = false;
                        }
                    });
                }
                if ($scope.delete) {
                    $scope.removeArray.push(item);
                    $scope.propertyValuedeleted.push(item);
                    angular.forEach($scope.propertyValueadded, function (node, x) {
                        if (item.the_value == node.the_value) {
                            $scope.propertyValueadded.splice(x, 1);
                        }
                    });
                }
            });
            angular.forEach($scope.removeArray, function (node) {
                $scope.propertyvaluelist.splice($scope.propertyvaluelist.indexOf(node), 1);
            });
            if ($scope.found) {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotremoveallPropertyValues')});
            }
        }

        $scope.addPropertyValue = function () {
            if (!angular.isDefined($scope.db.selectedProperty.the_value) || $scope.db.selectedProperty.the_value === '' || $('#decimal_valid').is(':visible') || $('#number_valid').is(':visible')) {
            }
            else {
                $scope.found = false;
                $scope.the_value_valid = '';
                angular.forEach($scope.propertyvaluelist, function (item) {
                    if (item.the_value == $scope.db.selectedProperty.the_value) {
                        $scope.found = true;
                    }
                });
                if (!$scope.found) {
                    var value = {
                        the_value: $scope.db.selectedProperty.the_value,
                        property_value_id: ''
                    };
                    $scope.propertyvaluelist.push(value);
                    $scope.propertyValueadded.push(value);
                    $scope.db.selectedProperty.the_value = $scope.propertytype === 'Boolean' ? 0 : '';
                }
                else {
                    $scope.the_value_valid = constantService.getMessage('the_value_valid');
                }
            }
        };

        $scope.deleteValue = function (node, i) {
            $scope.found = false;
            console.log('$scope.usedPropertyValues: ' + $scope.usedPropertyValues.length);
            if (node.property_value_id !== '' && $scope.hidedelete) {
                angular.forEach($scope.usedPropertyValues, function (v, x) {
                    if (v.property_value_id == node.property_value_id) {
                        $scope.found = true;
                    }
                });
            }
            if (!$scope.found) {
                $scope.propertyValuedeleted.push(node);
                $scope.propertyvaluelist.splice(i, 1);
                angular.forEach($scope.propertyValueadded, function (item, x) {
                    if (item.the_value == node.the_value) {
                        $scope.propertyValueadded.splice(x, 1);
                    }
                });
            } else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeletePropertyValue')});
            }
        };

        $scope.editValue = function (node, i) {
            $scope.selected = true;
            $scope.selectednode = node;
            $scope.index = i;
            $scope.db.selectedProperty.the_value = node.the_value;
        };

        $scope.editpropertyvaluelist = function () {
            if ($scope.db.selectedProperty.the_value === '' || $('#decimal_valid').is(':visible') || $('#number_valid').is(':visible')) {
            }
            else {
                if ($scope.propertyvaluelist.length > 0) {
                    $scope.the_value_valid = '';
                    $scope.found = false;
                    angular.forEach($scope.propertyvaluelist, function (item, i) {
                        if (item.the_value == $scope.db.selectedProperty.the_value && item !== $scope.selectednode) {
                            $scope.found = true;
                        }
                    });
                    if (!$scope.found) {
                        var value = {
                            the_value: $scope.db.selectedProperty.the_value,
                            property_value_id: $scope.propertyvaluelist[$scope.index].property_value_id
                        };
                        if ($scope.propertyvaluelist[$scope.index].property_value_id !== '') {
                            $scope.propertyValueedited.push(value);
                        } else {
                            angular.forEach($scope.propertyValueadded, function (item, x) {
                                if (item.the_value == $scope.selectednode.the_value) {
                                    $scope.propertyValueadded[x] = value;
                                }
                            });
                        }
                        $scope.propertyvaluelist[$scope.index] = value;
                        $scope.db.selectedProperty.the_value = $scope.propertytype === 'Boolean' ? 0 : '';
                        $scope.selected = false;
                    }
                    else {
                        $scope.the_value_valid = constantService.getMessage('the_value_valid');
                    }
                }
            }
        }
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'quotepropertypreviewService', '$filter', '$q', '$state', '$confirm'];
    angular.module('quotepropertypreviewModule')
            .controller('quotepropertypreviewController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getPropertyType: function () {
                return $http.get(coreService.getApi() + 'propertytypelist');
            },
//            getPropertyValues: function (property_id) {
//                return $http.get(coreService.getApi() + 'propertyvalues/' + property_id);
//            },
//            writePropertyValue: function (value) {
//                return $http.post(coreService.getApi() + 'updatePropertyValue', value);
//            },
            getUsedPropertyValues: function (property_id) {
                return $http.get(coreService.getApi() + 'getUsedPropertyValues/' + property_id);
            },
            checkPropertyType: function (property_id) {
                return $http.get(coreService.getApi() + 'checkPropertyType/' + property_id);
            },
            writeQuoteProperty: function (property) {
                return $http.post(coreService.getApi() + 'updateProperty', property);
            },
            deletePropertyValues: function (property_id) {
                return $http.get(coreService.getApi() + 'deletePropertyValues/' + property_id);
            },
            getPropertyValues: function (postedData) {
                return $http.post(coreService.getApi() + 'getPropertyValues', postedData);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('quotepropertypreviewModule')
            .factory('quotepropertypreviewService', factory);
}());;(function () {
    var controller = function ($scope, coreService, repoService, $filter, $uibModal) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "repo") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    //console.log($scope.db)
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {
                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions
                        if ($scope.db.tree.parents.length > 1) {
                            if (!$scope.privileges.reporeadonly) {
                                if ($scope.db.tree.parents[1].name !== "Links") {
                                    $scope.db.upload = {
                                        showUpload: true,
                                        acceptedFiles: ".pdf,.docx,.xlsx,.dwfx,.dwg,.jpeg,.png",
                                        multiple: true,
                                        uploadMessage: "Drop PDF, Word, Excel, DWFX, DWG, JPG or PNG files here to upload",
                                        doneUpload: false
                                    }
                                } else {
                                    if ($scope.privileges.repolistupload || $scope.privileges.repoadmin) {
                                        $scope.db.upload = {
                                            showUpload: true,
                                            acceptedFiles: ".pdf",
                                            multiple: true,
                                            uploadMessage: "Drop PDF files here to upload",
                                            doneUpload: false
                                        }
                                    }
                                }
                            }
                        }
                        if ($scope.db.tree.parents.length > 2) {
                            getFiles()
                        } else {
                            $scope.db.filelist = []
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }

                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    getTree()
                }

            }
        }, true)

        var setMenuOptions = function () {
            var del = $scope.db.tree.selectedNode.delete
            var name = $scope.db.tree.selectedNode.name
            var parents = $scope.db.tree.parents.length
            var parent = $scope.db.tree.parents.length > 1 ? $scope.db.tree.parents[1] : null
            switch (del) {
                case 0:
                {
                    if (name === "Customers") {
                        $scope.menuOptions = [
                            ['New customer', function ($itemScope) {
                                    newFolder()
                                }]
                        ]
                    } else if (name !== 'Root') {
                        $scope.menuOptions = [
                            ['New folder', function ($itemScope) {
                                    newFolder()
                                }]
                        ]
                    }
                    break;
                }
                case 1:
                {
                    if (parent !== null && (parent.name === "Customers" || parent.name === "Engineering")) {
                        if (parents == 3 && parent.name === "Customers") {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder()
                                    }], null,
                                ['Remove customer', function ($itemScope) {
                                        deleteFolder()
                                    }], null,
                                ['Send email', function ($itemScope) {
                                        sendEmail()
                                    }]
                            ]
                        } else if (parents == 3 && parent.name === "Engineering") {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder()
                                    }], null,
                                ['Remove folder', function ($itemScope) {
                                        deleteFolder()
                                    }], null,
                                ['Send email', function ($itemScope) {
                                        sendEmail()
                                    }]
                            ]
                        } else {
                            console.log($scope.user)
                            var primary_group = $filter('filter')($scope.user.groups,{is_primary:1})[0].group_name;
                            console.log(primary_group);
                            if (parent.name === "Engineering" && (primary_group === 'Execs' || primary_group === 'T0')) {
                                var children = [];
                                angular.forEach(parent.children, function(child){
                                    if(child.id !== $scope.db.tree.selectedNode.parentid)
                                    children.push([child.name, function($itemScope){
                                        moveFolder(child.id);
                                    }]);
                                });
                                console.log(children);
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder()
                                    }], null,
                                ["Move folder to",children], null,
                                ['Delete folder', function ($itemScope) {
                                        deleteFolder()
                                    }]
                            ]
                            } else {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder()
                                    }], null,
                                ['Delete folder', function ($itemScope) {
                                        deleteFolder()
                                    }]
                            ]
                            }
                        }
                    } else if (parent !== null && parent.name !== "Customers" && parent.name !== "Engineering") {
                        $scope.menuOptions = [
                            ['New folder', function ($itemScope) {
                                    newFolder()
                                }], null,
                            ['Delete folder', function ($itemScope) {
                                    deleteFolder()
                                }]
                        ]
                    }
                    break;
                }
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/repoModule/views/newfolder.html',
                controller: 'RepoFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    parents: function () {
                        return $scope.db.tree.parents
                    },
                    op: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var deleteFolder = function () {
            if ($scope.db.tree.selectedNode.hasFiles) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder contains files, Please remove these files first'
                })
                return
            }
            if ($scope.db.tree.selectedNode.children.length) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder has children, Please remove the children first and try again'
                })
                return
            }
            repoService.deleteFolder($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) { $scope.db.tree.parents.splice($scope.db.tree.parents.indexOf($scope.db.tree.selectedNode), 1);
                    console.log($scope.db.tree.parents)
                    getTree()
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/repoModule/views/newfolder.html',
                controller: 'RepoFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var getTree = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Getting Repo tree .. Please wait'
            })
            repoService.getRepoRoot()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var treedata = response.data
                            coreService.resetAlert()
                            var selectedNode;
                            var parents = []
                            if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                                parents.push(treedata[0]);
                                angular.forEach($scope.db.tree.parents, function ($value, $key) {
                                    if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                        parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                                    if ($key === $scope.db.tree.parents.length - 1) {
                                        if (angular.isDefined(parents[parents.length - 1]))
                                            selectedNode = parents[parents.length - 1]; // in case of create new folder
                                        else
                                            selectedNode = parents[parents.length - 2]; // in case of delete folder
                                    }
                                })
                                console.log(parents)
                                console.log($scope.db.tree)
                            }
                            $scope.db.tree = {
                                treedata: treedata,
                                selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                                parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Fetching files .. Please wait'
            })
            repoService.getRepoFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                user: $scope.user,
                db: $scope.module,
                node: $scope.db.tree.selectedNode,
                filenames: $scope.filenames,
                parents: []
            }
            $scope.db.files.data = data
        }

        var sendEmail = function () {
            repoService.getCustomerLogin($scope.db.tree.selectedNode.id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var customerAuthNo = response.data[0].customerauth_number
                            var customerAuthPass = response.data[0].customerauth_password
                            var body = "<p><strong>Login information</strong><p>" +
                                    "<p><strong>Login name:</strong> " + customerAuthNo + "</p>" +
                                    "<p><strong>Password:</strong> " + customerAuthPass + "</p>" +
                                    '<p><strong>Url:</strong> <a href="https://webapps.sprung.com">https://webapps.sprung.com</a></p>'
                            var email = {
                                subject: 'Sprung Customer Portal',
                                body: body,
                                attachments: []
                            }
                            $scope.db.email = email
                            var uibModal = $uibModal.open({
                                animation: true,
                                templateUrl: 'app/emailModule/views/email.html',
                                controller: 'EmailController',
                                size: 'lg'
                            })
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })

        }
        var moveFolder = function(parent_id){
//            console.log($itemScope);
            console.log($scope.db.tree.selectedNode);
            repoService.moveFolder({
                parent_id: parent_id,
                file_id: $scope.db.tree.selectedNode.id
            }).then(function(response){
                if(response.data.success){
                    coreService.resetAlert();
                    coreService.setAlert({type:'success',message:"Folder has been moved successfully"});
                    getTree();
                }
            }, function(error){
                coreService.resetAlert();
                coreService.setAlert({type:'exception',message:error.data});
            });
        }
    }

    controller.$inject = ['$scope', 'coreService', 'repoService', '$filter', '$uibModal']
    angular.module('repoModule')
            .controller('RepoController', controller)
}());(function () {
    var controller = function ($scope, node, parents, op, coreService, $uibModalInstance, $filter, repoService) {
        $scope.node = node
        $scope.op = op
        $scope.parents = parents
        $scope.foldername = ''
        console.log($scope.parents)
        $scope.addFolder = function () {
            if ($scope.foldername !== '') {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'error',
                        message: 'folder name contains illegal characters\nOnly alphanumeric and spaces all allowed'
                    })
                    return
                }
                var folder = {
                    name: $scope.foldername
                }
                if ($filter('lowerCaseCompare')($scope.node.children, folder, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'error',
                        message: 'A folder with the same name exists under the same folder'
                    })
                    return
                }

                if (op === 'add') {
                    var post = {
                        parent: $scope.node.id,
                        parents: $scope.parents,
                        name: $scope.foldername,
                        userid: coreService.getUser().user_id
                    }
                    repoService.addFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
                } else {
                    var post = {
                        nodeid: $scope.node.id,
                        name: $scope.foldername
                    }
                    hrService.renameFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
                }
            }
        }
        $scope.cancel = function () {
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'parents', 'op', 'coreService', '$uibModalInstance', '$filter', 'repoService']
    angular.module('repoModule')
        .controller('RepoFolderController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getRepoRoot: function () {
                return $http.get(coreService.getApi() + 'reporoot/' + coreService.getPrivileges().primary);
            }
            , getRepoFiles: function (node) {
                return $http.get(coreService.getApi() + 'repofiles/' + node.id);
            }
            , addFolder: function (post) {
                return $http.post(coreService.getApi() + 'repofolder', post)
            }
            , deleteFolder: function (folderid) {
                return $http.delete(coreService.getApi() + 'repofolder/' + folderid)
            }
            , renameFolder: function (post) {
                return $http.put(coreService.getApi() + 'repofolder', post)
            },
            getCustomerLogin: function(folderid){
                return $http.get(coreService.getApi()+ 'repocustomerlogin/'+folderid)
            }
            , moveFolder: function (data) {
                return $http.post(coreService.getApi() + 'repomovefolder' , data)
            }
        }
    }
    factory.$inject = ["$http", "coreService"]
    angular.module("repoModule")
        .factory("repoService", factory)
}());(function () {
    var controller = function ($scope, repocustomerService, coreService) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "repocustomer") {
                $scope.module = coreService.getCurrentState()

                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    console.log($scope.db)
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {
                        $scope.selected = $scope.db.tree.selectedNode
                            //setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions

                        if ($scope.db.tree.parents.length > 1) {
                            $scope.db.upload = {
                                showUpload: true,
                                acceptedFiles: ".pdf,.docx,.xlsx",
                                multiple: true,
                                uploadMessage: "Drop PDF, Word or Excel files here to upload",
                                doneUpload: false
                            }
                            getFiles()
                        } else {
                            $scope.db.filelist = []
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }

                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        console.log("will process upload");
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }
                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    $scope.id = coreService.getCurrentParams().id
                    getTree()
                }
            }
        }, true)
        var getTree = function () {
            repocustomerService.getRepoCustomerRoots($scope.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var treedata = response.data
                    coreService.resetAlert()

                    $scope.db.tree = {
                        treedata: response.data,
                        selectedNode: treedata[0].children[0],
                        parents: [treedata[0], treedata[0].children[0]]
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Fetching files .. Please wait'
            })
            repocustomerService.getRepoFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                db: $scope.module,
                node: $scope.db.tree.selectedNode,
                filenames: $scope.filenames,
                parents: []
            }
            $scope.db.files.data = data
        }
    }
    controller.$inject = ["$scope", "repocustomerService", "coreService"]
    angular.module("repocustomerModule")
        .controller("RepocustomerController", controller)
}());(function(){
    var factory = function($http,coreService){
        return {
            getRepoCustomerRoots: function(id){
                return $http.get(coreService.getApi()+'repocustomerroots/'+id)
            },
            getRepoFiles: function (node) {
                return $http.get(coreService.getApi() + 'repofiles/' + node.id);
            }
        }    
    }  
    factory.$inject = ["$http","coreService"]
    angular.module("repocustomerModule")
        .factory("repocustomerService",factory)
}());(function () {
    var controller = function ($scope, coreService, resetpasswordService,$state) {
        var checkPassword = function (password) {
            if (!angular.isDefined(password))
                return false
            if (password.length < 8)
                return false
            if (!password.match(/[A-Z]+/))
                return false
            if (!password.match(/\d+/))
                return false
            return true
        }
        $scope.previous = coreService.getPreviousState()
        $scope.invalid = true
        $scope.user = {
            password: '',
            confirm: ''
        }
        $scope.$watch('user', function (newVal) {
            if (!checkPassword($scope.user.password)) {
                $scope.invalid = true
                return
            }
            if ($scope.user.password !== $scope.user.confirm) {
                $scope.invalid = true
                return
            }
            $scope.invalid = false
        }, true)
        
        $scope.reset = function () {
            var post = {
                user_password: $scope.user.password,
                user_id: coreService.getUser().user_id
            }
            resetpasswordService.resetPassword(post)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            if (response.data.success) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'info', message: 'Your password has been reset'})
                                $state.go($scope.previous)
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'error', message: 'Failed to reset your password'})
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'resetpasswordService', '$state']
    angular.module('resetpasswordModule')
            .controller('ResetpasswordController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            resetPassword: function(post){
                return $http.post(coreService.getApi()+'changepassword',post)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('resetpasswordModule')
            .factory('resetpasswordService', factory)
}());/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


(function () {
    var controller = function ($scope, coreService, constantService, salesorderService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'sales_order_no', display: 'ID', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'title', display: 'Title', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'create_date', display: 'Create Date', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'expirydates', filter_id: 'id', filter_name: 'name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.db = coreService.getParentDB('salesorder');
            if (coreService.getCurrentState() === 'salesorder') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'salesorder';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                        $scope.promise = $q.all([
                        salesorderService.getSalesOrderGrid(coreService.getUser().user_id),
                    coreService.getTableProfiles($scope.db.module)
                        ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                            if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                                coreService.writeTableProfile(profile).then(function (response) {
                                    if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedSalesOrder'
                                    $scope.db.selectedProfile.uisref = "addsalesorder";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                        $scope.db.selectedProfile.filters.expirydates = [
                                        {id: 'All', name: 'All'},
                                        {id: 'today', name: 'today'},
                                        {id: '-7', name: 'last 7 days'},
                                        {id: '-30', name: 'last 30 days'},
                                        {id: '+7', name: 'next 7 days'},
                                    {id: '+30', name: 'next 30 days'}
                                    ];

                                    $scope.db.selectedProfile.filters['create_account_id'] = coreService.getUser().user_id;
                                        angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                            if (field.hasOwnProperty('filter_filters')) {
                                        $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                    }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                coreService.setDB($scope.db);
                                    } else {
                                    coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                                }, function (response) {
                                coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        })
                            } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedSalesOrder';
                            $scope.db.selectedProfile.uisref = "addsalesorder";
                            $scope.db.selectedProfile.filters = {};

                                $scope.db.selectedProfile.filters.expirydates = [
                                {id: 'All', name: 'All'},
                                {id: 'today', name: 'today'},
                                {id: '-7', name: 'last 7 days'},
                                {id: '-30', name: 'last 30 days'},
                                {id: '+7', name: 'next 7 days'},
                            {id: '+30', name: 'next 30 days'}
                            ];
                            $scope.db.selectedProfile.filters['create_account_id'] = coreService.getUser().user_id;
                                angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                    if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                            }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                        coreService.setDB($scope.db);
                    }
                        }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                    coreService.setAlert({type: 'exception', message: errors[1].data});
                });
            }
                } else {
        return;
            }
        }, true);

            $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
                    salesorderService.deleteSalesOrder($scope.db.selectedSalesOrder.sales_order_id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                if (response.data.success == '1' || response.data.success == 1) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                                $scope.db.selectedSalesOrder = $scope.db.selectedSalesOrder;
                                $scope.db.refresh = true;
                            $state.go('salesorder');
                                } else {
                                coreService.resetAlert();
                            coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                        }
                    }
                        }, function (error) {
                        coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: error.data});
        });
        };

            $scope.printSalesOrderReport = function (item) {
            var post = {sales_order_id: item.sales_order_id, sales_order_no: item.sales_order_no};
                salesorderService.salesorderReport(post).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                    var path = response.data;
                window.open(coreService.getBaseUrl() + 'reports/' + path);
                    } else {
                    coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data});
            }
                }, function (response) {
                coreService.resetAlert();
        coreService.setAlert({type: 'exception', message: response.data});
    });
    }
    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'salesorderService', '$state', '$filter', '$q'];
            angular.module('salesorderModule')
.controller('salesorderController', controller);
}());;/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
(function () {
    var factory = function ($http, coreService) {
        return {
            getSalesOrderGrid: function (sales_order_id) {
                return $http.get(coreService.getApi() + 'salesordergrid/' + sales_order_id);
            },
            deleteSalesOrder: function (sales_order_id) {
                return $http.get(coreService.getApi() + 'deletesalesorder/' + sales_order_id);
            },
            salesorderReport: function (post) {
                return $http.post(coreService.getApi() + 'salesorderreport', post);
            }

        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('salesorderModule')
            .factory('salesorderService', factory);
}());(function () {
    var controller = function ($scope, coreService, constantService, salesorderlookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'payment_term_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'the_name', display: 'Name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'notes', display: 'Notes', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbPaymentTerm = coreService.getParentDB('salesorderlookups_paymentterm');
            if (coreService.getCurrentState() === 'salesorderlookups.paymentterm') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'salesorderlookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $scope.promise = $q.all([
                        salesorderlookupsService.getPaymentTerm(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedPaymentTerm'
                                    $scope.db.selectedProfile.uisref = "salesorderlookups.addpaymentterm";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedPaymentTerm'
                            $scope.db.selectedProfile.uisref = "salesorderlookups.addpaymentterm";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('salesorderlookups_paymentterm');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "salesorderlookups.addpaymentterm") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbPaymentTerm = coreService.getParentDB('salesorderlookups_paymentterm');
                if ($scope.dbPaymentTerm.hasOwnProperty('selectedPaymentTerm') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.promise = $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {
                        if ($scope.dbPaymentTerm.selectedPaymentTerm !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var paymentterm = {
                                payment_term_id: queues[1].data.success,
                                the_name: '',
                                notes: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedPaymentTerm = paymentterm;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.savePaymentTerm = function () {
            $scope.dbPaymentTerm.selectedPaymentTerm = $scope.db.selectedPaymentTerm;
            salesorderlookupsService.writePaymentTerm($scope.db.selectedPaymentTerm).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.the_name_valid = '';
                    if (response.data.success == '2' || response.data.success == 2) {
                        $scope.the_name_valid = constantService.getMessage('the_name_valid');
                    } else {
                        $scope.dbPaymentTerm.refresh = true;
                        $state.go('salesorderlookups.paymentterm');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbPaymentTerm.selectedPaymentTerm.payment_term_id);
            salesorderlookupsService.deletePaymentTerm($scope.dbPaymentTerm.selectedPaymentTerm.payment_term_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbPaymentTerm.selectedPaymentTerm = $scope.db.selectedPaymentTerm;
                            $scope.dbPaymentTerm.refresh = true;
                            $state.go('salesorderlookups.paymentterm');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'salesorderlookupsService', '$state', '$filter', '$q'];
    angular.module('salesorderlookupsModule')
            .controller('paymenttermController', controller);
}());;(function () {
    var controller = function ($scope, hotkeys, $state) {
        $scope.tabData = [
            {
                heading: "Sales Order Status Manager"
                , route: "salesorderlookups.salesorderstatus"
            }, {
                heading: "Sales Order Types Manager"
                , route: "salesorderlookups.salesordertype"
            }, {
                heading: "Payment Terms Manager"
                , route: "salesorderlookups.paymentterm"
            }
        ];

        hotkeys.bindTo($scope).add({
            combo: 'alt+s'
            , description: 'go to Sales Order Status Manager'
            , callback: function () {
                $state.go('salesorderlookups.salesorderstatus');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+t'
            , description: 'go to Sales Order Types Manager'
            , callback: function () {
                $state.go('salesorderlookups.salesordertype');
            }
        });
        hotkeys.bindTo($scope).add({
            combo: 'alt+p'
            , description: 'go to Payment Terms Manager'
            , callback: function () {
                $state.go('salesorderlookups.paymentterm');
            }
        });
    };


    controller.$inject = ['$scope', 'hotkeys', '$state'];
    angular.module('salesorderlookupsModule')
            .controller('salesorderlookupsController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, salesorderlookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'sales_order_status_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'the_name', display: 'Name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'notes', display: 'Notes', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbSalesOrderStatus = coreService.getParentDB('salesorderlookups_salesorderstatus');
            if (coreService.getCurrentState() === 'salesorderlookups.salesorderstatus') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'salesorderlookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $scope.promise = $q.all([
                        salesorderlookupsService.getSalesOrderStatus(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedSalesOrderStatus'
                                    $scope.db.selectedProfile.uisref = "salesorderlookups.addsalesorderstatus";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedSalesOrderStatus'
                            $scope.db.selectedProfile.uisref = "salesorderlookups.addsalesorderstatus";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('salesorderlookups_salesorderstatus');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "salesorderlookups.addsalesorderstatus") {
                $scope.db = newVal;

                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbSalesOrderStatus = coreService.getParentDB('salesorderlookups_salesorderstatus');
                if ($scope.dbSalesOrderStatus.hasOwnProperty('selectedSalesOrderStatus') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.promise = $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid()
                    ]).then(function (queues) {
                        if ($scope.dbSalesOrderStatus.selectedSalesOrderStatus !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var salesorderstatus = {
                                sales_order_status_id: queues[1].data.success,
                                the_name: '',
                                notes: '',
                                user_id: coreService.getUser().user_id
                            }
                            $scope.db.selectedSalesOrderStatus = salesorderstatus;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.saveSalesOrderStatus = function () {
            console.log('selectedSalesOrderStatus: ' + $scope.db.selectedSalesOrderStatus);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbSalesOrderStatus.selectedSalesOrderStatus = $scope.db.selectedSalesOrderStatus;
            salesorderlookupsService.writeSalesOrderStatus($scope.db.selectedSalesOrderStatus).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.the_name_valid = '';
                    if (response.data.success == '2' || response.data.success == 2) {
                        $scope.the_name_valid = constantService.getMessage('the_name_valid');
                    } else {
                        $scope.dbSalesOrderStatus.refresh = true;
                        $state.go('salesorderlookups.salesorderstatus');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbSalesOrderStatus.selectedSalesOrderStatus.sales_order_status_id);
            salesorderlookupsService.deleteSalesOrderStatus($scope.dbSalesOrderStatus.selectedSalesOrderStatus.sales_order_status_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbSalesOrderStatus.selectedSalesOrderStatus = $scope.db.selectedSalesOrderStatus;
                            $scope.dbSalesOrderStatus.refresh = true;
                            $state.go('salesorderlookups.salesorderstatus');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'salesorderlookupsService', '$state', '$filter', '$q'];
    angular.module('salesorderlookupsModule')
            .controller('salesorderstatusController', controller);
}());;(function () {
    var controller = function ($scope, coreService, constantService, salesorderlookupsService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'sales_order_type_no', display: 'Id', type: 'string', sort: 1, direction: 1, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'abbreviation', display: 'Abbreviation', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'the_name', display: 'Name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }


        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            $scope.dbSalesOrderType = coreService.getParentDB('salesorderlookups_salesordertype');
            if (coreService.getCurrentState() === 'salesorderlookups.salesordertype') {
                $scope.module = coreService.getCurrentState();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal;
                    $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                    if ($scope.db.hasOwnProperty('update') && $scope.db.update) {
                        $scope.db.update = false;
                    }
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.db = {};
                    $scope.db.module = $scope.module;
                    $scope.db.deleteBtn = 'salesorderlookups';
                    $scope.db.small = true;
                    $scope.db.profile = {};
                    $scope.promise = $q.all([
                        salesorderlookupsService.getSalesOrderType(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[1].data;
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module;
                            profile.user_id = coreService.getUser().user_id;
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data;
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                                    $scope.db.selectedProfile.selected = 'selectedSalesOrderType'
                                    $scope.db.selectedProfile.uisref = "salesorderlookups.addsalesordertype";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.add = true;
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                        }
                                    })
                                    //console.log($scope.db.selectedProfile);
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.db.items = queues[0].data.items;
                                    $scope.db.count = queues[0].data.count;
                                    $scope.db.currentPage = 1;
                                    coreService.setDB($scope.db);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0];
                            $scope.db.selectedProfile.selected = 'selectedSalesOrderType'
                            $scope.db.selectedProfile.uisref = "salesorderlookups.addsalesordertype";
                            $scope.db.selectedProfile.filters = {};

                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                }
                            });
                            angular.copy($scope.db.selectedProfile, $scope.db.profile);
                            $scope.db.add = true;
                            $scope.db.items = queues[0].data.items;
                            $scope.db.count = queues[0].data.count;
                            $scope.db.currentPage = 1;
                            coreService.setDB($scope.db);
                        }
                    }, function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                    });
                }
            } else {
                return;
            }
        }, true);

        /* populate the form  */
        $scope.$watch(function () {
            return coreService.getParentDB('salesorderlookups_salesordertype');
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "salesorderlookups.addsalesordertype") {
                $scope.db = newVal;
                $scope.module = coreService.getCurrentState().toString().replace(/\./, '_');
                $scope.dbSalesOrderType = coreService.getParentDB('salesorderlookups_salesordertype');
                if ($scope.dbSalesOrderType.hasOwnProperty('selectedSalesOrderType') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert();
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    var sales_order_type_id = null;
                    if ($scope.dbSalesOrderType.selectedSalesOrderType !== null) {
                        sales_order_type_id = $scope.dbSalesOrderType.selectedSalesOrderType.sales_order_type_id
                    }

                    $scope.promise = $q.all([
                        coreService.getTableProfiles($scope.db.module),
                        coreService.getUuid(),
                        salesorderlookupsService.getSalesOrderTypeList(sales_order_type_id)
                    ]).then(function (queues) {
                        $scope.number_valid = constantService.getMessage('number_valid');
                        $scope.salesordertypes = queues[2].data;
                        if ($scope.dbSalesOrderType.selectedSalesOrderType !== null) {
                        }
                        else {
                            $scope.isNew = true;
                            var salesordertype = {
                                sales_order_type_id: queues[1].data.success,
                                the_name: '',
                                abbreviation: '',
                                notes: '',
                                parent_id: '',
                                sort_order: '',
                                is_lease_email_required: ''
                            }
                            $scope.db.selectedSalesOrderType = salesordertype;
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    });

                }
            }
        }, true);

        /* add/edit   */
        $scope.saveSalesOrderType = function () {
            console.log('selectedSalesOrderType: ' + $scope.db.selectedSalesOrderType);
            console.log('$scope.isNew: ' + $scope.isNew);
            $scope.dbSalesOrderType.selectedSalesOrderType = $scope.db.selectedSalesOrderType;
            salesorderlookupsService.writeSalesOrderType($scope.db.selectedSalesOrderType).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.the_name_valid = '';
                    if (response.data.success == '2' || response.data.success == 2) {
                        $scope.the_name_valid = constantService.getMessage('the_name_valid');
                    } else {
                        $scope.dbSalesOrderType.refresh = true;
                        $state.go('salesorderlookups.salesordertype');
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            });
        };

        $scope.deleteRecord = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.dbSalesOrderType.selectedSalesOrderType.sales_order_type_id);
            salesorderlookupsService.deleteSalesOrderType($scope.dbSalesOrderType.selectedSalesOrderType.sales_order_type_id)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'success', message: constantService.getMessage('deleteRecord')});
                            $scope.dbSalesOrderType.selectedSalesOrderType = $scope.db.selectedSalesOrderType;
                            $scope.dbSalesOrderType.refresh = true;
                            $state.go('salesorderlookups.salesordertype');
                        } else {
                            coreService.resetAlert();
                            var err = response.data.message;
                            if (err.indexOf('Cannot delete or update a parent row') !== -1) {
                                coreService.setAlert({type: 'error', message: constantService.getMessage('cannotdeleteRecord')});
                            } else {
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

    };
    controller.$inject = ['$scope', 'coreService', 'constantService', 'salesorderlookupsService', '$state', '$filter', '$q'];
    angular.module('salesorderlookupsModule')
            .controller('salesordertypeController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getSalesOrderStatus: function () {
                return $http.get(coreService.getApi() + 'salesorderstatus');
            },
            writeSalesOrderStatus: function (salesorderstatus) {
                return $http.post(coreService.getApi() + 'updateSalesOrderStatus', salesorderstatus);
            },
            deleteSalesOrderStatus: function (sales_order_status_id) {
                return $http.get(coreService.getApi() + 'deleteSalesOrderStatus/' + sales_order_status_id);
            },
            getSalesOrderType: function () {
                return $http.get(coreService.getApi() + 'salesordertype');
            },
            getSalesOrderTypeList: function (sales_order_type_id) {
                return $http.get(coreService.getApi() + 'salesorderstypelist/' + sales_order_type_id);
            },
            getPaymentTerm: function () {
                return $http.get(coreService.getApi() + 'paymentterm');
            },
            writePaymentTerm: function (paymentterm) {
                return $http.post(coreService.getApi() + 'updatePaymentTerm', paymentterm);
            },
            deletePaymentTerm: function (payment_term_id) {
                return $http.get(coreService.getApi() + 'deletePaymentTerm/' + payment_term_id);
            },
            writeSalesOrderType: function (salesordertype) {
                return $http.post(coreService.getApi() + 'updateSalesOrderType', salesordertype);
            },
            deleteSalesOrderType: function (sales_order_type_id) {
                return $http.get(coreService.getApi() + 'deleteSalesOrderType/' + sales_order_type_id);
            }
        }
    }
    factory.$inject = ['$http', 'coreService'];
    angular.module('salesorderlookupsModule')
            .factory('salesorderlookupsService', factory);
}());;(function () {
    var controller = function ($scope, coreService, salesorderviewService, salesorderviewService, drawingrequestviewService, itcquoteService, constantService, $filter, $q, $state, $timeout, $uibModal, $confirm) {

        /* fill the grid  */
        $scope.$watch(function () {
            return coreService.getParentDB('salesorder');
        }, function (newValue) {
            if (newValue !== null && angular.isDefined(newValue) && coreService.getCurrentState() === "addsalesorder") {
                $scope.db = newValue;
                if ($scope.db.hasOwnProperty('selectedSalesOrder') && !$scope.fetched) {
                    $scope.fetched = true;
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: constantService.getMessage('loadGrid')});
                    $scope.user = coreService.getUser();
                    $scope.privileges = coreService.getPrivileges();
                    $scope.decimal4_valid = constantService.getMessage('decimal4_valid');
                    $scope.sales_order_id = null;
                    if ($scope.db.selectedSalesOrder !== null) {
                        $scope.updatefirst = true;
                        $scope.updatefirst2 = true;
                        $scope.sales_order_id = $scope.db.selectedSalesOrder.sales_order_id;
                    }
                    $scope.promise = $q.all([coreService.getUuid()
                                , salesorderviewService.getScopes()
                                , salesorderviewService.getQuotesTitles()
                                , salesorderviewService.getSalesOrderStatusList()
                                , salesorderviewService.getSalesOrderTypeList(null)
                                , salesorderviewService.getPaymentsList()
                                , drawingrequestviewService.getDrawingRequestValues(91)
                                , salesorderviewService.getSalesOrderList($scope.sales_order_id)
                                , itcquoteService.getQuoteCustomers()

                    ]).then(function (queues) {
                        $scope.scopes = queues[1].data;
                        $scope.quotes = queues[2].data;
                        $scope.salesorderstatus = queues[3].data;
                        $scope.salesordertype = queues[4].data;
                        $scope.paymentterm = queues[5].data;
                        $scope.salesorderkind = queues[6].data;
                        $scope.salesordertitles = queues[7].data;
                        $scope.billing_customers = [];
                        $scope.shipping_customers = [];
                        $scope.billing_customers = queues[8].data;
                        $scope.shipping_customers = queues[8].data;

                        $scope.user = coreService.getUser();
                        if ($scope.db.selectedSalesOrder !== null) {
                            salesorderviewService.getSalesOrderById($scope.db.selectedSalesOrder.sales_order_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    //$scope.db.selectedSalesOrder = response.data;                                                                               
                                    $scope.db.selectedSalesOrder.on_site_date = response.data.on_site_date;
                                    $scope.db.selectedSalesOrder.ship_date = response.data.ship_date;
                                    $scope.db.selectedSalesOrder.creator_name = response.data.creator_name;
                                    $scope.db.selectedSalesOrder.modifier_name = response.data.modifier_name;
                                    $scope.db.selectedSalesOrder.billing_contact_id = response.data.billing_contact_id;
                                    $scope.db.selectedSalesOrder.shipping_contact_id = response.data.shipping_contact_id;
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                        else {
                            $scope.updatefirst = false;
                            $scope.updatefirst2 = false;
                            $scope.isNew = true;
                            var salesorder = {
                                sales_order_id: queues[0].data.success
                                , create_account_id: $scope.user.user_id
                                , modify_account_id: $scope.user.user_id
                                , creator_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , modifier_name: $scope.user.first_name + ' ' + $scope.user.last_name
                                , create_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , modify_date: moment().format('YYYY-MM-DD HH:mm:ss')
                                , sales_order_type_id: ''
                                , sys_prosales_order_id: ''
                                , sales_order_kind_id: ''
                                , scope_id: queues[1].data[1].scope_id
                                , refsales_order_id: ''
                                , title: ''
                                , sales_order_status_id: ''
                                , code: ''
                                , quote_id: ''
                                , shipping_customer_id: ''
                                , shipping_contact_id: ''
                                , shipping_address_id: ''
                                , shipping_phone_id: ''
                                , shipping_email_id: ''
                                , billing_phone_id: ''
                                , billing_email_id: ''
                                , billing_customer_id: ''
                                , billing_contact_id: ''
                                , billing_address_id: ''
                                , lease_term: ''
                                , monthly_lease: ''
                                , additional_months: ''
                                , sale_price: ''
                                , freight_charge: ''
                                , back_freight_charge: ''
                                , tech_cost: ''
                                , commission_amount: ''
                                , payment_term_id: ''
                                , on_site_date: ''
                                , sales_order_info: ''
                                , special_instructions: ''
                                , notes: ''
                                , ship_date: ''
                            }
                            $scope.db.selectedSalesOrder = salesorder;
                        }
                    }
                    , function (errors) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: errors[0].data});
                        coreService.setAlert({type: 'exception', message: errors[1].data});
                        coreService.setAlert({type: 'exception', message: errors[2].data});
                        coreService.setAlert({type: 'exception', message: errors[3].data});
                        coreService.setAlert({type: 'exception', message: errors[4].data});
                        coreService.setAlert({type: 'exception', message: errors[5].data});
                        coreService.setAlert({type: 'exception', message: errors[6].data});
                        coreService.setAlert({type: 'exception', message: errors[7].data});
                        coreService.setAlert({type: 'exception', message: errors[8].data});
                    });

                    $scope.$watch('db.selectedSalesOrder.billing_customer_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '') {
                            itcquoteService.getCustomerContact(newVal).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.billing_contacts = response.data;
                                    $scope.db.selectedSalesOrder.billing_address = {};
                                    $scope.db.selectedSalesOrder.billing_phone = {};
                                    $scope.db.selectedSalesOrder.billing_email = {};
                                    $scope.billing_addresses = [];
                                    $scope.billing_phones = [];
                                    $scope.billing_emails = [];
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.billing_contact_id', function (newVal, oldVal) {
                        console.log(' newVal:' + newVal);
                        console.log(' oldVal:' + oldVal);
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '') {
                            itcquoteService.getContactDetails(newVal).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.billing_addresses = response.data.addresses;
                                    $scope.billing_phones = response.data.phones;
                                    $scope.billing_emails = response.data.emails;
                                    $scope.db.selectedSalesOrder.billing_address = {};
                                    $scope.db.selectedSalesOrder.billing_phone = {};
                                    $scope.db.selectedSalesOrder.billing_email = {};

                                    if (!$scope.updatefirst) {
                                        if ($scope.billing_addresses.length > 0) {
                                            $scope.db.selectedSalesOrder.billing_address_id = $scope.billing_addresses[0].address_id;
                                            $scope.db.selectedSalesOrder.billing_address.addresstype_name = $scope.billing_addresses[0].addresstype_name;
                                            $scope.db.selectedSalesOrder.billing_address.city_name = $scope.billing_addresses[0].city_name;
                                            $scope.db.selectedSalesOrder.billing_address.state_name = $scope.billing_addresses[0].state_name;
                                            $scope.db.selectedSalesOrder.billing_address.country_name = $scope.billing_addresses[0].country_name;
                                            $scope.db.selectedSalesOrder.billing_address.postal_code = $scope.billing_addresses[0].postal_code;
                                        }
                                        if ($scope.billing_phones.length > 0) {
                                            $scope.db.selectedSalesOrder.billing_phone_id = $scope.billing_phones[0].phone_id;
                                            $scope.db.selectedSalesOrder.billing_phone.phonetype_name = $scope.billing_phones[0].phonetype_name;
                                            $scope.db.selectedSalesOrder.billing_phone.extension = $scope.billing_phones[0].extension;
                                        }
                                        if ($scope.billing_emails.length > 0) {
                                            $scope.db.selectedSalesOrder.billing_email_id = $scope.billing_emails[0].email_id;
                                            $scope.db.selectedSalesOrder.billing_email.emailtype_name = $scope.billing_emails[0].emailtype_name;
                                        }
                                    } else {
                                        $scope.updatefirst = false;
                                        if ($scope.billing_addresses.length > 0) {
                                            $scope.db.selectedSalesOrder.billing_address.addresstype_name = $filter('filter')($scope.billing_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.billing_address_id
                                            })[0].addresstype_name;
                                            $scope.db.selectedSalesOrder.billing_address.city_name = $filter('filter')($scope.billing_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.billing_address_id
                                            })[0].city_name;
                                            $scope.db.selectedSalesOrder.billing_address.state_name = $filter('filter')($scope.billing_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.billing_address_id
                                            })[0].state_name;
                                            $scope.db.selectedSalesOrder.billing_address.country_name = $filter('filter')($scope.billing_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.billing_address_id
                                            })[0].country_name;
                                            $scope.db.selectedSalesOrder.billing_address.postal_code = $filter('filter')($scope.billing_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.billing_address_id
                                            })[0].postal_code;
                                        }
                                        if ($scope.billing_phones.length > 0) {
                                            $scope.db.selectedSalesOrder.billing_phone.phonetype_name = $filter('filter')($scope.billing_phones, {
                                                phone_id: $scope.db.selectedSalesOrder.billing_phone_id
                                            })[0].phonetype_name;
                                            $scope.db.selectedSalesOrder.billing_phone.extension = $filter('filter')($scope.billing_phones, {
                                                phone_id: $scope.db.selectedSalesOrder.billing_phone_id
                                            })[0].extension;
                                        }
                                        if ($scope.billing_emails.length > 0) {
                                            $scope.db.selectedSalesOrder.billing_email.emailtype_name = $filter('filter')($scope.billing_emails, {
                                                email_id: $scope.db.selectedSalesOrder.billing_email_id
                                            })[0].emailtype_name;
                                        }
                                    }

                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.billing_address_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '' && angular.isDefined($scope.billing_addresses)) {
                            if ($scope.billing_addresses.length > 0 && $scope.updatefirst) {
                                $scope.db.selectedSalesOrder.billing_address.addresstype_name = $filter('filter')($scope.billing_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.billing_address_id
                                })[0].addresstype_name;
                                $scope.db.selectedSalesOrder.billing_address.city_name = $filter('filter')($scope.billing_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.billing_address_id
                                })[0].city_name;
                                $scope.db.selectedSalesOrder.billing_address.state_name = $filter('filter')($scope.billing_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.billing_address_id
                                })[0].state_name;
                                $scope.db.selectedSalesOrder.billing_address.country_name = $filter('filter')($scope.billing_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.billing_address_id
                                })[0].country_name;
                                $scope.db.selectedSalesOrder.billing_address.postal_code = $filter('filter')($scope.billing_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.billing_address_id
                                })[0].postal_code;
                            }
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.billing_phone_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '' && angular.isDefined($scope.billing_phones)) {
                            if ($scope.billing_phones.length > 0 && $scope.updatefirst) {
                                $scope.db.selectedSalesOrder.billing_phone.phonetype_name = $filter('filter')($scope.billing_phones, {
                                    phone_id: $scope.db.selectedSalesOrder.billing_phone_id
                                })[0].phonetype_name;
                                $scope.db.selectedSalesOrder.billing_phone.extension = $filter('filter')($scope.billing_phones, {
                                    phone_id: $scope.db.selectedSalesOrder.billing_phone_id
                                })[0].extension;
                            }
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.billing_email_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '' && angular.isDefined($scope.billing_emails)) {
                            if ($scope.billing_emails.length > 0 && $scope.updatefirst) {
                                $scope.db.selectedSalesOrder.billing_email.emailtype_name = $filter('filter')($scope.billing_emails, {
                                    email_id: $scope.db.selectedSalesOrder.billing_email_id
                                })[0].emailtype_name;
                            }
                        }
                    });


                    $scope.$watch('db.selectedSalesOrder.shipping_customer_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '') {
                            itcquoteService.getCustomerContact(newVal).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.shipping_contacts = response.data;
                                    $scope.db.selectedSalesOrder.shipping_address = {};
                                    $scope.db.selectedSalesOrder.shipping_phone = {};
                                    $scope.db.selectedSalesOrder.shipping_email = {};
                                    $scope.shipping_addresses = [];
                                    $scope.shipping_phones = [];
                                    $scope.shipping_emails = [];
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.shipping_contact_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '') {
                            itcquoteService.getContactDetails(newVal).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.shipping_addresses = response.data.addresses;
                                    $scope.shipping_phones = response.data.phones;
                                    $scope.shipping_emails = response.data.emails;
                                    $scope.db.selectedSalesOrder.shipping_address = {};
                                    $scope.db.selectedSalesOrder.shipping_phone = {};
                                    $scope.db.selectedSalesOrder.shipping_email = {};

                                    if (!$scope.updatefirst2) {
                                        if ($scope.shipping_addresses.length > 0) {
                                            $scope.db.selectedSalesOrder.shipping_address_id = $scope.shipping_addresses[0].address_id;
                                            $scope.db.selectedSalesOrder.shipping_address.addresstype_name = $scope.shipping_addresses[0].addresstype_name;
                                            $scope.db.selectedSalesOrder.shipping_address.city_name = $scope.shipping_addresses[0].city_name;
                                            $scope.db.selectedSalesOrder.shipping_address.state_name = $scope.shipping_addresses[0].state_name;
                                            $scope.db.selectedSalesOrder.shipping_address.country_name = $scope.shipping_addresses[0].country_name;
                                            $scope.db.selectedSalesOrder.shipping_address.postal_code = $scope.shipping_addresses[0].postal_code;
                                        }
                                        if ($scope.shipping_phones.length > 0) {
                                            $scope.db.selectedSalesOrder.shipping_phone_id = $scope.shipping_phones[0].phone_id;
                                            $scope.db.selectedSalesOrder.shipping_phone.phonetype_name = $scope.shipping_phones[0].phonetype_name;
                                            $scope.db.selectedSalesOrder.shipping_phone.extension = $scope.shipping_phones[0].extension;
                                        }
                                        if ($scope.shipping_emails.length > 0) {
                                            $scope.db.selectedSalesOrder.shipping_email_id = $scope.shipping_emails[0].email_id;
                                            $scope.db.selectedSalesOrder.shipping_email.emailtype_name = $scope.shipping_emails[0].emailtype_name;
                                        }
                                    } else {
                                        $scope.updatefirst2 = false;
                                        if ($scope.shipping_addresses.length > 0) {
                                            $scope.db.selectedSalesOrder.shipping_address.addresstype_name = $filter('filter')($scope.shipping_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                            })[0].addresstype_name;
                                            $scope.db.selectedSalesOrder.shipping_address.city_name = $filter('filter')($scope.shipping_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                            })[0].city_name;
                                            $scope.db.selectedSalesOrder.shipping_address.state_name = $filter('filter')($scope.shipping_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                            })[0].state_name;
                                            $scope.db.selectedSalesOrder.shipping_address.country_name = $filter('filter')($scope.shipping_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                            })[0].country_name;
                                            $scope.db.selectedSalesOrder.shipping_address.postal_code = $filter('filter')($scope.shipping_addresses, {
                                                address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                            })[0].postal_code;
                                        }
                                        if ($scope.shipping_emails.length > 0) {
                                            $scope.db.selectedSalesOrder.shipping_phone.phonetype_name = $filter('filter')($scope.shipping_phones, {
                                                phone_id: $scope.db.selectedSalesOrder.shipping_phone_id
                                            })[0].phonetype_name;
                                            $scope.db.selectedSalesOrder.shipping_phone.extension = $filter('filter')($scope.shipping_phones, {
                                                phone_id: $scope.db.selectedSalesOrder.shipping_phone_id
                                            })[0].extension;
                                        }
                                        if ($scope.shipping_emails.length > 0) {
                                            $scope.db.selectedSalesOrder.shipping_email.emailtype_name = $filter('filter')($scope.shipping_emails, {
                                                email_id: $scope.db.selectedSalesOrder.shipping_email_id
                                            })[0].emailtype_name;
                                        }
                                    }

                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data});
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data});
                            });
                        }
                    });


                    $scope.$watch('db.selectedSalesOrder.shipping_address_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '' && angular.isDefined($scope.shipping_addresses)) {
                            if ($scope.shipping_addresses.length > 0) {
                                $scope.db.selectedSalesOrder.shipping_address.addresstype_name = $filter('filter')($scope.shipping_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                })[0].addresstype_name;
                                $scope.db.selectedSalesOrder.shipping_address.city_name = $filter('filter')($scope.shipping_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                })[0].city_name;
                                $scope.db.selectedSalesOrder.shipping_address.state_name = $filter('filter')($scope.shipping_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                })[0].state_name;
                                $scope.db.selectedSalesOrder.shipping_address.country_name = $filter('filter')($scope.shipping_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                })[0].country_name;
                                $scope.db.selectedSalesOrder.shipping_address.postal_code = $filter('filter')($scope.shipping_addresses, {
                                    address_id: $scope.db.selectedSalesOrder.shipping_address_id
                                })[0].postal_code;
                            }
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.shipping_phone_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '' && angular.isDefined($scope.shipping_phones)) {
                            if ($scope.shipping_phones.length > 0) {
                                $scope.db.selectedSalesOrder.shipping_phone.phonetype_name = $filter('filter')($scope.shipping_phones, {
                                    phone_id: $scope.db.selectedSalesOrder.shipping_phone_id
                                })[0].phonetype_name;
                                $scope.db.selectedSalesOrder.shipping_phone.extension = $filter('filter')($scope.shipping_phones, {
                                    phone_id: $scope.db.selectedSalesOrder.shipping_phone_id
                                })[0].extension;
                            }
                        }
                    });

                    $scope.$watch('db.selectedSalesOrder.shipping_email_id', function (newVal, oldVal) {
                        if (angular.isDefined(newVal) && newVal !== null && newVal !== '' && angular.isDefined($scope.shipping_emails)) {
                            if ($scope.shipping_emails.length > 0) {
                                $scope.db.selectedSalesOrder.shipping_email.emailtype_name = $filter('filter')($scope.shipping_emails, {
                                    email_id: $scope.db.selectedSalesOrder.shipping_email_id
                                })[0].emailtype_name;
                            }
                        }
                    });


                }
                else {
                    return;
                }
            }
        }, true);

        $scope.saveSalesOrder = function () {
            salesorderviewService.writeSalesOrder($scope.db.selectedSalesOrder).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.fetched = false;
                    $scope.db.refresh = true;
                    $state.go('salesorder');
                } else {
                    coreService.resetAlert();
                    coreService.setAlert({type: 'exception', message: response.data});
                }
            }, function (response) {
                coreService.resetAlert();
                coreService.setAlert({type: 'exception', message: response.data})
            });
        }



    };
    controller.$inject = ['$scope', 'coreService', 'salesorderviewService', 'salesorderviewService', 'drawingrequestviewService', 'itcquoteService', 'constantService', '$filter', '$q', '$state', '$timeout', '$uibModal', '$confirm'];
    angular.module('salesorderviewModule')
            .controller('salesorderviewController', controller);
}());;(function () {
    var factory = function ($http, coreService) {
        return {
            getScopes: function () {
                return $http.get(coreService.getApi() + 'quotescopes');
            },
            getQuotesTitles: function () {
                return $http.get(coreService.getApi() + 'quotestitles');
            },
            getSalesOrderStatusList: function () {
                return $http.get(coreService.getApi() + 'salesorderstauslist');
            },
            getSalesOrderTypeList: function (sales_order_type_id) {
                return $http.get(coreService.getApi() + 'salesorderstypelist/' + sales_order_type_id);
            },
            getPaymentsList: function () {
                return $http.get(coreService.getApi() + 'paymentslist');
            },
            getSalesOrderList: function (sales_order_id) {
                return $http.get(coreService.getApi() + 'salesorderslist/' + sales_order_id);
            },
            getCustomerContactsList: function () {
                return $http.get(coreService.getApi() + 'customercontactslist');
            },
            writeSalesOrder: function (salesorder) {
                return $http.post(coreService.getApi() + 'updateSalesOrder', salesorder);
            },
            getSalesOrderById: function (sales_order_id) {
                return $http.get(coreService.getApi() + 'getSalesOrderById/' + sales_order_id);
            }
            
        };
    };
    factory.$inject = ['$http', 'coreService']
    angular.module('salesorderviewModule')
            .factory('salesorderviewService', factory);
}());(function () {
    var controller = function ($scope, coreService, salesrepService, $state, $filter, $q) {
        var items = []
        var fields = [
            {name: 'first_name', display: 'First name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'last_name', display: 'Last name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'company_name', display: 'Company name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'territory_name', display: 'Territory', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'reptype_name', display: 'Rep type', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'reptypes', filter_id: 'reptype_id', filter_name: 'reptype_name', filter_default: 0},
            {name: 'actiontype_name', display: 'Last action', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'actiontypes', filter_id: 'actiontype_id', filter_name: 'actiontype_name', filter_default: 0},
            {name: 'action_date', display: 'Action date', type: 'date', sort: 0, direction: 0, filter_isfilter: 0, filter_type: '', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'action_expirydate', display: 'Expiry date', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'expirydates', filter_filters: [{id: 'All', name: 'All'}, {id: 'today', name: 'today'}, {id: '-7', name: 'last 7 days'}, {id: '-30', name: 'last 30 days'}, {id: '+7', name: 'next 7 days'}, {id: '+30', name: 'next 30 days'}], filter_id: 'id', filter_name: 'name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }

        var expirydates = [
            {id: 'All', name: 'All'},
            {id: 'today', name: 'today'},
            {id: '-7', name: 'last 7 days'},
            {id: '-30', name: 'last 30 days'},
            {id: '+7', name: 'next 7 days'},
            {id: '+30', name: 'next 30 days'}
        ]


        $scope.$watch(function () {
            return coreService.getDB();
        }, function (newVal) {
            if (coreService.getCurrentState() === 'salesrep') {
                $scope.module = coreService.getCurrentState()
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        $scope.db.refresh = false
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing Sales reps .. Please wait'})
                        salesrepService.getSalesReps().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                $scope.db.items = response.data.items
                                $scope.db.count = response.data.count
                                $scope.db.currentPage = 1
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'})

                    $scope.db = {}
                    $scope.db.module = $scope.module

                    $scope.db.profile = {}
                    $q.all([
                        salesrepService.getActionTypes(),
                        salesrepService.getRepTypes(),
                        salesrepService.getSalesReps(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert();
                        $scope.db.profiles = queues[3].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedRep'
                                    $scope.db.selectedProfile.uisref = "salesrepview.salesrepmain"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.actiontypes = queues[0].data
                                    $scope.db.selectedProfile.filters.actiontypes.unshift({actiontype_name: 'All'});
                                    $scope.db.selectedProfile.filters.reptypes = queues[1].data
                                    $scope.db.selectedProfile.filters.reptypes.unshift({reptype_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    $scope.db.add = true
                                    console.log($scope.db.selectedProfile)
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.items = queues[2].data.items
                                    $scope.db.count = queues[2].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }else{
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedRep'
                                    $scope.db.selectedProfile.uisref = "salesrepview.salesrepmain"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.actiontypes = queues[0].data
                                    $scope.db.selectedProfile.filters.actiontypes.unshift({actiontype_name: 'All'});
                                    $scope.db.selectedProfile.filters.reptypes = queues[1].data
                                    $scope.db.selectedProfile.filters.reptypes.unshift({reptype_name: 'All'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    console.log($scope.db.selectedProfile)
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.add = true
                                    $scope.db.items = queues[2].data.items
                                    $scope.db.count = queues[2].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                        coreService.setAlert({type: 'exception', message: errors[2].data})
                    })
                }
            } else {
                return
            }
        }, true)
    }
    controller.$inject = ['$scope', 'coreService', 'salesrepService', '$state', '$filter', '$q']
    angular.module('salesrepModule')
            .controller('SalesrepController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSalesReps: function(){
                return $http.get(coreService.getApi()+'salesreps');
            },
            getActionTypes: function(){
                return $http.get(coreService.getApi()+'salesrepactiontypes')
            },
            getRepTypes: function(){
                return $http.get(coreService.getApi()+'salesrepreptypes')
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('salesrepModule')
            .factory('salesrepService', factory)
}());(function () {
    var controller = function ($scope, coreService, salesrepdocsService, $filter, $uibModal) {
        $scope.selected = null
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            console.log(newVal);
            console.log(coreService.getCurrentState());
            if (coreService.getCurrentState() === "salesrep_docs") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                $scope.user = coreService.getUser()
                $scope.candel = coreService.getCanDel($scope.module)
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode !== $scope.selected) {

                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions
//                        if (!$scope.privileges.salesrepdocsreadonly) {
                            $scope.db.upload = {
                                showUpload: true,
                                acceptedFiles: ".pdf,.doc,.docx,.wpd,.xls,.xlsx,.dwfx,.qpw,.wb3,.jpg,.png,.mp4,.mov",
                                multiple: true,
                                uploadMessage: "Drop PDF, DOC, DOCX, WPD, XLS, XLSX, JPG, PNG, DWFX, QPW, WB3, MP4 or MOV files here to upload",
                                doneUpload: false
                            }
//                        }
                        if ($scope.db.tree.selectedNode.name !== 'Root') {
                            getFiles()
                        } else {
                            if (!$scope.db.hasOwnProperty('upload'))
                                $scope.db.upload = {}
                            $scope.db.upload = {
                                showUpload: false
                            }
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        getFiles()
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        getFiles()
                    }

                } else {
                    $scope.db = {}
                    coreService.setDB($scope.db)
                    getTree()
                }

            }
        }, true)
        var setMenuOptions = function () {
            if ($scope.privileges.salesrepdocsuser === false) {
                if ($scope.db.tree.selectedNode.name === 'Root') {
                    $scope.menuOptions = [
                        ['New folder', function ($itemScope) {
                                newFolder();
                            }]
                    ]
                } else {
                    if ($scope.db.tree.parents.length < 4) {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.salesrepdocsadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['New folder', function ($itemScope) {
                                        newFolder();
                                    }]
                                        , null
                                        , ['Rename folder', function ($itemScope) {
                                                renameFolder();
                                            }]
                            ]

                        }
                    } else {
                        if ($scope.candel === true) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                                        , null
                                        , ['Delete folder', function ($itemScope) {
                                                deleteFolder();
                                            }]
                            ]

                        } else if (($scope.privileges.salesrepdocsadmin === true) && $scope.candel === false) {
                            $scope.menuOptions = [
                                ['Rename folder', function ($itemScope) {
                                        renameFolder();
                                    }]
                            ]

                        }
                    }
                }
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/salesrepdocsModule/views/newfolder.html',
                controller: 'SalesrepDocsFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'add'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var deleteFolder = function () {
            if ($scope.db.tree.selectedNode.hasFiles) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder contains files, Please remove these files first'
                })
                return
            }
            if ($scope.db.tree.selectedNode.children.length) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error',
                    message: 'This folder has children, Please remove the children first and try again'
                })
                return
            }
            salesrepdocsService.deleteFolder($scope.db.tree.selectedNode.id).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    getTree()
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/salesrepdocsModule/views/newfolder.html',
                controller: 'SalesrepDocsFolderController',
                resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    },
                    op: function () {
                        return 'rename'
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    getTree()
                }
            })
        }
        var getTree = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Getting sales rep docs tree .. Please wait'
            })
            salesrepdocsService.getSalesrepDocsRoot()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            var treedata = response.data
                            coreService.resetAlert()
                            var selectedNode;
                            var parents = []
                            if ($scope.db.hasOwnProperty('tree') && $scope.db.tree.parents !== 0) {
                                parents.push(treedata[0]);
                                angular.forEach($scope.db.tree.parents, function ($value, $key) {
                                    if ($key > 0 && angular.isDefined(parents[$key - 1]) && angular.isDefined($value))
                                        parents.push($filter('filter')(parents[$key - 1].children, {'id': $value.id})[0])
                                    if ($key === $scope.db.tree.parents.length - 1) {
                                        if (angular.isDefined(parents[parents.length - 1]))
                                            selectedNode = parents[parents.length - 1]; // in case of create new folder
                                        else
                                            selectedNode = parents[parents.length - 2]; // in case of delete folder
                                    }
                                })
                                console.log(parents)
                                console.log($scope.db.tree)
                            }
                            $scope.db.tree = {
                                treedata: treedata,
                                selectedNode: angular.isDefined(selectedNode) ? selectedNode : treedata[0],
                                parents: angular.isDefined(parents) && parents.length ? parents : [treedata[0]]
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Fetching files .. Please wait'
            })
            salesrepdocsService.getSalesrepDocsFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.filelist.length)
                        $scope.db.tree.selectedNode.hasFiles = true
                    else
                        $scope.db.tree.selectedNode.hasFiles = false
                    if ($scope.db.hasOwnProperty('filesChanged'))
                        delete $scope.db.filesChanged
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.hasOwnProperty('doneUpload')) {
                        $scope.db.upload.doneUpload = false
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.db.upload.called = false;
            $scope.filenames = []
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                $scope.filenames.push({
                    filename: $scope.db.files.$files[x].name
                })
            }
            var data = {
                user: $scope.user,
                db: $scope.module,
                node: $scope.db.tree.selectedNode,
                filenames: $scope.filenames,
                parents: []
            }
            $scope.db.files.data = data
        }
    }

    controller.$inject = ['$scope', 'coreService', 'salesrepdocsService', '$filter', '$uibModal']
    angular.module('salesrepdocsModule')
            .controller('SalesrepDocsController', controller)
}());(function () {
    var controller = function ($scope, node, op, coreService, $uibModalInstance, $filter, salesrepdocsService) {
        $scope.node = node
        $scope.op = op
        $scope.foldername = ''
        console.log($scope.parent)
        $scope.addFolder = function () {
            if ($scope.foldername !== '') {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'folder name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
                var folder = {
                    name: $scope.foldername
                }
                if ($filter('lowerCaseCompare')($scope.node.children, folder, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'A folder with the same name exists under the same folder'})
                    return
                }

                if (op === 'add') {
                    var post = {
                        parent: $scope.node.id,
                        name: $scope.foldername,
                        userid: coreService.getUser().user_id
                    }
                    salesrepdocsService.addFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    var post = {
                        nodeid: $scope.node.id,
                        name: $scope.foldername
                    }
                    salesrepdocsService.renameFolder(post).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $uibModalInstance.close('success')
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'op', 'coreService', '$uibModalInstance', '$filter', 'salesrepdocsService']
    angular.module('salesrepdocsModule')
            .controller('SalesrepDocsFolderController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSalesrepDocsRoot: function () {
                return $http.get(coreService.getApi() + 'salesrepdocsroot');
            },
            getSalesrepDocsFiles: function (node) {
                return $http.get(coreService.getApi() + 'salesrepdocsfiles/' + node.id);
            },
            addFolder: function(post){
                return $http.post(coreService.getApi()+'salesrepdocsfolder',post)
            },
            deleteFolder: function(folderid){
                return $http.delete(coreService.getApi()+'salesrepdocsfolder/'+folderid)
            },
            renameFolder: function(post){
                return $http.put(coreService.getApi()+'salesrepdocsfolder',post)
            }
        }
    }
    factory.$inject = ['$http', 'coreService']
    angular.module('salesrepdocsModule')
            .factory('salesrepdocsService', factory)
}());(function () {
    var controller = function ($scope, coreService, salesrepviewService, $q, $filter, Upload, $state, sysadminuserService) {
        $scope.isNew = false
        $scope.fetched = false;
        $scope.tabData = [
            {
                heading: "Main",
                route: "salesrepview.salesrepmain"
            },
            {
                heading: "Phones",
                route: "salesrepview.salesrepphone"
            },
            {
                heading: "Email Addresses",
                route: "salesrepview.salesrepemail"
            },
            {
                heading: "Postal Addresses",
                route: "salesrepview.salesrepaddress"
            },
            {
                heading: "Notes",
                route: "salesrepview.salesrepnote"
            },
            {
                heading: "Actions",
                route: "salesrepview.salesrepaction"
            }
        ];
        $scope.$watch(function () {
            return coreService.getParentDB('salesrep')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "salesrepview.salesrepmain") {
                $scope.db = newVal
                if ($scope.db.hasOwnProperty('selectedRep') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Fetching Sales Rep .. Please wait'})
                    $q.all([
                        salesrepviewService.getActionTypes(),
                        salesrepviewService.getAddressTypes(),
                        salesrepviewService.getEmailTypes(),
                        salesrepviewService.getPhoneTypes(),
                        salesrepviewService.getRepTypes(),
                        salesrepviewService.getTerritories(),
                        salesrepviewService.getCountries(),
                        salesrepviewService.getGroups()
                    ]).then(function (queues) {
                        $scope.actiontypes = queues[0].data
                        $scope.addresstypes = queues[1].data
                        $scope.emailtypes = queues[2].data
                        $scope.phonetypes = queues[3].data
                        $scope.reptypes = queues[4].data
                        $scope.territories = queues[5].data
                        $scope.countries = queues[6].data
                        $scope.groups = queues[7].data
                        console.log($scope.groups)
                        console.log($scope.db.selectedRep)
                        console.log($scope.db.isNew)
                        if($scope.db.hasOwnProperty('isNew') && $scope.db.isNew === true){
                            $scope.isNew = true
                            coreService.getUuid().then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    var uuid = response.data.success
                                    var rep = {
                                        isNew: true,
                                        actions: [],
                                        addresses: [],
                                        company_name: "",
                                        emails: [],
                                        first_name: "",
                                        last_name: "",
                                        notes: [],
                                        notesedit: false,
                                        phones: [],
                                        reptype_id: $scope.reptypes[0].reptype_id,
                                        salesrep_id: uuid,
                                        territory_id: $scope.territories[0].territory_id,
                                        web_page: ""
                                    }

                                    $scope.db.selectedRep = rep
                                    $scope.db.selectedRep.actionsdeleted = []
                                    $scope.db.selectedRep.emailsdeleted = []
                                    $scope.db.selectedRep.phonesdeleted = []
                                    $scope.db.selectedRep.addressesdeleted = []
                                    $scope.db.selectedRep.attachmentsdeleted = []
                                    $scope.db.selectedRep.notesdeleted = []
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        } else
                        if ($scope.db.selectedRep !== null) {
                            salesrepviewService.getRep($scope.db.selectedRep.salesrep_id).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {

                                    $scope.db.selectedRep = response.data
                                    $scope.db.selectedRep.salesrep_confpassword = $scope.db.selectedRep.salesrep_password
                                    $scope.db.selectedRep.actionsdeleted = []
                                    $scope.db.selectedRep.emailsdeleted = []
                                    $scope.db.selectedRep.phonesdeleted = []
                                    $scope.db.selectedRep.addressesdeleted = []
                                    $scope.db.selectedRep.attachmentsdeleted = []
                                    $scope.db.selectedRep.notesdeleted = []
                                    angular.forEach($scope.db.selectedRep.actions, function (action) {
                                        action.actiontypes = []
                                        angular.copy($scope.actiontypes, action.actiontypes)
                                        action.action_date = moment(action.action_date, 'YYYY-MM-DD HH:mm:ss').toDate();
                                        action.action_expirydate = moment(action.action_expirydate, 'YYYY-MM-DD HH:mm:ss').toDate();

                                    })
                                    angular.forEach($scope.db.selectedRep.notes, function (note) {
                                        note.note_date = moment(note.note_date, 'YYYY-MM-DD HH:mm:ss').toDate();
                                    })
                                    angular.forEach($scope.db.selectedRep.emails, function (email) {
                                        email.emailtypes = []
                                        angular.copy($scope.emailtypes, email.emailtypes)
                                    })
                                    angular.forEach($scope.db.selectedRep.phones, function (phone) {
                                        phone.phonetypes = []
                                        angular.copy($scope.phonetypes, phone.phonetypes)
                                    })
                                    angular.forEach($scope.db.selectedRep.addresses, function (address) {
                                        address.addresstypes = []
                                        angular.copy($scope.addresstypes, address.addresstypes)
                                        address.countries = []
                                        angular.copy($scope.countries, address.countries)
                                        salesrepviewService.getStates(address.country.country_id).then(function (states) {
                                            if (!states.data.hasOwnProperty('file')) {
                                                address.states = states.data
                                                salesrepviewService.getCities(address.state.state_id).then(function (cities) {
                                                    if (!cities.data.hasOwnProperty('file')) {
                                                        address.cities = cities.data
                                                        coreService.resetAlert()
                                                        console.log($scope.db)
                                                    } else {
                                                        coreService.resetAlert()
                                                        coreService.setAlert({type: 'exception', message: cities.data})
                                                    }
                                                }, function (response) {
                                                    coreService.resetAlert()
                                                    coreService.setAlert({type: 'exception', message: response.data})
                                                })
                                            } else {
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'exception', message: states.data})
                                            }
                                        }, function (response) {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: response.data})
                                        })
                                    })



                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }
                    }, function (errors) {

                    })
                } else {
                    return
                }
            }
        }, true);

        $scope.saveSalesRep = function () {
            console.log($scope.db.selectedRep)
            angular.forEach($scope.db.selectedRep.actions, function (action) {
                delete action.actiontypes
                action.action_date = $filter('localToUtc')(action.action_date, 'datetime')
                action.action_expirydate = $filter('localToUtc')(action.action_expirydate, 'datetime')
            })
            angular.forEach($scope.db.selectedRep.actionsdeleted, function (action) {
                delete action.actiontypes
            })
            angular.forEach($scope.db.selectedRep.addresses, function (address) {
                delete address.addresstypes
                delete address.cities
                delete address.countries
                delete address.country
                delete address.states
                delete address.state
            })
            angular.forEach($scope.db.selectedRep.addressesdeleted, function (address) {
                delete address.addresstypes
                delete address.cities
                delete address.countries
                delete address.country
                delete address.states
                delete address.state
            })
            angular.forEach($scope.db.selectedRep.emails, function (email) {
                delete email.emailtypes
            })
            angular.forEach($scope.db.selectedRep.emailsdeleted, function (email) {
                delete email.emailtypes
            })
            angular.forEach($scope.db.selectedRep.notes, function (note) {
                note.note_date = $filter('localToUtc')(note.note_date, 'datetime')
            })
            angular.forEach($scope.db.selectedRep.phones, function (phone) {
                delete phone.phonetypes
            })
            angular.forEach($scope.db.selectedRep.phonesdeleted, function (phone) {
                delete phone.phonetypes
            })
            $scope.db.selectedRep.group_id = $scope.groups[0].group_id;
                        console.log($scope.groups[0])
            console.log($scope.db.selectedRep)
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Saving sales rep .. Please wait'})
            salesrepviewService.saveSalesRep($scope.db.selectedRep).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.refresh = true
                    $state.go('salesrep')
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewPhone = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var phone = {}
                    phone.phonetypes = []
                    angular.copy($scope.phonetypes, phone.phonetypes)
                    phone.is_main = 0
                    phone.phone_id = uuid
                    phone.phone_text = ""
                    phone.phonetype_id = phone.phonetypes[0].phonetype_id
                    phone.salesrep_id = $scope.db.selectedRep.salesrep_id
                    phone.edit = true
                    $scope.db.selectedRep.phones.push(phone)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewEmail = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var email = {}
                    email.emailtypes = []
                    angular.copy($scope.emailtypes, email.emailtypes)
                    email.email_id = uuid
                    email.email_text = ""
                    email.emailtype_id = email.emailtypes[0].emailtype_id
                    email.is_main = 0
                    email.salesrep_id = $scope.db.selectedRep.salesrep_id
                    email.edit = true
                    $scope.db.selectedRep.emails.push(email)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewAddress = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var address = {
                        salesrep_id: $scope.db.selectedRep.salesrep_id,
                        address_id: uuid,
                        address_text: "",
                        postal_code: "",
                        is_main: 0
                    }
                    address.addresstypes = []
                    angular.copy($scope.addresstypes, address.addresstypes)
                    address.addresstype_id = address.addresstypes[0].addresstype_id
                    if ($scope.db.selectedRep.addresses.length) {
                        var prevAddress = $scope.db.selectedRep.addresses[$scope.db.selectedRep.addresses.length - 1]
                        address.cities = []
                        angular.copy(prevAddress.cities, address.cities)
                        address.city = {}
                        angular.copy(prevAddress.city, address.city)
                        address.states = []
                        angular.copy(prevAddress.states, address.states)
                        address.state = {}
                        angular.copy(prevAddress.state, address.state)
                        address.countries = []
                        angular.copy(prevAddress.countries, address.countries)
                        address.country = {}
                        angular.copy(prevAddress.country, address.country)
                        address.edit = true
                        console.log(address.cities)
                        $scope.db.selectedRep.addresses.push(address)

                    } else {
                        var address = {
                            salesrep_id: $scope.db.selectedRep.salesrep_id,
                            address_id: uuid,
                            address_text: "",
                            postal_code: "",
                            is_main: 0
                        }
                        address.addresstypes = []
                        angular.copy($scope.addresstypes, address.addresstypes)
                        address.addresstype_id = address.addresstypes[0].addresstype_id
                        address.countries = []
                        angular.copy($scope.countries, address.countries)
                        address.country = {}
                        angular.copy($filter('filter')(address.countries, {country_code: 'CAN'})[0], address.country)
                        //address.country = $filter('filter')(address.countries,{country_code: 'CAD'})[0];
                        salesrepviewService.getStates(address.country.country_id).then(function (states) {
                            if (!states.data.hasOwnProperty('file')) {
                                address.states = states.data
                                address.state = address.states[0]
                                salesrepviewService.getCities(address.state.state_id).then(function (cities) {
                                    if (!cities.data.hasOwnProperty('file')) {
                                        address.cities = cities.data
                                        address.city = address.cities[0]
                                        address.edit = true
                                        $scope.db.selectedRep.addresses.push(address)
                                        coreService.resetAlert()
                                    } else {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: cities.data})
                                    }
                                }, function (response) {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                })
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: states.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewAction = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var action = {
                        attachments: []
                    }
                    action.actiontypes = []
                    angular.copy($scope.actiontypes, action.actiontypes)
                    action.action_date = new Date()
                    action.action_expirydate = null
                    action.action_id = uuid
                    action.actiontype_id = action.actiontypes[0].actiontype_id
                    action.salesrep_id = $scope.db.selectedRep.salesrep_id
                    action.edit = true
                    $scope.db.selectedRep.actions.splice(0, 0, action)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.addNewNote = function () {
            coreService.getUuid().then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    var uuid = response.data.success
                    var note = {
                        salesrep_id: $scope.db.selectedRep.salesrep_id,
                        note_text: "",
                        note_date: new Date(),
                        note_id: uuid,
                        edit: true
                    }
                    $scope.db.selectedRep.notes.splice(0, 0, note)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })

        }

        $scope.checkCity = function (address) {
            if (address.edit) {
                console.log(address)
                if (address.city.city_id === 'NOID') {
                    coreService.addCity(address.city).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            address.city.city_id = response.data.reason
                            angular.forEach($scope.db.selectedRep.addresses, function (add) {
                                if (add.state.state_id === address.city.state_id)
                                    add.cities.push(address.city)
                            })
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        }
        $scope.refreshCities = function ($select, address) {
            var search = $select.search
            var list = []
            angular.copy($select.items, list)
            var FLAG = 'NOID'
            var cities = []
            angular.copy(address.cities, cities)

            /*
             list = list.filter(function (item) {
             return item.city_id !== FLAG
             })
             */
            if (search.length) {
                var userInputItem = {
                    city_id: FLAG,
                    city_name: search,
                    state_id: address.state.state_id
                }
                for (var i = list.length - 1; i >= 0; i--) {
                    if (list[i].city_id === FLAG)
                        list.splice(i, 1)
                }

                list.push(userInputItem)
                console.log(list)
                address.city = userInputItem
            } else {
                $select.items = list
            }

        }

        $scope.selectedCountry = function (item, address) {
            salesrepviewService.getStates(item.country_id).then(function (states) {
                if (!states.hasOwnProperty('file')) {
                    address.states = states.data
                    address.state = address.states[0]
                    salesrepviewService.getCities(address.state.state_id).then(function (cities) {
                        if (!cities.hasOwnProperty('file')) {
                            address.cities = cities.data
                            address.city = address.cities[0]
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: cities.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: states.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.selectedState = function (item, address) {
            salesrepviewService.getCities(item.state_id).then(function (cities) {
                if (!cities.hasOwnProperty('file')) {
                    address.cities = cities.data
                    address.city = address.cities[0]
                    angular.forEach($scope.db.selectedRep.addresses, function (add) {
                        if (!angular.equals(add, address)) {
                            if (add.state.state_id === item.state_id) {
                                var newItem = $filter('filter')(add.cities, {city_id: -1}, true)
                                if (angular.isDefined(newItem)) {
                                    address.cities.push(newItem[0])
                                }
                            }
                        }
                    })
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: cities.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.getFiles = function ($files, action) {
            console.log($files)
            var filenames = []
            var names = []

            for (var x = 0; x < $files.length; x++) {
                filenames.push({filename: $files[x].name, type: $files[x].type})
                names.push($files[x].name)
            }
            var data = {
                db: 'salesrep',
                action: action,
                filenames: filenames
            }
            var url = "api/common/receiveupload.php"
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Uploading files ... Please wait'})
            var upload = Upload.upload({
                url: url,
                methos: "POST",
                fields: data,
                fileFormDataNames: names,
                file: $files
            })
            upload.then(function (response) {
                if (response.data.hasOwnProperty('success')) {
                    if (response.data.success == 1) {
                        for (var x = 0; x < response.data.reason.length; x++) {
                            action.attachments.push(response.data.reason[x])
                        }
                        coreService.resetAlert()
                        coreService.setAlert({type: 'info', message: 'Files uploaded successfule'})
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'error', message: response.data.reason})
                    }
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error', message: response.data})
            }, function (evt) {
                coreService.resetAlert()
                coreService.setAlert({type: 'info', message: "progress: " + parseInt(100.0 * evt.loaded / evt.total) + "%0"})
            })
        }

//        $scope.saveSalesRep = function () {
//            console.log($scope.db.selectedRep)
//            angular.forEach($scope.db.selectedRep.actions, function (action) {
//                delete action.actiontypes
//                action.action_date = $filter('localToUtc')(action.action_date, 'datetime')
//                action.action_expirydate = $filter('localToUtc')(action.action_expirydate, 'datetime')
//            })
//            angular.forEach($scope.db.selectedRep.actionsdeleted, function (action) {
//                delete action.actiontypes
//            })
//            angular.forEach($scope.db.selectedRep.addresses, function (address) {
//                delete address.addresstypes
//                delete address.cities
//                delete address.countries
//                delete address.country
//                delete address.states
//                delete address.state
//            })
//            angular.forEach($scope.db.selectedRep.addressesdeleted, function (address) {
//                delete address.addresstypes
//                delete address.cities
//                delete address.countries
//                delete address.country
//                delete address.states
//                delete address.state
//            })
//            angular.forEach($scope.db.selectedRep.emails, function (email) {
//                delete email.emailtypes
//            })
//            angular.forEach($scope.db.selectedRep.emailsdeleted, function (email) {
//                delete email.emailtypes
//            })
//            angular.forEach($scope.db.selectedRep.notes, function (note) {
//                note.note_date = $filter('localToUtc')(note.note_date, 'datetime')
//            })
//            angular.forEach($scope.db.selectedRep.phones, function (phone) {
//                delete phone.phonetypes
//            })
//            angular.forEach($scope.db.selectedRep.phonesdeleted, function (phone) {
//                delete phone.phonetypes
//            })
//            console.log($scope.db.selectedRep)
//            coreService.resetAlert()
//            coreService.setAlert({type: 'wait', message: 'Saving sales rep .. Please wait'})
//            salesrepviewService.saveSalesRep($scope.db.selectedRep).then(function (response) {
//                if (!response.data.hasOwnProperty('file')) {
//                    coreService.resetAlert()
//                    $scope.db.refresh = true;
//                    $scope.db.isNew = false;
//                    $state.go('salesrep')
//                } else {
//                    coreService.resetAlert()
//                    coreService.setAlert({type: 'exception', message: response.data})
//                }
//            }, function (response) {
//                coreService.resetAlert()
//                coreService.setAlert({type: 'exception', message: response.data})
//            })
////            }
//        }
        
        $scope.parent = {
            showPassword: false,
            showWarning: false,
            confirm: "",
            inputText: 'password',
            resetPassword: function () {
                resetPassword()
            },
//            listOptions: {
//                placeholder: 'item-placeholder',
//                connectWith: '.listcontainer'
//            },
//            isNew: false,
//            models: {
//                selected: null,
//                lists: {
//                    "A": [],
//                    "B": []
//                }
//            }
        }

        $scope.$watch('parent.showPassword', function (newVal) {
            if (newVal)
                $scope.parent.inputType = 'text'
            else
                $scope.parent.inputType = 'password'
        })
        var resetPassword = function () {
            var post = $scope.db.selectedRep;
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Reseting password .. Please wait'
            })
            salesrepviewService.resetPassword(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    if (response.data.hasOwnProperty('success')) {
                        if (response.data.success == 0) {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'error',
                                message: response.data.reason
                            })
                        } else {
                            $scope.db.selectedRep.salesrep_password = response.data.reason
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'success',
                                message: 'Password has been reset and emailed to sales rep'
                            })
                        }
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'error',
                            message: response.data
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'salesrepviewService', '$q', '$filter', 'Upload', '$state', 'sysadminuserService']
    angular.module('salesrepviewModule')
            .controller('SalesrepviewController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getRep: function(repid){
                return $http.get(coreService.getApi()+'salesrep/'+repid)
            },
            getActionTypes: function(){
                return $http.get(coreService.getApi()+'salesrepactiontypes')
            },
            getAddressTypes: function(){
                return $http.get(coreService.getApi()+'salesrepaddresstypes')
            },
            getEmailTypes: function(){
                return $http.get(coreService.getApi()+'salesrepemailtypes')
            },
            getPhoneTypes: function(){
                return $http.get(coreService.getApi()+'salesrepphonetypes')
            },
            getRepTypes: function(){
                return $http.get(coreService.getApi()+'salesrepreptypes')
            },
            getTerritories: function(){
                return $http.get(coreService.getApi()+'salesrepterritories')
            },
            getCountries: function(){
                return $http.get(coreService.getApi()+'salesrepcountries')
            },
            getStates: function(countryid){
                return $http.get(coreService.getApi()+'salesrepstates/'+countryid)
            },
            getCities: function(stateid){
                return $http.get(coreService.getApi()+'salesrepcities/'+stateid)
            },
            getGroups: function(){
                return $http.get(coreService.getApi()+'salesrepgroups')
            },
            saveSalesRep: function(rep){
                return $http.put(coreService.getApi()+'savesalesrep',rep)
            },
            addCity: function(city){
                return $http.post(coreService.getApi()+'addcity',city)
            },
            resetPassword: function(rep){
                return $http.post(coreService.getApi()+'salesrepresetpassword',rep)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('salesrepviewModule')
            .factory('salesrepviewService', factory)
}());(function () {
    var controller = function ($scope, coreService, slideshowService) {
        $scope.$watch(function () {
            return coreService.getCurrentState()
        }, function (newVal) {
            if (newVal === 'slideshow') {
                $scope.id = coreService.getCurrentParams().id;
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'wait',
                    message: 'Getting slideshow .. Please wait'
                })
                slideshowService.getSlideShow($scope.id).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.baseurl = coreService.getBaseUrl()
                        $scope.myInterval = 3000
                        $scope.noWrapSlides = false
                        $scope.activeSlide = 0
                        $scope.slides = response.data
                        console.log($scope.slides)
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                })
            } else {
                return
            }
        })
    }
    controller.$inject = ['$scope', 'coreService', 'slideshowService']
    angular.module('slideshowModule')
        .controller('SlideshowController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSlideShow: function(id){
                return $http.get(coreService.getApi()+'photolibslideshow/'+id)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('slideshowModule')
            .factory('slideshowService', factory)
}());(function () {
    var controller = function ($scope, coreService) {
        
    }  
    controller.$inject = ['$scope', 'coreService']
    angular.module('sysadminModule')
            .controller('SysadminController', controller)
}());(function () {
    var controller = function ($scope, coreService, sysadmingroupService, $state, $q) {
        $scope.tabData = [
            {
                heading: "Main"
                , route: "sysadmingroup.sysadmingroupmain"
            }
            , {
                heading: "Users"
                , route: "sysadmingroup.sysadmingroupusers"
            }
        ]
        $scope.parent = {
            isNew: false
            , models: {
                selected: null
                , lists: {
                    "A": []
                    , "B": []
                }
            }
        }

        $scope.$watch(function () {
            return coreService.getParentDB('sysadmin_sysadmingroups')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "sysadmingroup.sysadmingroupmain") {
                $scope.db = newVal
                $scope.parent.models.lists["A"] = $scope.db.users
                if ($scope.db.selectedGroup !== null) {
                    if (!$scope.parent.isNew) {
                        $q.all([
                            sysadmingroupService.getGroupUsers($scope.db.selectedGroup.group_id)
                        ]).then(function (queues) {
                            $scope.db.selectedGroup.users = queues[0].data
                            $scope.parent.models.lists["B"] = $scope.db.selectedGroup.users
                        }, function (errors) {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception'
                                , message: errors[0].data
                            })
                        })
                    }
                } else {
                    $scope.parent.isNew = true
                    var group = {
                        group_id: ""
                        , group_description: ""
                        , group_name: ""
                        , users: []
                        , is_primary: 0
                    }
                    coreService.getUuid().then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            group.group_id = response.data.success
                            $scope.db.selectedGroup = group
                            $scope.parent.models.lists["B"] = $scope.db.selectedGroup.users
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception'
                                , message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception'
                            , message: response.data
                        })
                    })
                }

            } else {
                return
            }
        }, true)
        $scope.saveGroup = function () {
            if ($scope.db.selectedGroup.group_name === '' || $scope.db.selectedGroup.group_description === '') {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'error'
                    , message: 'required fields are empty'
                })
                return
            }
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Saving user .. Please wait'
            })
            if ($scope.parent.isNew) {
                sysadmingroupService.createGroup($scope.db.selectedGroup).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.refresh = true
                        $state.go('sysadmin.sysadmingroups')
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception'
                            , message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                })
            } else {
                sysadmingroupService.updateGroup($scope.db.selectedGroup).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.refresh = true
                        $state.go('sysadmin.sysadmingroups')
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception'
                            , message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                })
            }
            $state.go('sysadmin.sysadmingroups')
        }
    }
    controller.$inject = ['$scope', 'coreService', 'sysadmingroupService', '$state', '$q']
    angular.module('sysadmingroupModule')
        .controller('SysadmingroupController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getGroupUsers: function(groupid){
                return $http.get(coreService.getApi()+'sysadmingroupusers/'+groupid)
            },
            createGroup: function(group){
                return $http.post(coreService.getApi()+'sysadmingroup',group)
            },
            updateGroup: function(group){
                return $http.put(coreService.getApi()+'sysadmingroup',group)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadmingroupModule')
            .factory('sysadmingroupService', factory)
}());(function () {
    var controller = function ($scope, coreService, sysadmingroupsService, $q, $filter) {
        var items = []
        var fields = [
            {name: 'group_name', display: 'Group name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'group_description', display: 'Description', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'is_primary', display: 'Primary', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.startsWith = function (actual, expected) {
            var lowerStr = (actual + "").toLowerCase();
            return lowerStr.indexOf(expected.toLowerCase()) === 0;
        }
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "sysadmin.sysadmingroups") {
                $scope.module = coreService.getCurrentState().split('.').pop();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    /*
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing Users .. Please wait'})
                        sysadmingroupsService.getSysadminGroups().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                
                                $scope.db.items = response.data.items
                                    $scope.db.count = response.data.count
                                    $scope.db.currentPage = 1
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }*/
                } else {

                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Getting groups .. Please wait'})
                    $scope.db = {}
                    $scope.db.module = $scope.module

                    $scope.db.profile = {}
                    $q.all([
                        sysadmingroupsService.getSysadminGroups(),
                        sysadmingroupsService.getUsersForGroups(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert()
                        $scope.db.profiles = queues[2].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {

                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedGroup'
                                    $scope.db.selectedProfile.uisref = "sysadmingroup.sysadmingroupmain"
                                    $scope.db.selectedProfile.filters = {}
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    console.log($scope.db.selectedProfile)
                                    $scope.db.add = true
                                    $scope.db.users = queues[1].data
                                    $scope.db.items = queues[0].data.items
                                    $scope.db.count = queues[0].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        } else {
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                            $scope.db.selectedProfile.selected = 'selectedGroup'
                            $scope.db.selectedProfile.uisref = "sysadmingroup.sysadmingroupmain"
                            $scope.db.selectedProfile.filters = {}
                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                            angular.copy($scope.db.selectedProfile, $scope.db.profile)
                            $scope.db.add = true
                            $scope.db.users = queues[1].data
                            $scope.db.items = queues[0].data.items
                                    $scope.db.count = queues[0].data.count
                                    $scope.db.currentPage = 1
                                    
                            coreService.setDB($scope.db)
                        }

                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    })
                }
            } else {
                return;
            }
        }, true)

    }
    controller.$inject = ['$scope', 'coreService', 'sysadmingroupsService', '$q', '$filter']
    angular.module('sysadmingroupsModule')
            .controller('SysadmingroupsController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSysadminGroups: function(){
                return $http.get(coreService.getApi()+'sysadmingroups/0')
            },
            getUsersForGroups: function(){
                return $http.get(coreService.getApi()+'sysadminusersforgroups')
            },
            deleteGroup: function(groupid){
                return $http.delete(coreService.getApi()+'sysadmingroup/'+groupid)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadmingroupsModule')
            .factory('sysadmingroupsService', factory)
}());(function () {
    var controller = function ($scope, coreService,sysadminlogService) {
        $scope.$watch(function(){
            return coreService.getParentDB('sysadmin_sysadminlogs')
        },function(newValue){
            if(newValue !== null && angular.isDefined(newValue) && newValue.hasOwnProperty('selectedLog')){
                $scope.db = newValue
                
                
            }else
                return
        },true)
    }  
    controller.$inject = ['$scope', 'coreService','sysadminlogService']
    angular.module('sysadminlogModule')
            .controller('SysadminlogController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getLog: function(id){
                
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadminlogModule')
            .factory('sysadminlogService', factory)
}());(function () {
    var controller = function ($scope, coreService,sysadminlogsService, $q, $filter) {
        var items = []
        var fields = [
            {name: 'user', display: 'User', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'module', display: 'Module', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'log_date', display: 'Date', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'dates', filter_filters: [
                    {id: 'All', name: 'All'},
                    {id: 'today', name: 'today'},
                    {id: '-7', name: 'last 7 days'},
                    {id: '-30', name: 'last 30 days'},
                    {id: '+7', name: 'next 7 days'},
                    {id: '+30', name: 'next 30 days'}
                ], filter_id: 'id', filter_name: 'name', filter_default: 0}
        ]

        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.startsWith = function (actual, expected) {
            var lowerStr = (actual + "").toLowerCase();
            return lowerStr.indexOf(expected.toLowerCase()) === 0;
        }
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "sysadmin.sysadminlogs") {
                $scope.module = coreService.getCurrentState().split('.').pop();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        $scope.db.refresh = false
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing messages .. Please wait'})
                        sysadminlogsService.getSysadminLogs().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                $scope.db.items = response.data.items
                                $scope.db.count = response.data.count
                                $scope.db.currentPage = 1
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Getting messages .. Please wait'})
                    $scope.db = {}
                    $scope.db.module = $scope.module
                    $scope.db.add = false
                    $scope.db.search = true

                    $scope.db.profile = {}
                    $q.all([
                        sysadminlogsService.getSysadminLogs(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        $scope.db.profiles = queues[1].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedLog'
                                    $scope.db.selectedProfile.uisref = "sysadminlog"
                                    $scope.db.selectedProfile.filters = {}
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    console.log($scope.db.selectedProfile)
                                    $scope.db.items = queues[0].data.items
                                    $scope.db.count = queues[0].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }else{
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedLog'
                                    $scope.db.selectedProfile.uisref = "sysadminlog"
                                    $scope.db.selectedProfile.filters = {}
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    console.log($scope.db.selectedProfile)
                                    $scope.db.items = queues[0].data.items
                                    $scope.db.count = queues[0].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    })
                }
            } else {
                return;
            }
        }, true)

    }  
    controller.$inject = ['$scope', 'coreService','sysadminlogsService', '$q', '$filter']
    angular.module('sysadminlogsModule')
            .controller('SysadminlogsController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSysadminLogs: function(){
                return $http.get(coreService.getApi()+'sysadminlogs')
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadminlogsModule')
            .factory('sysadminlogsService', factory)
}());(function () {
    var controller = function ($scope, coreService, sysadminmessageService, $state, $filter) {
        $scope.isNew = false
        $scope.tinymceOptions = {
            menubar: false,
            height: '300px'
        }
        $scope.priorities = [
            {id: 0, name: 'Urgent'},
            {id: 1, name: 'High'},
            {id: 2, name: 'low'}
        ]
        $scope.$watch(function () {
            return coreService.getParentDB('sysadmin_sysadminmessages')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "sysadminmessage") {
                $scope.db = newVal
                if ($scope.db.selectedMessage !== null) {
                    $scope.db.selectedMessage.msg_activate = moment.utc($scope.db.selectedMessage.msg_activate).toDate()
            $scope.db.selectedMessage.msg_expire = moment.utc($scope.db.selectedMessage.msg_expire).toDate()
                } else {
                    $scope.isNew = true
                    var message = {
                        message_id: "",
                        msg_activate: new Date(),
                        msg_expire: new Date(),
                        msg_priority: 0,
                        msg_title: '',
                        msg_body: ''
                    }
                    coreService.getUuid().then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            message.msg_id = response.data.success
                            $scope.db.selectedMessage = message
                            console.log($scope.db.selectedMessage)
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }

            } else {
                return
            }
        }, true)
        $scope.saveMessage = function () {
            $scope.db.selectedMessage.msg_activate = moment.utc($scope.db.selectedMessage.msg_activate).format("YYYY-MM-DD")+' 00:00:00'
            $scope.db.selectedMessage.msg_expire = moment.utc($scope.db.selectedMessage.msg_expire).format('YYYY-MM-DD')+' 23:59:00'
            if($scope.isNew){
                sysadminmessageService.createMessage($scope.db.selectedMessage).then(function(response){
                    if(!response.data.hasOwnProperty('file')){
                        $scope.db.refresh = true
                        $state.go('sysadmin.sysadminmessages')
                    }else{
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                },function(response){
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }else{
                sysadminmessageService.updateMessage($scope.db.selectedMessage).then(function(response){
                    if(!response.data.hasOwnProperty('file')){
                        $scope.db.refresh = true
                        $state.go('sysadmin.sysadminmessages')
                    }else{
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                },function(response){
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        }
    }
    controller.$inject = ['$scope', 'coreService', 'sysadminmessageService', '$state', '$filter']
    angular.module('sysadminmessageModule')
            .controller('SysadminmessageController', controller)
}());(function () {
    var factory = function ($http, coreService,$filter) {
        return {
            createMessage: function(message){
                message.timezone = $filter('date')(new Date(),'Z')
                return $http.post(coreService.getApi()+'sysadminmessage',message)
            },
            updateMessage: function(message){
                message.timezone = $filter('date')(new Date(),'Z')
                return $http.put(coreService.getApi()+'sysadminmessage',message)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService','$filter']
    angular.module('sysadminmessageModule')
            .factory('sysadminmessageService', factory)
}());(function () {
    var controller = function ($scope, coreService, sysadminmessagesService, $q, $filter) {
        var items = []
        var fields = [
            {name: 'msg_title', display: 'Message title', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'msg_activate', display: 'Activate date', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'dates', filter_filters: [
                    {id: 'All', name: 'All'},
                    {id: 'today', name: 'today'},
                    {id: '-7', name: 'last 7 days'},
                    {id: '-30', name: 'last 30 days'},
                    {id: '+7', name: 'next 7 days'},
                    {id: '+30', name: 'next 30 days'}
                ], filter_id: 'id', filter_name: 'name', filter_default: 0},
            {name: 'msg_expire', display: 'Expiry date', type: 'datetime', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'dates', filter_filters: [
                    {id: 'All', name: 'All'},
                    {id: 'today', name: 'today'},
                    {id: '-7', name: 'last 7 days'},
                    {id: '-30', name: 'last 30 days'},
                    {id: '+7', name: 'next 7 days'},
                    {id: '+30', name: 'next 30 days'}
                ], filter_id: 'id', filter_name: 'name', filter_default: 0},
            {name: 'msg_priority', display: 'Priority', type: 'integer', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'integer', filter_source: 'priorities', filter_filters: [
                    {id: -1, name: 'All'},
                    {id: 0, name: 'Urgent'},
                    {id: 1, name: 'High'},
                    {id: 2, name: 'low'}
                ], filter_id: 'id', filter_name: 'name', filter_default: 0}
        ]

        var profile = {
            name: 'default',
            fields: fields,
            filters: {}
        }
        $scope.startsWith = function (actual, expected) {
            var lowerStr = (actual + "").toLowerCase();
            return lowerStr.indexOf(expected.toLowerCase()) === 0;
        }
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "sysadmin.sysadminmessages") {
                $scope.module = coreService.getCurrentState().split('.').pop();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        $scope.db.refresh = false
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing messages .. Please wait'})
                        sysadminmessagesService.getSysadminMessages().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                $scope.db.items = response.data.items
                                $scope.db.count = response.data.count
                                $scope.db.currentPage = 1
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Getting messages .. Please wait'})
                    $scope.db = {}
                    $scope.db.module = $scope.module

                    $scope.db.profile = {}
                    $q.all([
                        sysadminmessagesService.getSysadminMessages(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        $scope.db.profiles = queues[1].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedMessage'
                                    $scope.db.selectedProfile.uisref = "sysadminmessage"
                                    $scope.db.selectedProfile.filters = {}
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    console.log($scope.db.selectedProfile)
                                    $scope.db.add = true
                                    $scope.db.items = queues[0].data.items
                                    $scope.db.count = queues[0].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }else{
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedMessage'
                                    $scope.db.selectedProfile.uisref = "sysadminmessage"
                                    $scope.db.selectedProfile.filters = {}
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    console.log($scope.db.selectedProfile)
                                    $scope.db.add = true
                                    $scope.db.items = queues[0].data.items
                                    $scope.db.count = queues[0].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                        }
                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    })
                }
            } else {
                return;
            }
        }, true)

        
    }
    controller.$inject = ['$scope', 'coreService', 'sysadminmessagesService', '$q', '$filter']
    angular.module('sysadminmessagesModule')
            .controller('SysadminmessagesController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSysadminMessages: function(){
                return $http.get(coreService.getApi()+'sysadminmessages')
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadminmessagesModule')
            .factory('sysadminmessagesService', factory)
}());(function () {
    var controller = function ($scope, coreService, sysadminuserService, $state) {

        $scope.tabData = [
            {
                heading: "Main",
                route: "sysadminuser.sysadminusermain"
            },
            {
                heading: "Security",
                route: "sysadminuser.sysadminusersecurity"
            },
            {
                heading: "Groups",
                route: "sysadminuser.sysadminusergroups"
            }
        ]

        var passwordPattern = /(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z])/
        var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        $scope.requiredFields = [
            {
                field: "first_name",
                message: "First name is required"
            },
            {
                field: "last_name",
                message: "Last name is required"
            },
            {
                field: "username",
                message: "User name is required"
            },
            {
                field: "user_email",
                message: "Email address is required"
            },
            {
                field: "email_password",
                message: "Password is required and must be between 8 and 20 characters and must contain one lower case and one upper case letters, and one non-alpha (a number or a symbol)"
            },
            {
                field: "confirm",
                message: "Password confirmation doesn't match"
            }
        ]
        $scope.parent = {
            showPassword: false,
            showWarning: false,
            confirm: "",
            inputText: 'password',
            resetPassword: function () {
                resetPassword()
            },
            listOptions: {
                placeholder: 'item-placeholder',
                connectWith: '.listcontainer'
            },
            isNew: false,
            models: {
                selected: null,
                lists: {
                    "A": [],
                    "B": []
                }
            }
        }

        $scope.$watch('parent.showPassword', function (newVal) {
            if (newVal)
                $scope.parent.inputType = 'text'
            else
                $scope.parent.inputType = 'password'
        })
        $scope.$watchGroup(['parent.confirm', 'db.selectedUser.email_password'], function (newVal) {
            if (angular.isDefined($scope.db)) {
                if (newVal[0] !== newVal[1]) {
                    $scope.parent.showWarning = true
                } else {
                    $scope.parent.showWarning = false
                }
            }
        })

        $scope.$watch(function () {
            return coreService.getParentDB('sysadmin_sysadminusers')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "sysadminuser.sysadminusermain") {
                $scope.db = newVal
                $scope.parent.models.lists["A"] = $scope.db.groups

                if ($scope.db.selectedUser !== null) {
                    $scope.parent.models.lists["B"] = $scope.db.selectedUser.groups
                    $scope.parent.confirm = $scope.db.selectedUser.email_password
                    if (!$scope.parent.isNew) {
                        sysadminuserService.getUserGroups($scope.db.selectedUser.user_id).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                $scope.db.selectedUser.groups = response.data
                                $scope.db.selectedUser.groupsremoved = []
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({
                                    type: 'exception',
                                    message: response.data
                                })
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        })
                    }
                } else {
                    $scope.parent.isNew = true
                    var user = {
                        answer: "",
                        question: $scope.db.questions[0].question,
                        email_password: "",
                        first_name: "",
                        groups: [],
                        groupsremoved: [],
                        is_locked_out: 0,
                        last_login: moment().format("YYYY-MM-DD HH:mm:ss"),
                        last_name: "",
                        machine_ip: "",
                        phone: "",
                        phone_ext: "",
                        title: "",
                        user_email: "",
                        user_id: "",
                        user_name: "",
                        user_password: ""
                    }
                    coreService.getUuid().then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            user.user_id = response.data.success
                            $scope.db.selectedUser = user
                            $scope.parent.models.lists["B"] = $scope.db.selectedUser.groups
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception',
                                message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    })
                }

            } else {
                return
            }
        }, true)
        $scope.saveUser = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Saving user .. Please wait'
            })
            var valid = true;
            if ($scope.db.selectedUser.first_name === '' || $scope.db.selectedUser.last_name === '' || $scope.db.selectedUser.user_name === '' || $scope.db.selectedUser.user_email === '')
                valid = false;
            if ($scope.db.selectedUser.email_password === '' || $scope.db.selectedUser.email_password !== $scope.parent.confirm)
                valid = false;
            var primary = false;
            angular.forEach($scope.db.selectedUser.groups, function (group) {
                if (group.is_primary == 1) {
                    primary = true;
                }
            })
            if (!valid || !primary) {
                if (!valid) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'error',
                        message: 'Required fields are missing'
                    })
                    return
                }
                if (!primary) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'error',
                        message: 'The user must have a primary group'
                    })
                    return
                }
            }
            if ($scope.parent.isNew) {
                sysadminuserService.createUser($scope.db.selectedUser).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.refresh = true
                        $state.go('sysadmin.sysadminusers')
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                })
            } else {
                console.log($scope.db.selectedUser);
                sysadminuserService.updateUser($scope.db.selectedUser).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        $scope.db.refresh = true
                        $state.go('sysadmin.sysadminusers')
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception',
                            message: response.data
                        })
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                })
            }

        }
        var resetPassword = function () {
            var post = {
                email: $scope.db.selectedUser.user_email,
                user: $scope.db.selectedUser
            }
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait',
                message: 'Reseting password .. Please wait'
            })
            sysadminuserService.resetPassword(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    if (response.data.hasOwnProperty('success')) {
                        if (response.data.success == 0) {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'error',
                                message: response.data.reason
                            })
                        } else {
                            $scope.db.selectedUser.user_password = response.data.reason
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'success',
                                message: 'Password has been reset and emailed to user'
                            })
                        }
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'error',
                            message: response.data
                        })
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception',
                        message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception',
                    message: response.data
                })
            })
        }

    }
    controller.$inject = ['$scope', 'coreService', 'sysadminuserService', '$state']
    angular.module('sysadminuserModule')
        .controller('SysadminuserController', controller)
}());(function(){
  var filter = function($filter){
      function onlyUnique (items){
          var tmp = []
          angular.forEach(items,function(item){
              if(!$filter('filter')(tmp,{group_name: item.group_name}).length)
                  tmp.push(item)
          })
          return tmp
      }
      
      return function(list1,list2){
          angular.forEach(list2,function(item){
              list1 = list1.filter(function(l){
                  return l.group_id != item.group_id
              })
          })
          var primary = $filter('filter')(list2,{is_primary: 1})
          if(primary.length){
              list1 = $filter('filter')(list1,{is_primary: 0})
          }
          list1 = onlyUnique(list1)
          //list1 = _.sortBy(list1,'group_name')
          list1 = list1.filter(function(){ return true })
          return list1
      }
  }  
  filter.$inject = ['$filter']
  angular.module('sysadminuserModule')
          .filter('groupExclude',filter)
}());(function(){
  var filter = function(coreService){
      return function(list){
          var hasPrimary = true
          angular.forEach(list,function(l){
              if(l.is_primary == 1){
                  hasPrimary = false
              }
          })
          
          return hasPrimary
      }
  }  
  filter.$inject = ["coreService"]
  angular.module('sysadminuserModule')
          .filter('hasPrimary',filter)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            resetPassword: function(post){
                return $http.post(coreService.getApi()+'resetpassword',post)
            },
            getUserGroups: function(userid){
                return $http.get(coreService.getApi()+'usergroups/'+userid)
            },
            createUser: function(user){
                return $http.post(coreService.getApi()+'sysadminuser',user)
            },
            updateUser: function(user){
                return $http.put(coreService.getApi()+'sysadminuser',user)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadminuserModule')
            .factory('sysadminuserService', factory)
}());(function () {
    var controller = function ($scope, coreService, sysadminusersService, $q, $filter) {
        var items = []
        var fields = [
            {name: 'first_name', display: 'First name', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'last_name', display: 'Last name', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '',filter_default: ''},
            {name: 'user_name', display: 'User name', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '',filter_default: ''},
            {name: 'user_email', display: 'Email', type: 'string', sort: 0, direction: 0, filter_isfilter: 0, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '',filter_default: ''},
            {name: 'phone', display: 'Phone', type: 'phone', sort: 0, direction: 0, filter_isfilter: 0, filter_type: 'string',filter_source: '', filter_id: '', filter_name: '', filter_default: ''},
            {name: 'is_locked_out', display: 'Locked', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'truefalse', filter_source: '', filter_id: '', filter_name: '',filter_default: 0},
            {name: 'primary_group', display: 'Primary', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'select', filter_source: 'primarygroups', filter_id: 'group_id', filter_name: 'group_name', filter_default: 0}
        ]
        var profile = {
            name: 'default',
            fields: fields,
            filters: {},
            selected: 'selectedUser',
            uisref: "sysadminuser.sysadminusermain"
        }
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "sysadmin.sysadminusers") {
                $scope.module = coreService.getCurrentState().split('.').pop();
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    /*
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing Users .. Please wait'})
                        sysadminusersService.getSysadminUsers().then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                $scope.db.items = response.data.items
                                $scope.db.count = response.data.count
                                $scope.db.currentPage = 1
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }*/
                } else {

                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Getting users .. Please wait'})
                    $scope.db = {}
                    $scope.db.module = $scope.module

                    $scope.db.profile = {}
                    //angular.copy($scope.db.selectedProfile,$scope.profile)
                    $q.all([
                        sysadminusersService.getPrimaryGroups(),
                        sysadminusersService.getSysadminUsers(),
                        sysadminusersService.getQuestions(),
                        sysadminusersService.getGroups(),
                        coreService.getTableProfiles($scope.db.module)
                    ]).then(function (queues) {
                        coreService.resetAlert()
                        $scope.db.profiles = queues[4].data
                        if (!$scope.db.profiles.length) {
                            profile.module = $scope.db.module
                            profile.user_id = coreService.getUser().user_id
                            coreService.writeTableProfile(profile).then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                   
                                    $scope.db.profiles = response.data
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedUser'
                                    $scope.db.selectedProfile.uisref = "sysadminuser.sysadminusermain"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.primarygroups = queues[0].data
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.add = true
                                    $scope.db.questions = queues[2].data
                                    $scope.db.groups = queues[3].data
                                    $scope.db.items = queues[1].data.items
                                    $scope.db.count = queues[1].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            })
                        }else{
                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedUser'
                                    $scope.db.selectedProfile.uisref = "sysadminuser.sysadminusermain"
                                    $scope.db.selectedProfile.filters = {}
                                    $scope.db.selectedProfile.filters.primarygroups = queues[0].data
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.hasOwnProperty('filter_filters')) {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters
                                        }
                                    })
                                    angular.copy($scope.db.selectedProfile, $scope.db.profile)
                                    $scope.db.add = true
                                    $scope.db.questions = queues[2].data
                                    $scope.db.groups = queues[3].data
                                    $scope.db.items = queues[1].data.items
                                    $scope.db.count = queues[1].data.count
                                    $scope.db.currentPage = 1
                                    coreService.setDB($scope.db)
                        }

                    }, function (errors) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: errors[0].data})
                        coreService.setAlert({type: 'exception', message: errors[1].data})
                    })
                }
            } else {
                return;
            }
        }, true)

    }
    controller.$inject = ['$scope', 'coreService', 'sysadminusersService', '$q', '$filter']
    angular.module('sysadminusersModule')
            .controller('SysadminusersController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            getSysadminUsers: function(){
                return $http.get(coreService.getApi()+'sysadminusers')
            },
            getPrimaryGroups: function(){
                return $http.get(coreService.getApi()+'sysadminprimarygroups')
            },
            getQuestions: function(){
                return $http.get(coreService.getApi()+'questions')
            },
            getGroups: function(){
                return $http.get(coreService.getApi()+'allgroups')
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('sysadminusersModule')
            .factory('sysadminusersService', factory)
}());(function () {
    var controller = function ($scope, coreService, $filter, $q, $rootScope, $uibModal) {
        $scope.filterdateopened = [];
        $rootScope.calendar = [];
        $rootScope.selectedItem = [];
        $rootScope.getCookie = function (name) {
            var value = "; " + document.cookie;
            var parts = value.split("; " + name + "=");
            if (parts.length == 2)
                return parts.pop().split(";").shift();
        };

        $rootScope.db = $scope.db;
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && newVal.hasOwnProperty('items')) {
                $scope.db = newVal
                $scope.db.itemsPerPage = 10
                $rootScope.db = newVal;
                if ($scope.db.module === 'techsched')
                    $scope.db.itemsPerPage = 50;
                else
                    $scope.db.itemsPerPage = 20;
                // var json = '{"todayDate": [0,1,2,3] }';
                // document.cookie = "todayDate=" + json;
                // console.log(JSON.parse($rootScope.getCookie('hideUntilData')), 123654);
                // console.log(45);
                // console.log($scope.db);
                // if ($scope.db.module == 'techsched') {
                //     console.log(12);
                //     angular.forEach($scope.db.items, function (item) {
                //         if(item.HideUntil == 1) {
                //
                //         }
                //     });
                //
                // }
                if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh === true) {
                    console.log('calling refresh')
                    $scope.db.refresh = false
                    $scope.filter()
                }
            }
        }, true)
        $scope.pageChanged = function () {
            $scope.filter()
        }

        $scope.selectPage = function (page) {
            $scope.db.currentPage = page;
            $scope.filter()
        }
        $scope.exportData = function () {
            var filters = getFilters()
            var post = {
                filters: filters,
                fields: $scope.db.selectedProfile.fields,
                db: $scope.db.module,
                sort: $filter('filter')($scope.db.selectedProfile.fields, {sort: "1"})[0].name,
                direction: $filter('filter')($scope.db.selectedProfile.fields, {sort: "1"})[0].direction
            }
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Retrieving data .. Please wait'})
            coreService.exportData(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.db.export = response.data
                    coreService.createExcel($scope.db.module)
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})

                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})

            })
        }
        var getFilters = function () {
            var filters = []
            angular.forEach($scope.db.selectedProfile.filters, function (val, key) {
                if (!Array.isArray(val)) {
                    filters.push({key: key, value: val})
                }
            })
            return filters
        }
        $scope.filter = function () {
            if ($scope.db.module === 'techsched') {
                var filters = $scope.db.selectedProfile.filters;
                var sort = {
                    sort: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].name,
                    direction: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].direction
                }
                if ($rootScope.ressetSettings) {
                    $scope.db.selectedProfile.fields = $rootScope.getDefaultFields();
                    sort = {
                        sort: "INC",
                        direction: 0
                    }
                    var resetFilters = $scope.db.selectedProfile.filters;
                    if (Object.keys(filters).length && !(Object.keys(filters).length === 1 && filters.hasOwnProperty('Dates'))) {             
                            angular.forEach(filters, function (val, key) {
                                if (!Array.isArray(val)) {
                                    resetFilters[key] = '';
                                }
                            });
                            console.log(resetFilters);
                    }
                    $rootScope.ressetSettings = false;
                    filters = resetFilters;
                            console.log(filters);
                }
                if (!$scope.db.currentPage) {
                    return false;
                }
                var paging = {
                    currentPage: $scope.db.currentPage,
                    limit: $scope.db.itemsPerPage
                };
                // coreService.resetAlert()
                // coreService.setAlert({type: 'wait', message: 'Filtering and sorting.. Please wait'})
                $rootScope.prepareTechschedObj(filters, sort, paging);
            } else {
                var filters = getFilters();
                console.log(filters);
                var post = {
                    filters: filters,
                    fields: $scope.db.selectedProfile.fields,
                    db: $scope.db.module,
                    sort: $filter('filter')($scope.db.selectedProfile.fields, {sort: "1"})[0].name,
                    direction: $filter('filter')($scope.db.selectedProfile.fields, {sort: "1"})[0].direction,
                    pageNum: $scope.db.currentPage,
                    numRecords: $scope.db.itemsPerPage
                }
                coreService.resetAlert()
                coreService.setAlert({type: 'wait', message: 'Filtering and sorting.. Please wait'})
                 coreService.filterRecords(post).then(function (response) {
                    if (!response.data.hasOwnProperty('file')) {
                        coreService.resetAlert()
                        $scope.db.items = response.data.items
                        $scope.db.count = response.data.count
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                }, function (response) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        }
        $scope.sort = function (field) {
            angular.forEach($scope.db.selectedProfile.fields, function (fld, key) {
                if (fld.name !== field.name) {
                    fld.sort = 0
                    fld.direction = 0;
                } else {
                    if ($scope.db.module === 'techsched') {
                        var filters = $scope.db.selectedProfile.filters;
                        var sort = {
                            sort: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].name,
                            direction: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].direction
                        };
                        var paging = {
                            currentPage: $scope.db.currentPage,
                            limit: $scope.db.itemsPerPage
                        };
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Filtering and sorting.. Please wait'})
                        $rootScope.prepareTechschedObj(filters, sort, paging);
                    } else {
                        var filters = getFilters()
                        var post = {
                            filters: filters,
                            fields: $scope.db.selectedProfile.fields,
                            db: $scope.db.module,
                            sort: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].name,
                            direction: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].direction,
                            pageNum: $scope.db.currentPage,
                            numRecords: $scope.db.itemsPerPage
                        }
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Filtering and sorting.. Please wait'})
                        coreService.filterRecords(post).then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                coreService.resetAlert()
                                $scope.db.items = response.data.items
                                $scope.db.count = response.data.count
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
                    }
                }
            })
        }

        $rootScope.resetSettings = function () {
            $rootScope.activeButton = 'default';
            $rootScope.ressetSettings = true;
            $scope.db.selectedProfile.fields = $rootScope.getDefaultFields();
            console.log($scope.db.selectedProfile.fields)
            angular.forEach($scope.db.selectedProfile.fields, function (field, key) {

                field.sort = $filter('filter')($rootScope.allColumns, {name: field.name})[0].sort
                field.direction = $filter('filter')($rootScope.allColumns, {name: field.name})[0].direction
                if (field.filter_isfilter) {
                    switch (field.filter_type) {
                        case "string":
                            if ($scope.db.selectedProfile.filters.hasOwnProperty(field.name)) {
                                delete $scope.db.selectedProfile.filters[field.name]
                            }
                            break;
                        case "select":
                        case "integer":
                        case "selectdate":
                            if ($scope.db.selectedProfile.filters.hasOwnProperty(field.name)) {
                                delete $scope.db.selectedProfile.filters[field.name];
                                $rootScope.calendar[field.name] = false;
                            }
                            break;
                        case "truefalse":
                            if ($scope.db.selectedProfile.filters.hasOwnProperty(field.name)) {
                                $scope.db.selectedProfile.filters[field.name] = $filter('filter')($rootScope.allColumns, {name: field.name})[0].filter_default
                            }
                            break;
                    }
                }

                if (key == 0) {
                    field.sort = 1;
                }
                else {
                    field.sort = 0;
                }
            })
            console.log($scope.db.selectedProfile.fields)
            if ($scope.db.hasOwnProperty('selectedView')) {
                $scope.db.selectedView = '';
            }
            $scope.filter()
        }

        $rootScope.reset = function () {
            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                field.sort = $filter('filter')($scope.db.profile.fields, {name: field.name})[0].sort
                field.direction = $filter('filter')($scope.db.profile.fields, {name: field.name})[0].direction
                if (field.filter_isfilter) {
                    switch (field.filter_type) {
                        case "string":
                            if ($scope.db.selectedProfile.filters.hasOwnProperty(field.name)) {
                                delete $scope.db.selectedProfile.filters[field.name]
                            }
                            break;
                        case "select":
                        case "integer":
                        case "selectdate":
                            if ($scope.db.selectedProfile.filters.hasOwnProperty(field.name)) {
                                delete $scope.db.selectedProfile.filters[field.name];
                                $rootScope.calendar[field.name] = false;
                            }
                            break;
                        case "truefalse":
                            if ($scope.db.selectedProfile.filters.hasOwnProperty(field.name)) {
                                $scope.db.selectedProfile.filters[field.name] = $filter('filter')($scope.db.profile.fields, {name: field.name})[0].filter_default
                            }
                            break;

                    }
                }
            })
//            if ($scope.db.hasOwnProperty('selectedView')) {
//                $scope.db.selectedView = '';
//            }
            $scope.filter()
        }

        $scope.switchSort = function (field) {
            if (field.sort === 1) {
                if (field.direction === 1) {
                    $rootScope.resetSettings();
                    field.sort = 0;
                }
                else {
                    field.direction = 1;
                    $scope.sort(field);
                }
            }
            else {
                field.sort = 1;
                $scope.sort(field);
            }
        };

        $scope.setSelectedItem = function (field) {
            if ($scope.db.selectedProfile.filters[field.name] !== '') {
                $rootScope.selectedItem[field.name] = {};
                $rootScope.selectedItem[field.name].searchDate = '';
                var id = $scope.db.selectedProfile.filters[field.name];
                var item = $filter('filter')($scope.db.selectedProfile.filters[field.filter_source], {id: id})[0];
                console.log(id);
                console.log(item);
                $rootScope.selectedItem[field.name].item = item;
                // this block is temporary until adding it in DB
                if (id === 'Blank' || id === 'NotBlank' || id === 0 || id === 1 || id === 2 || id === 3 || id === 4) {
                    $rootScope.selectedItem[field.name].item.has_calendar = 'no';
                }
                else if (id === 5 || id === 6 || id === 7) {
                    $rootScope.selectedItem[field.name].item.has_calendar = 'yes';
                }
                else {
                    $rootScope.selectedItem[field.name].item.has_calendar = 'range';
                }
                if (id === 8) {
                    $rootScope.selectedItem[field.name].searchDate = {startDate: null, endDate: null};
                }
                else if (id === 5 || id === 6 || id === 7) {
                    $rootScope.selectedItem[field.name].searchDate = new Date();
                }
                if ($rootScope.selectedItem[field.name].item.has_calendar === 'no') {
                    var response = TechSchedService.setDateSearchField(item, $rootScope.selectedItem[field.name].searchDate);
                    $rootScope.selectedItem[field.name].searchDate = response.searchDate;
                    $scope.db.selectedProfile.filters[field.name] = $rootScope.selectedItem[field.name].searchDate;
                    console.log($scope.db.selectedProfile.filters[field.name]);
                    console.log($rootScope.selectedItem);
                    $scope.filter();
                }
            } else {
                $scope.filter();
            }
        };
        $scope.setSearchDate = function (field) {
            console.log($rootScope.selectedItem[field.name].searchDate);
//            if ($scope.selectedItem[field.name].item.has_calendar === 'yes') {
            var response = TechSchedService.setDateSearchField($rootScope.selectedItem[field.name].item, $rootScope.selectedItem[field.name].searchDate);
//                    $scope.selectedItem.searchDate = response.searchDate;
            $scope.db.selectedProfile.filters[field.name] = response.searchDate;
            console.log($scope.db.selectedProfile.filters[field.name]);
            console.log($rootScope.selectedItem);
            $scope.filter();
//            }
        };
//        $scope.$watch($scope.currentFieldName,function(newVal){
//            console.log(newVal);
//            if(newVal && newVal.hasOwnProperty($scope.currentFieldName))
//                $scope.$watch($scope.selectedItem[$scope.currentFieldName].searchDate,function(newVal2){
//            console.log(newVal2);
//                });
//        });


    }
    controller.$inject = ['$scope', 'coreService', '$filter', '$q', '$rootScope', '$uibModal']
    angular.module('tableModule')
            .controller('TableController', controller)
}());(function () {
    var controller = function ($scope, coreService, TechSchedService, $filter, $rootScope, $q, $uibModal, $state, $timeout, Excel) {
        $scope.tabData = [
            {
                heading: "Schedule",
                route: "techsched.shedule"
            },
            {
                heading: "Contracts",
                route: "techsched.techschedwonote"
            },
            {
                heading: "Work Order",
                route: "techsched.techschedwo"
            },
            {
                heading: "Shipping",
                route: "techsched.techschedshipping"
            }
        ];
        $scope.class = "";
        $scope.currentItem = {};
        $scope.selecteditem = [];
        $scope.db = {};
        $rootScope.tabelWidth = 1360;

        $scope.hstep = 1;
        $scope.mstep = 15;

        $scope.ismeridian = true;

        $rootScope.ressetSettings = false;

        $scope.getNowDate = function () {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;

            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd
            }
            if (mm < 10) {
                mm = '0' + mm
            }

            return dd + '/' + mm + '/' + yyyy;
        }

        $scope.dateNow = $scope.getNowDate();

        $scope.isActive = function (item) {
            return $scope.selected === item;
        };

        $rootScope.activeButton = 'default';

        $scope.isActiveButton = function (buttonName) {
            return $rootScope.activeButton === buttonName;
        };

        $scope.setCurrentItem = function (item) {
            $scope.currentItem = item;
            $scope.selecteditem = item;

            if ($scope.currentItem.LTDShipDate !== '') {
                $scope.currentItem.LTDShipDate = new Date($scope.currentItem.LTDShipDate);
            }

            if ($scope.currentItem.INCShipDate !== '') {
                $scope.currentItem.INCShipDate = new Date($scope.currentItem.INCShipDate);
            }

            if ($scope.currentItem.TechOnSiteDate !== '') {
                $scope.currentItem.TechOnSiteDate = new Date($scope.currentItem.TechOnSiteDate);
            }
            if ($scope.currentItem.TechOnSiteTime !== '' || $scope.currentItem.TechOnSiteTime !== undefined) {
                console.log("TechOnSiteTime " + $scope.currentItem.TechOnSiteTime);
                if ($scope.currentItem.TechOnSiteTime.toString().length === 0) {
//                    var time = new Date();
//                    time.setHours('00');
//                    time.setMinutes('00');
//                    $scope.currentItem.TechOnSiteTime = time;
                } else
                if ($scope.currentItem.TechOnSiteTime.toString().length < 10) {
                    var timeparts = $scope.currentItem.TechOnSiteTime.split(':');
                    console.log(timeparts);
                    var time = new Date();
                    time.setHours(timeparts[0]);
                    time.setMinutes(timeparts[1]);
                    $scope.currentItem.TechOnSiteTime = time;
                }
//                $scope.currentItem.TechOnSiteTime = $filter('date')($scope.currentItem.TechOnSiteTime, 'hh:mm a');
                console.log("TechOnSiteTime " + $scope.currentItem.TechOnSiteTime);
            }

            if ($scope.currentItem.OnSiteDate !== '') {
                $scope.currentItem.OnSiteDate = new Date($scope.currentItem.OnSiteDate);
            }

            if ($scope.currentItem.DateCompleted !== '') {
                $scope.currentItem.DateCompleted = new Date($scope.currentItem.DateCompleted);
            }

            if ($scope.currentItem.HideUntil !== '') {
                $scope.currentItem.HideUntil = new Date($scope.currentItem.HideUntil);
            }


            $scope.selected = item;
            $scope.CalculateManHour();
            // $scope.currentItem.TechOnSiteDateTime = new Date($scope.currentItem.TechOnSiteDate + ' ' + $scope.currentItem.TechOnSiteTime + ':00');

        };

        $scope.tableTemplate = 'app/techschedModule/views/techschedbutton.html';
        $scope.animationsEnabled = true;
        $scope.viewStatus = '';
        $scope.dateStatus = '';
        $scope.viewAll = 'ALL';

        $scope.fieldsAccess = {
            schedadmin: true,
            scheduser: true,
            schedship: true,
            schedviewer: true
        };

        $scope.views = [
            {id: 'All', name: 'All Records'},
            {id: 'Default', name: 'Default'},
            {id: 'Hidden', name: 'Hidden'},
            {id: 'NotHidden', name: 'Not Hidden'},
            {id: 'Completed', name: 'Completed'},
            {id: 'NotCompleted', name: 'Not Completed'},
        ];

        var Dates = [
            {id: 'Blank', name: 'Blank', has_calendar: 'no'},
            {id: 'NotBlank', name: 'Not Blank', has_calendar: 'no'},
            {id: '0', name: 'Today', has_calendar: 'no'},
            {id: '1', name: 'Last 7 days', has_calendar: 'no'},
            {id: '2', name: 'Month to date', has_calendar: 'no'},
            {id: '3', name: 'Year to date', has_calendar: 'no'},
            {id: '4', name: 'The previous Month', has_calendar: 'no'},
            {id: '5', name: 'Specific Date', has_calendar: 'yes'},
            {id: '6', name: 'All Dates Before', has_calendar: 'yes'},
            {id: '7', name: 'All Dates After', has_calendar: 'yes'},
            {id: '8', name: 'Date Range', has_calendar: 'range'}
        ]
        /*
         var fields = [
         {name: 'INC', display: 'INC#', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'LTD', display: 'LTD#', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'SalesOffice', display: 'Office', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Action', display: 'Action', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Customer', display: 'Customer', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Alias', display: 'Alias', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Width', display: 'Width', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Length', display: 'Length', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Insulated', display: 'Insulated', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'INCShipDate', display: 'INCShipDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: true},
         {name: 'LTDShipDate', display: 'LTDShipDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: true},
         {name: 'OnSiteDate', display: 'OnSiteDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: true},
         {name: 'Sorter', display: 'Sorter', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
         {name: 'Primary', display: 'Primary', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Company', display: 'Company', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'WOTxfrDate', display: 'WOTxfrDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'Hold', display: 'Hold', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'LeaseTerm', display: 'LeaseTerm', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'WOTypeNote', display: 'WOTypeNote', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Location', display: 'Location', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'ContactName', display: 'ContactName', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'ContactNumber', display: 'ContactNumber', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Contacted', display: 'Contacted', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'DwgNum', display: 'DwgNum', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Color', display: 'Color', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Fabric', display: 'Fabric', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Anchorage', display: 'Anchorage', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'INCShipped', display: 'INCShipped', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'LTDShipped', display: 'LTDShipped', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'LTDtoSite', display: 'LTDtoSite', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'LTDtoSLC', display: 'LTDtoSLC', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'ToolsShipped', display: 'ToolsShipped', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'OnSiteConfirmed', display: 'OnSiteConfirmed', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TechOnSite1', display: 'TechOnSite1', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TechOnSiteDate', display: 'TechOnSiteDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'ProjectedCompletionDate', display: 'ProjectedCompletionDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'TechOnSiteTime', display: 'TechOnSiteTime', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TechOnSiteConfirmed', display: 'TechOnSiteConfirmed', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TechName', display: 'TechName', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TechConfirmed', display: 'TechConfirmed', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TCCoordinator', display: 'TCCoordinator', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'ToolsReturned', display: 'ToolsReturned', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: '0', field_default: false},
         {name: 'DateCompleted', display: 'DateCompleted', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'Comments', display: 'Comments', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'WOInfo', display: 'WOInfo', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TCNotes', display: 'TCNotes', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'SOInfo', display: 'SOInfo', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'SpInstruction', display: 'SpInstruction', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Hidden', display: 'Hidden', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'EmailAddress', display: 'EmailAddress', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Logo', display: 'Logo', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'ToolsReqd', display: 'ToolsReqd', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Fax', display: 'Fax', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'OnSiteDays', display: 'OnSiteDays', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'LaborersReqd', display: 'LaborersReqd', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'TechExpenses', display: 'TechExpenses', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Freight', display: 'Freight', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'HideUntil', display: 'HideUntil', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'INCDateConfirmed', display: 'INCDateConfirmed', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'LTDDateConfirmed', display: 'LTDDateConfirmed', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
         {name: 'CautionFlag', display: 'CautionFlag', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STCustomer', display: 'STCustomer', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STAddress1', display: 'STAddress1', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STAddress2', display: 'STAddress2', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STAddress3', display: 'STAddress3', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STAddress4', display: 'STAddress4', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STAddress5', display: 'STAddress5', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STZip', display: 'STZip', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STPhone1', display: 'STPhone1', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STPhone2', display: 'STPhone2', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STFax', display: 'STFax', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STContact', display: 'STContact', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'STEmail', display: 'STEmail', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'SalesPerson', display: 'SalesPerson', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'LTDPList', display: 'LTDPList', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'INCPList', display: 'INCPList', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'RefSONum', display: 'RefSONum', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'RefCompany', display: 'RefCompany', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Archive', display: 'Archive', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'PaymentRequired', display: 'PaymentRequired', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
         {name: 'Skylight', display: 'Skylight', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false}
         ];*/


        var fields = [
            {name: 'INC', display: 'INC#', type: 'string', sort: 1, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'LTD', display: 'LTD#', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'SalesOffice', display: 'Office', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'Action', display: 'Action', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'Customer', display: 'Customer', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'Width', display: 'Width', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'Length', display: 'Length', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'Insulated', display: 'Insulated', type: 'truefalse', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'INCShipDate', display: 'INCShipDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: true},
            {name: 'LTDShipDate', display: 'LTDShipDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: true},
            {name: 'OnSiteDate', display: 'OnSiteDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: true},
            {name: 'Sorter', display: 'Sorter', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: true},
            {name: 'Alias', display: 'Alias', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Primary', display: 'Primary', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Company', display: 'Company', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'WOTxfrDate', display: 'WOTxfrDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'Hold', display: 'Hold', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'LeaseTerm', display: 'LeaseTerm', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'WOTypeNote', display: 'WOTypeNote', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Location', display: 'Location', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'ContactName', display: 'ContactName', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'ContactNumber', display: 'ContactNumber', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Contacted', display: 'Contacted', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'DwgNum', display: 'DwgNum', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Color', display: 'Color', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Fabric', display: 'Fabric', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Anchorage', display: 'Anchorage', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'INCShipped', display: 'INCShipped', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'LTDShipped', display: 'LTDShipped', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'LTDtoSite', display: 'LTDtoSite', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'LTDtoSLC', display: 'LTDtoSLC', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'ToolsShipped', display: 'ToolsShipped', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'OnSiteConfirmed', display: 'OnSiteConfirmed', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TechOnSite1', display: 'TechOnSite1', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TechOnSiteDate', display: 'TechOnSiteDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'ProjectedCompletionDate', display: 'ProjectedCompletionDate', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'TechOnSiteTime', display: 'TechOnSiteTime', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TechOnSiteConfirmed', display: 'TechOnSiteConfirmed', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TechName', display: 'TechName', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TechConfirmed', display: 'TechConfirmed', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TCCoordinator', display: 'TCCoordinator', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'ToolsReturned', display: 'ToolsReturned', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: '0', field_default: false},
            {name: 'DateCompleted', display: 'DateCompleted', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
//            {name: 'SOInfo', display: 'SOInfo', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
//            {name: 'SpInstruction', display: 'SpInstruction', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Hidden', display: 'Hidden', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'EmailAddress', display: 'EmailAddress', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Logo', display: 'Logo', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'ToolsReqd', display: 'ToolsReqd', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Fax', display: 'Fax', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'OnSiteDays', display: 'OnSiteDays', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'LaborersReqd', display: 'LaborersReqd', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'TechExpenses', display: 'TechExpenses', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Freight', display: 'Freight', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'HideUntil', display: 'HideUntil', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'INCDateConfirmed', display: 'INCDateConfirmed', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'LTDDateConfirmed', display: 'LTDDateConfirmed', type: 'date', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'selectdate', filter_source: 'Dates', filter_filters: Dates, filter_id: 'id', filter_name: 'name', filter_default: 0, field_default: false},
            {name: 'CautionFlag', display: 'CautionFlag', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'STFax', display: 'STFax', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'STContact', display: 'STContact', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'SalesPerson', display: 'SalesPerson', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'LTDPList', display: 'LTDPList', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'INCPList', display: 'INCPList', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'RefSONum', display: 'RefSONum', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'RefCompany', display: 'RefCompany', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'PaymentRequired', display: 'PaymentRequired', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false},
            {name: 'Skylight', display: 'Skylight', type: 'string', sort: 0, direction: 0, filter_isfilter: 1, filter_type: 'string', filter_source: '', filter_id: '', filter_name: '', filter_default: '', field_default: false}
        ];
        console.log(fields)

        $rootScope.getDefaultFields = function () {
            console.log(fields)

            $rootScope.defaultFields = [];
            angular.forEach(fields, function (val, key) {

                if (val.field_default) {
                    $rootScope.defaultFields.push(val);
                }
            });

            console.log($rootScope.defaultFields)
            return $rootScope.defaultFields;
        }


        $rootScope.allColumns = fields;

        var moduleData = {
            fields: fields,
            filters: {Dates: Dates},
            module: 'techsched',
            selectedRow: 'selectedTechsched',
            viewSref: 'techschedview.techschedmain'
        };
        coreService.setProfileData(moduleData);

        var profile = {
            name: 'default',
            fields: [],
            filters: {}
        }
        $scope.page = 1;
        $scope.limit = 50;
        $scope.sidx = $filter('filter')(fields, {sort: 1})[0].name;
        $scope.sord = $filter('filter')(fields, {sort: 1})[0].direction === 0 ? 'asc' : 'desc';
        var data = {
            PageNumber: $scope.page,
            Limit: $scope.limit,
            sidx: $scope.sidx,
            sord: $scope.sord,
            cols: '',
            ViewStatus: $scope.viewStatus,
            DateStatus: $scope.dateStatus,
            ViewALL: $scope.viewAll
        };

        $rootScope.prepareTechschedObj = function (filters, sort, paging) {
            console.log(filters);
            data = {
                PageNumber: $scope.page,
                Limit: $scope.limit,
                sidx: $scope.sidx,
                sord: $scope.sord,
                cols: '',
                ViewStatus: $scope.viewStatus,
                DateStatus: $scope.dateStatus,
                ViewALL: $scope.viewAll
            };
            $scope.filters = filters; // will use this var in getFilteredTechSched function
            if (Object.keys(filters).length && !(Object.keys(filters).length === 1 && filters.hasOwnProperty('Dates'))) {
                angular.forEach(filters, function (val, key) {

                    if (!Array.isArray(val)) {
                        data[key] = val;
                    }
                });
            } else {
                angular.forEach($scope.db.profile.fields, function (field) {
                    if (data.hasOwnProperty(field.name))
                        data[field.name] = '';
                });
            }
            $scope.sidx = sort.sort;
            $scope.sord = sort.direction === 0 ? 'asc' : 'desc';
            data.sidx = $scope.sidx;
            data.sord = $scope.sord;

            $scope.page = paging.currentPage;
            $scope.limit = paging.limit;
            data.PageNumber = $scope.page;
            data.Limit = $scope.limit;
            console.log(data);
            if ($scope.db.selectedView === '') {
                $scope.db.selectedView = $filter('filter')($scope.views, {id: 'Default'})[0].id;
            }

            $scope.changeView();
        };

        $scope.privileges = coreService.getPrivileges();

        if ($scope.privileges.schedadmin) {
            $scope.fieldsAccess.schedadmin = true;
            $scope.fieldsAccess.scheduser = true;
            $scope.fieldsAccess.schedship = true;
            $scope.fieldsAccess.schedviewer = true;
        } else if ($scope.privileges.schedcontract || $scope.privileges.schedtech) {
            $scope.fieldsAccess.schedadmin = false;
            $scope.fieldsAccess.scheduser = true;
            $scope.fieldsAccess.schedship = true;
            $scope.fieldsAccess.schedviewer = true;
        } else if ($scope.privileges.schedship) {
            $scope.fieldsAccess.schedadmin = false;
            $scope.fieldsAccess.scheduser = false;
            $scope.fieldsAccess.schedship = true;
            $scope.fieldsAccess.schedviewer = true;
        } else if ($scope.privileges.schedviewer) {
            $scope.fieldsAccess.schedadmin = false;
            $scope.fieldsAccess.scheduser = false;
            $scope.fieldsAccess.schedship = false;
            $scope.fieldsAccess.schedviewer = true;
        }


        $scope.CalculateManHour = function () {
            $scope.currentItem.ManHours = parseInt($scope.currentItem.LaborersReqd) * 8 * parseInt($scope.currentItem.OnSiteDays);
        };

        // $scope.$watch(function () {
        //         return coreService.getDB();
        //     }, function (newVal) {
        //         if (coreService.getCurrentState() === 'techsched') {
        //             $scope.module = coreService.getCurrentState()
        //             if (newVal !== null && angular.isDefined(newVal)) {
        //                 $scope.db = newVal
        //                 if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
        //                     $scope.db.refresh = false
        //                     coreService.resetAlert()
        //                     coreService.setAlert({type: 'wait', message: 'Refreshing Tech Schedule .. Please wait'})
        //                     $scope.getAllTechSched();
        //                 }
        //             } else {
        //                 coreService.resetAlert()
        //                 coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'})
        //
        //                 $scope.db = {}
        //                 $scope.db.module = $scope.module
        //
        //                 $scope.db.profile = {}
        //
        //             }
        //         } else {
        //             return
        //         }
        //     }, true)

        $scope.getFilteredTechSched = function (status) {

            $rootScope.activeButton = status;
            $scope.db.selectedView = status;

            if (status == 'Hidden' || status == 'NotHidden') {
                data.ViewStatus = status;
            } else if (status == 'DateMissing' || status == 'DateCompleted') {
                data.DateStatus = status
            } else if (status == 'default') {
                data.ViewStatus = 'NotHidden';
                data.DateStatus = 'DateMissing';
                data.ViewALL = 'NotALL';
            } else {
                data.ViewStatus = 'NotHidden';
                data.DateStatus = 'DateMissing';
                data.ViewALL = 'ALL';
            }

            $scope.viewStatus = data.ViewStatus;
            $scope.dateStatus = data.DateStatus;
            $scope.viewAll = data.ViewALL;
            $scope.page = 1;
            data = {
                PageNumber: $scope.page,
                Limit: $scope.limit,
                sidx: $scope.sidx,
                sord: $scope.sord,
                cols: '',
                ViewStatus: $scope.viewStatus,
                DateStatus: $scope.dateStatus,
                ViewALL: $scope.viewAll
            };
            if (angular.isDefined($scope.filters) && Object.keys($scope.filters).length && !(Object.keys($scope.filters).length === 1 && $scope.filters.hasOwnProperty('Dates'))) {
                angular.forEach($scope.filters, function (val, key) {

                    if (!Array.isArray(val)) {
                        data[key] = val;
                    }
                });
            } else {
                angular.forEach($scope.db.profile.fields, function (field) {
                    if (data.hasOwnProperty(field.name))
                        data[field.name] = '';
                });
            }

            $scope.getAllTechSched()
        }

        $scope.exportToExcel = function (tableId) {
            var exportHref = Excel.tableToExcel(tableId, 'WireWorkbenchDataExport');
            // $timeout(function(){location.href=exportHref;},100);
            var a = document.createElement('a');
            a.href = exportHref;
            a.download = 'Schedules.xls';
            a.click();

        }
        // getAllTechSched function to get grid data
        $scope.getAllTechSched = function () {
            $scope.db.profile = $filter('filter')($scope.db.profiles, {profile_name: $scope.db.selectedProfile.profile_name})[0];
            console.log($scope.db.profile);
//        coreService.resetAlert();
//        coreService.setAlert({type: 'wait', message: 'Getting Schedule data .. Please wait'});
            $scope.db.items = [];
            console.log(data);
            $scope.fromItem = 1;
            $scope.toItem = data.Limit;
            $scope.total = '';
            if (data.PageNumber !== 1) {
                $scope.fromItem = (data.PageNumber - 1) * data.Limit + 1;

                $scope.toItem = data.PageNumber * data.Limit;

            }
            // return false;
            TechSchedService.getAllTechSched(data)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            $scope.total = response.data.totalCount;
                            if ($scope.total < $scope.toItem) {
                                $scope.toItem = $scope.total;
                            }
                            console.log(response.data);
                            if (angular.isArray(response.data.data) || angular.isObject(response.data.data)) {
                                if (response.data.data.length)
                                    $scope.db.items = response.data.data;
                                else
                                    $scope.db.items[0] = response.data.data;

                                coreService.resetAlert();
                            } else {
                                $rootScope.reset();
                                coreService.resetAlert();
                                coreService.setAlert({type: 'error', message: 'There is no result for this filter, removing it'});

                            }
                            console.log($scope.db)
                            $scope.db.count = response.data.totalCount;
                            $scope.db.numPages = response.data.totalPages;
                            $scope.db.currentPage = $scope.page;
                            $scope.db.itemsPerPage = $scope.limit;
                            coreService.setDB($scope.db);
                        } else {
                            console.log(response.data);
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

        $scope.changeView = function () {
//        coreService.resetAlert();
//        coreService.setAlert({type: 'wait', message: 'Getting view .. Please wait'});
            switch ($scope.db.selectedView) {
                case 'All':
                    $scope.viewAll = 'ALL';
                    $scope.viewStatus = 'NotHidden';
                    $scope.dateStatus = 'DateMissing';
                    break;
                case 'Default':
                    $scope.viewAll = 'NotALL';
                    $scope.viewStatus = 'NotHidden';
                    $scope.dateStatus = 'DateMissing';
                    break;
                case 'Hidden':
                    $scope.viewAll = 'NotALL';
                    $scope.viewStatus = 'Hidden';
                    $scope.dateStatus = '';
                    break;
                case 'NotHidden':
                    $scope.viewAll = 'NotALL';
                    $scope.viewStatus = 'NotHidden';
                    $scope.dateStatus = '';
                    break;
                case 'Completed':
                    $scope.viewAll = 'NotALL';
                    $scope.viewStatus = '';
                    $scope.dateStatus = 'DateCompleted';
                    break;
                case 'NotCompleted':
                    $scope.viewAll = 'NotALL';
                    $scope.viewStatus = '';
                    $scope.dateStatus = 'DateMissing';
                    break;
            }
            data.ViewALL = $scope.viewAll;
            data.ViewStatus = $scope.viewStatus;
            data.DateStatus = $scope.dateStatus;
            $scope.getAllTechSched();
        };

        $scope.changeProfile = function () {
//            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_id: $scope.db.selectedProfile.profile_id})[0];
            if ($scope.db.selectedProfile) {
                $scope.db.selectedProfile.selected = 'selectedTechsched'
                $scope.db.selectedProfile.uisref = "techschedview.techschedmain"
                $scope.db.selectedProfile.filters = {};
                $scope.db.selectedProfile.filters.Dates = Dates;
                angular.forEach($scope.db.selectedProfile.fields, function (field) {
                    if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                        $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                    }
                });
                $scope.db.refresh = true;
                console.log($scope.db.selectedProfile);
                coreService.setDB($scope.db);
            }
        };

        var init = function () {

            localStorage.clear();
//            if user is George Laliberte or Gerald Cobbe show them the notification about the hidden jobs	
            if (coreService.getUser().user_id === 'db1-cf62e20f-6027-11e4-b1b7-525400b87f6d' ||
                    coreService.getUser().user_id === 'db1-cf438ce9-6027-11e4-b1b7-525400b87f6d' || coreService.getUser().user_name === "LaliberteG" || coreService.getUser().user_name === "CobbeG") {
                TechSchedService.getUpdatedHideJobs()
                        .then(function (response) {
                            console.log(response.data);
                            if (!response.data.hasOwnProperty('file')) {
                                if (response.data != 0) {
                                    var jobs = response.data.replace(/(?:\\[rn]|[\r\n]+)+/g, '\n');
                                    var message = "The following jobs are being brought back into the schedule:\r\n"
                                            + jobs;
                                    alert(message);
//                                    coreService.resetAlert();
//                                    coreService.setAlert({type: 'info', message: message});
                                }
                            } else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: error.data});
                        });
            }

            var newVal = coreService.getDB();
            console.log(newVal)
//            console.log(angular.isDefined(newVal))
//            console.log(newVal !== null)
            if (coreService.getCurrentState() === 'techsched') {
                $scope.module = coreService.getCurrentState()
                if (angular.isDefined(newVal) && newVal !== null) {
                    $scope.db = newVal
                    if ($scope.db.hasOwnProperty('refresh') && $scope.db.refresh) {
                        $scope.db.refresh = false
                        coreService.resetAlert()
                        coreService.setAlert({type: 'wait', message: 'Refreshing Tech Schedule .. Please wait'})
                        $scope.db.selectedView = $filter('filter')($scope.views, {id: 'Default'})[0].id;
                        console.log($scope.db.selectedView);
                        $scope.changeView();
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Initializing module .. please wait'})
                    $scope.db = {};
                    $scope.db.profiles = [];
                    $scope.db.profiles.push(profile);
                    if (coreService.getCurrentState() === 'techsched') {
                        $scope.module = 'techsched';
                    }
                    $scope.db.module = $scope.module;
                    $scope.db.small = true
                    $scope.db.selectedView = $filter('filter')($scope.views, {id: 'Default'})[0].id;
                    console.log($scope.db.selectedView);
                    coreService.getTableProfiles($scope.db.module)
                            .then(function (response) {
                                coreService.resetAlert();
                                $scope.db.profiles = response.data;
                                console.log($scope.db.profiles);
                                if (!$scope.db.profiles.length) {
                                    angular.forEach(fields, function (value) {
                                        if (value.field_default) {
                                            profile.fields.push($filter('filter')(fields, {name: value.name})[0]);
                                        }
                                    });
                                    profile.module = $scope.db.module;
                                    profile.user_id = coreService.getUser().user_id;
                                    console.log(profile);
                                    coreService.writeTableProfile(profile).then(function (response) {
                                        if (!response.data.hasOwnProperty('file')) {
                                            $scope.db.profiles = response.data;
                                            console.log($scope.db.profiles);
                                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                            $scope.db.selectedProfile.selected = 'selectedTechsched'
                                            $scope.db.selectedProfile.uisref = "techschedview.techschedmain"
                                            $scope.db.selectedProfile.filters = {};
                                            $scope.db.selectedProfile.filters.Dates = Dates;
//                                $scope.db.selectedProfile.filters.Dates.unshift({name: 'Blank'});
                                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                                }
                                            });
                                            console.log($scope.db.selectedProfile);
//                                angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                            $scope.getAllTechSched();
                                        } else {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: response.data})
                                        }
                                    }, function (response) {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'exception', message: response.data})
                                    })
                                } else {
                                    $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_name: 'default'})[0]
                                    $scope.db.selectedProfile.selected = 'selectedTechsched';
                                    $scope.db.selectedProfile.uisref = "techschedview.techschedmain";
                                    $scope.db.selectedProfile.filters = {};
                                    $scope.db.selectedProfile.filters.Dates = Dates;
//                                $scope.db.selectedProfile.filters.Dates.unshift({name: 'Blank'});
                                    angular.forEach($scope.db.selectedProfile.fields, function (field) {
                                        if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
                                            // if(field.filter_source == 'Dates') {
                                            //     $scope.db.selectedProfile.filters[field.filter_source] = Dates;
                                            // }
                                            // else {
                                            $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
                                            // }

                                        }
                                    })
                                    console.log($scope.db.selectedProfile);
//                        angular.copy($scope.db.selectedProfile, $scope.db.profile);
                                    $scope.changeView();
//                        $scope.getAllTechSched();
                                }
                            }, function (errors) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: errors[0].data})
                                coreService.setAlert({type: 'exception', message: errors[1].data})
                                coreService.setAlert({type: 'exception', message: errors[2].data})
                            })
//        $scope.db.selectedProfile.filters['INCShipDate'] = $scope.db.selectedProfile.filters.Dates[0].value;
//        $scope.db.selectedProfile.filters['LTDShipDate'] = $scope.db.selectedProfile.filters.Dates[0].value;
//        $scope.db.selectedProfile.filters['OnSiteDate'] = $scope.db.selectedProfile.filters.Dates[0].value;
//        $scope.getAllTechSched();
                }
            }
        };
        init();

        $scope.openSaveSettingsPopup = function () {
            var FavoriteTableId = localStorage.getItem('FavoriteTableId');
            if (FavoriteTableId == null) {
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/techschedModule/views/savesettings.html',
                    controller: 'TechSchedSettingsController'
                });
            } else {
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'app/techschedModule/views/overwritefilter.html',
                    controller: 'TechSchedSettingsController'
                });
            }
        };
        $scope.openCustomFilterPopup = function () {
            console.log('inside');
            var data = {
                UserId: coreService.getUser().user_id
            };
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedModule/views/customfilter.html',
                controller: 'TechSchedCustomFilterController',
                resolve: {
                    filters: function () {
                        return TechSchedService.getFavTableNames(data);
                    }
                }
            });
        };
        $scope.getProfiles = function () {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/profilesModule/views/profiles.html',
                controller: 'ProfilesController'
            });
        };
        $scope.getHeader = function () {
            var headers = [];
            angular.forEach($scope.db.selectedProfile.fields, function (field) {
                headers.push(field.display);
            });
            console.log(headers);
            return headers;
        };
        $scope.getExportedData = function () {
            var exportedData = [];
            angular.forEach($scope.db.items, function (item) {
                console.log(item);
                var exportedItem = {};
                angular.forEach($scope.db.selectedProfile.fields, function (field) {
                    console.log(field);
                    console.log(item[field.name]);
                    exportedItem[field.name] = item[field.name];
                });
                exportedData.push(exportedItem);
            });
            console.log(exportedData);
            return exportedData;
        };
        $scope.generateProductionReport = function () {
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Preparing production report .. please wait'})
            TechSchedService.generateProductionReport()
                    .then(function (response) {
                        console.log(moment().format('MM-DD-YYYY'));
                        window.open('/productionreport/ProductionReport'+moment().format('MM-DD-YYYY')+'.pdf', '_blank');
                    }, function (error) {
                        console.log(error.data);
                    });
        };

        $scope.saveTechsched = function (name, value) {
            console.log(name)
            var value2 = '';
            if (!$scope.currentItem.Company) {
                return false;
            }

            // return false;
            var isValid = true;
            var msg = "";
            var CorrectName = "";
            if (name != "") {
                if (name == "TechOnSiteDate" || name == "OnSiteDate" || name == "INCShipDate" || name == "LTDShipDate" || name == "DateCompleted" || name == "HideUntil") {
                    if (value != '') {
                        value = $filter('localToUtc2')(value, 'datetime');
                    }
                } else
                if (name == "TechOnSiteTime") {
                    if (value !== '' || value !== null || value !== 'null') {
                        console.log(value)
                        value = $filter('date')(value, 'HH:mm');
                        console.log(value)
//                        if (time !== "") {
//                            timeparts = time.split(" ");
//                            value2 = timeparts[1];
//                            if (value2 === 'AM')
//                                value = timeparts[0];
//                            else
//                                value = timeparts[0] + "12:00";
//                        }
//                        console.log(timeparts[0])
//                        console.log(value)
//                        console.log(value2)

//                        value = $filter('date')(value, 'shortTime', 'h:mm');

                    }
                } else if (name === 'LTDtoSite' || name === 'LTDtoSLC' || name === 'PaymentRequired'
                        || name === 'Hidden' || name === 'Contacted' || name === 'TechConfirmed'
                        || name === 'TechOnSiteConfirmed' || name === 'OnSiteConfirmed'
                        || name === 'Skylight' || name === 'Insulated' || name === 'ToolsIn' || name === 'ToolsOut') {
                    if (value == true) {
                        value = 'true';
                    } else if (value == false) {
                        value = 'false';
                    } else {
                        value = '';
                    }
                } else if (name === 'Logo') {
                    if (value.toLowerCase() === 'yes' || value.toLowerCase() === 'true') {
                        value = 'true';
                    } else if (value.toLowerCase() === 'no' || value.toLowerCase() === 'false') {
                        value = 'false';
                    } else {
                        value = '';
                    }
                } else if (name === 'WOInfo') {
                    var newstr = '';
                    var newstr2 = '';

                    // value  = value.replace('</p>', '');
                    //
                    // var str = value.split('<p>');
                    //
                    // str.shift();
                    // angular.forEach(str, function (line) {
                    //     if(line !== '') {
                    //         newstr = newstr + '&lt;p&gt;' + line + '&lt;\/p&gt;';
                    //     }
                    //
                    // });
                    // console.log(newstr);
                    // // to replace &amp; with &
                    // if (newstr.indexOf('&amp;') !== -1) {
                    //     var str2 = newstr.split('&amp;');
                    //     angular.forEach(str2, function (part) {
                    //         if (newstr2 === '')
                    //             newstr2 += part;
                    //         else
                    //             newstr2 += '&' + part;
                    //     });
                    //     newstr = newstr2;
                    // }

                    // value = value.replace(/</g, "&lt;");
                    // value = value.replace(/>/g, "&gt;");
                    // value = value.replace(/&/g, "&amp;");

                    // value = newstr;
                }
                if (name === 'HideUntil') {
                    if (value !== '' && value !== null && value !== 'null') {
                        $scope.currentItem.Hidden = true;
                        updateField('Hidden', 'true', '', '');
                    }
                }
                if (name === 'DateCompleted') {
                    if ($scope.currentItem.INC)
                        wo = $scope.currentItem.INC;
                    else
                        wo = $scope.currentItem.LTD;
                    var data = {
                        company: $scope.currentItem.Company,
                        wo: wo,
                        user: coreService.getUser()
                    };
                    TechSchedService.getRelatedWO(data)
                            .then(function (response) {
                                if (!response.data.hasOwnProperty('file')) {
                                    console.log(response.data)
                                    $scope.relatedWOs = response.data;
                                } else {
                                    coreService.resetAlert()
                                    coreService.setAlert({type: 'exception', message: response.data})
                                }
                            }, function (response) {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            });
                }

                if (isValid)
                {
                    if (name === 'DateCompleted') {
                        console.log(value)
                        if (value !== '' && value !== null && value !== 'null') {
                            var confirm = window.confirm("Do you want to close related workorders beside this one?");
                            if (confirm) {
                                angular.forEach($scope.relatedWOs, function (wo) {
                                    console.log(wo);
                                    var salesorder = wo.name.substr(3);
                                    updateField(name, value, salesorder, wo.name.substr(0,3));
//                                    var data = {
//                                        SalesOrder: '',
//                                        ColumnName: name,
//                                        ColumnValue: value,
//                                        Company: $scope.currentItem.Company
//                                    };
//                                    data.SalesOrder = salesorder;
//
//                                    coreService.setAlert({type: 'wait', message: 'Saving Data.. Please wait'})
//                                    TechSchedService.techschedUpdate(data).then(function (response) {
//                                        if (!response.data.hasOwnProperty('file')) {
//                                            $scope.db.refresh = true;
//                                            coreService.resetAlert()
//
//                                        } else {
//                                            coreService.resetAlert()
//                                            coreService.setAlert({type: 'exception', message: response.data})
//                                        }
//                                    }, function (response) {
//                                        coreService.resetAlert()
//                                        coreService.setAlert({type: 'exception', message: response.data})
//                                    })
                                });
                            } else {
                                updateField(name, value, '', '');
                            }
                        } else {
                            updateField(name, value, '', '');
                        }
                    } else {
                        updateField(name, value, '', '');
                    }
                }
            }
        };

        var updateField = function (name, value, salesorder, company) {
            var data = {
                SalesOrder: salesorder,
                ColumnName: name,
                ColumnValue: value,
                Company: company
            };
            if ($scope.currentItem.Company === 'INC')
            {
                if(salesorder === '')
                data.SalesOrder = $scope.currentItem.INC;
            } else if ($scope.currentItem.Company === 'LTD')
            {
                if(salesorder === '')
                data.SalesOrder = $scope.currentItem.LTD;
            }
            if(company === ''){
                data.Company = $scope.currentItem.Company;
            }

            coreService.setAlert({type: 'wait', message: 'Saving Data.. Please wait'})
            TechSchedService.techschedUpdate(data).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    $scope.db.refresh = true;
                    coreService.resetAlert()

                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }

        $scope.openColumnsPopup = function () {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedModule/views/columns.html',
                controller: 'TechSchedSettingsController'
            });
        }


        $scope.techNames = [];
        $scope.tcCordinators = [];
        $scope.autoComplete = function (data) {
            console.log(data, 25);
            TechSchedService.getTechUserNames(data)
                    .then(function (response) {
                        angular.forEach(response.data, function (userData) {
                            if (userData !== null) {
                                if (data.name === 'TechName') {
                                    if (!$scope.techNames.includes(userData.FullName)) {
                                        $scope.techNames.push(userData.FullName);
                                    }
                                } else {
                                    if (!$scope.tcCordinators.includes(userData.FullName)) {
                                        $scope.tcCordinators.push(userData.FullName);
                                    }
                                }

                            }
                        })


                        console.log($scope.techNames)
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        }
        $scope.openWOPdfPopUp = function (item) {
            $scope.db[$scope.db.selectedProfile.selected] = item;
            console.log($scope.db.selectedProfile.selected);
            console.log($scope.db);
//            coreService.setDB($scope.db);
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedModule/views/wopdf.html',
                controller: 'TechSchedWOPdfController'
            });
        };

//        var wHeigh = $(window).outerHeight(),
//                formHeight =  $(".mb10").outerHeight(),
//                pageHeaderHeight = $(".pageHeader").outerHeight(),
//                navHeight =$(".navbar").outerHeight(),
//                navTabsHeight =$(".nav-tabs").outerHeight();
//        
//        $(".tabScroll").outerHeight(wHeigh -(formHeight + pageHeaderHeight + navHeight+  navTabsHeight));

    }
    controller.$inject = ['$scope', 'coreService', 'TechSchedService', '$filter', '$rootScope', '$q', '$uibModal', '$state', '$timeout', 'Excel']
    angular.module('techschedModule')
            .controller('ScheduleController', controller)
}());;(function () {
    var controller = function ($scope, $uibModalInstance, TechSchedService, coreService, $filter, filters, $rootScope) {
        $scope.filters = [];
        $scope.gridColumns = [];
        $scope.gridValues = [];
        var Dates = [
            {id: 'Blank', name: 'Blank', has_calendar: 'no'},
            {id: 'NotBlank', name: 'Not Blank', has_calendar: 'no'},
            {id: '0', name: 'Today', has_calendar: 'no'},
            {id: '1', name: 'Last 7 days', has_calendar: 'no'},
            {id: '2', name: 'Month to date', has_calendar: 'no'},
            {id: '3', name: 'Year to date', has_calendar: 'no'},
            {id: '4', name: 'The previous Month', has_calendar: 'no'},
            {id: '5', name: 'Specific Date', has_calendar: 'yes'},
            {id: '6', name: 'All Dates Before', has_calendar: 'yes'},
            {id: '7', name: 'All Dates After', has_calendar: 'yes'},
            {id: '8', name: 'Date Range', has_calendar: 'range'}
        ]

        var init = function () {
            console.log(filters.data);
            $scope.filters = filters.data;
            console.log($scope.filters);
        };
        init();

        $scope.chooseFilter = function (filter) {
            $scope.db = coreService.getParentDB('techsched');
            $scope.db = $rootScope.db;
            console.log($scope.db);
            console.log(filter);
            var data = {
                UserId: coreService.getUser().user_id,
                TableId: filter.FavoriteTableId
            };
            console.log(data);
//            TechSchedService.getCustomFilterProfile(data.TableId)
//                    .then(function (response) {
//                        console.log(response.data);
//                        if (!response.data.hasOwnProperty('file')) {
//                            $scope.db.selectedProfile = $filter('filter')($scope.db.profiles, {profile_id: response.data.profile_id})[0];
//                            $scope.db.selectedProfile.selected = 'selectedTechsched'
//                            $scope.db.selectedProfile.uisref = "techschedview.techschedmain"
//                            $scope.db.selectedProfile.filters = {};
//                            $scope.db.selectedProfile.filters.Dates = Dates;
//                            angular.forEach($scope.db.selectedProfile.fields, function (field) {
//                                if (field.filter_type === 'selectdate' && field.hasOwnProperty('filter_filters')) {
//                                    $scope.db.selectedProfile.filters[field.filter_source] = field.filter_filters;
//                                }
//                            });
//                            console.log($scope.db.selectedProfile);
                            TechSchedService.getGridColumns(data)
                                    .then(function (response) {
                                        if (!response.data.hasOwnProperty('file')) {
                                            console.log(response.data);
                                            var res;
                                            $uibModalInstance.close(res);
                                            if (response.data !== null) {
                                                localStorage.setItem('FavoriteTableId', response.data.FavoriteTableId);
                                            }
                                            else {
                                                localStorage.setItem('FavoriteTableId', null);
                                            }
                                            if (response.data.GridColumns !== null) {
                                                $scope.gridColumns = response.data.GridColumns.split(',');
                                                $scope.gridValues = response.data.GridValues.split(';');
                                                 $scope.db.selectedProfile.fields = [];
                                                angular.forEach($scope.gridColumns, function (value, key) {
                                                    console.log($scope.db);
                                                    $scope.db.selectedProfile.filters[value] = $scope.gridValues[key];
//                                                    console.log($filter('filter')($scope.db.selectedProfile.fields, {name: value})[0]);
//                                                    console.log($filter('filter')($scope.db.selectedProfile.fields, {name: value})[0].filter_type);
                                                   
//                                                    if(!angular.isDefined($filter('filter')($scope.db.selectedProfile.fields, {name: value})[0])){
                                                        var field = $filter('filter')($rootScope.allColumns, {name: value})[0];
                                                        $scope.db.selectedProfile.fields.push(field);
//                                                    }
                                                    console.log($scope.db.selectedProfile);
                                                    if ($filter('filter')($scope.db.selectedProfile.fields, {name: value})[0].filter_type === "selectdate") {
//                                    if (value === 'INCShipDate' || value === 'LTDShipDate' || value === 'OnSiteDate') {
//                                        var id = $scope.db.selectedProfile.filters[value];
//                                        var date = TechSchedService.convertStringToDate($scope.gridValues[key]);
                                                        console.log(value);
                                                        if ($scope.gridValues[key] != '') {
                                                            console.log($scope.gridValues[key]);
//                                            if ($scope.gridValues[key].indexOf('To') !== -1) {
                                                            var id = TechSchedService.getDateIdByValue($scope.gridValues[key]);
                                                            console.log(id);
                                                            var item = $filter('filter')($scope.db.selectedProfile.filters['Dates'], {id: id})[0];
                                                            $rootScope.selectedItem[value].item = item;
                                                            if (id === 5) { // specific date
                                                                var date = $filter('utcToLocal')($scope.gridValues[key], 'datetime');
                                                                $rootScope.selectedItem[value].searchDate = new Date(date);
                                                            } else if (id === 6) { // all dates before
                                                                var date = $scope.gridValues[key].split('< ');
                                                                console.log(date);
                                                                var date2 = $filter('utcToLocal')(date[1], 'datetime');
                                                                $rootScope.selectedItem[value].searchDate = new Date(date2);
                                                            } else if (id === 7) { // all dates after
                                                                var date = $scope.gridValues[key].split(' >');
                                                                console.log(date);
                                                                var date2 = $filter('utcToLocal')(date[0], 'datetime');
                                                                $rootScope.selectedItem[value].searchDate = new Date(date2);
                                                            } else if (id === 8) { // date range
                                                                var date = $scope.gridValues[key].split(' To ');
                                                                console.log(date);
                                                                $rootScope.selectedItem[value].searchDate = {startDate: null, endDate: null};
                                                                $rootScope.selectedItem[value].searchDate.startDate = date[0];
                                                                $rootScope.selectedItem[value].searchDate.endDate = date[1];
                                                                console.log($rootScope.selectedItem[value].searchDate)
                                                            } else
                                                                $rootScope.selectedItem[value].searchDate = $scope.gridValues[key];
                                                            $rootScope.calendar[value] = true;
                                                        } else {
                                                            console.log($scope.gridValues[key]);
                                                            $rootScope.calendar[value] = false;
                                                        }
                                                    }
                                                });
                                                console.log($scope.db.selectedProfile.filters);
                                                console.log($scope.gridColumns);
                                                console.log($scope.gridValues);

                                                var filters = $scope.db.selectedProfile.filters;
                                                console.log(filters);
                                                var sort = {
                                                    sort: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].name,
                                                    direction: $filter('filter')($scope.db.selectedProfile.fields, {sort: 1})[0].direction
                                                }
                                                var paging = {
                                                    currentPage: $scope.db.currentPage,
                                                    limit: $scope.db.itemsPerPage
                                                };
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'wait', message: 'Filtering and sorting.. Please wait'})
                                                $rootScope.prepareTechschedObj(filters, sort, paging);
                                            }
                                        } else {
                                            coreService.resetAlert();
                                            coreService.setAlert({type: 'exception', message: response.data});
                                        }
                                    }, function (error) {
                                        coreService.resetAlert();
                                        coreService.setAlert({type: 'exception', message: error.data});
                                    });
//                        } else {
//                            coreService.resetAlert();
//                            coreService.setAlert({type: 'exception', message: response.data});
//                        }
//                    }, function (error2) {
//                        coreService.resetAlert();
//                        coreService.setAlert({type: 'exception', message: error2.data});
//                    });
        };
        $scope.deleteFilter = function (filter) {
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'Filter is deleting .. please wait'});
            console.log(filter);
            TechSchedService.deleteSetting(filter.FavoriteTableId)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            TechSchedService.deleteCustomFilterProfile(filter.FavoriteTableId)
                                    .then(function (response) {
                                        console.log(response.data);
                                        if (!response.data.hasOwnProperty('file')) {
                                            var res;
                                            $uibModalInstance.close(res);
                                            coreService.resetAlert();
                                            coreService.setAlert({type: 'info', message: 'Filter is deleted successfully'});
                                        }
                                    }, function (error) {
                                        coreService.resetAlert();
                                        coreService.setAlert({type: 'exception', message: error.data});
                                    });
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
        $scope.renameFilter = function (filter) {
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'Filter is renaming .. please wait'});
            console.log(filter);
            TechSchedService.renameSetting(filter.FavoriteTableId, filter.FavoriteTableName)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            coreService.resetAlert();
                            coreService.setAlert({type: 'info', message: 'Filter is renamed successfully'});
                        } else {

                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
    };
    controller.$inject = ['$scope', '$uibModalInstance', 'TechSchedService', 'coreService', '$filter', 'filters', '$rootScope']
    angular.module('techschedModule')
            .controller('TechSchedCustomFilterController', controller)
}());;(function () {
    var controller = function ($scope, $uibModalInstance, coreService, TechSchedService, $uibModal, $rootScope, $filter, currentItem) {

        $scope.module = 'techsched';
        $scope.currentItem = currentItem;
        coreService.setCurrentState($scope.module);

        $scope.choice1 = 'Concrete Anchors';
        $scope.choice2 = 'No';
        $scope.choice3 = 'All';

        $scope.db.selectedTechsched = currentItem;
        $scope.currentItem = currentItem;
        $scope.to = $scope.db.selectedTechsched.STEmail;
        $scope.name = $scope.db.selectedTechsched.STContact;

        if (!$scope.name) {
            $scope.name = "";
        }
        if (!$scope.to) {
            $scope.to = "";
        }


        // $scope.$watch(function () {
        //     return coreService.getParentDB($scope.module);
        // }, function (newVal) {
        //     if (newVal !== null && angular.isDefined(newVal)) {
        //         $scope.db = newVal
        //         if ($scope.db.hasOwnProperty('selectedTechsched')) {
        //             $scope.currentItem = $scope.db.selectedTechsched;
        //             $scope.to = $scope.db.selectedTechsched.STEmail;
        //             $scope.name = $scope.db.selectedTechsched.STContact;
        //         }
        //     }
        // });
        $scope.sendEmail = function () {
//            var mailBodyFinished = false;
            var earth = false;
            var Flag = false;
            var crew = 0;
            var document1 = {};
            var document2 = {};
            var s1 = $scope.currentItem.WOInfo;

            if (s1) {
                if (s1.toLowerCase().match("earth anchors")) {
                    earth = true;
                }
            }

            if ($scope.currentItem.Insulated == true && earth == true) {
                s2 = "InsulatedEarth";
                var document2_name = "Ops_EarthAnchorGuide.pdf";
                document2 = {
                    db: $scope.module,
                    file: '/data/techsched_documents/' + document2_name,
                    name: document2_name
                };
            } else if ($scope.currentItem.Insulated == true && earth == false) {
                s2 = "InsulatedConcrete";
            } else if ($scope.currentItem.Insulated == false && earth == true) {
                s2 = "Earth";
                var document2_name = "Ops_EarthAnchorGuide.pdf";
                document2 = {
                    db: $scope.module,
                    file: '/data/techsched_documents/' + document2_name,
                    name: document2_name
                };
            } else if ($scope.currentItem.Insulated == false && earth == false) {
                s2 = "Concrete";
            }

            if ($scope.currentItem.Width != "") {
                var document1_name = "Ops_" + $scope.currentItem.Width.trim() + s2.trim() + ".pdf";
                document1 = {
                    db: $scope.module,
                    file: '/data/techsched_documents/' + document1_name,
                    name: document1_name
                };
            }

            // console.log(document2);
            // console.log(document1);
            // console.log($scope.currentItem); return false;

            switch (parseInt($scope.currentItem.Width)) {
                case 30:
                    crew = 4;
                    if ($scope.currentItem.LaborersReqd > 4) {
                        twotcs = true;
                    }
                    break;

                case 40:
                    crew = 5;
                    if ($scope.currentItem.LaborersReqd > 5) {
                        twotcs = true;
                    }
                    break;

                case 50:
                    crew = 6;
                    if ($scope.currentItem.LaborersReqd > 6) {
                        twotcs = true;
                    }
                    break;

                case 60:
                    crew = 7;
                    if ($scope.currentItem.LaborersReqd > 7) {
                        twotcs = true;
                    }
                    break;

                case 70:
                    crew = 8;
                    if ($scope.currentItem.LaborersReqd > 8) {
                        twotcs = true;
                    }
                    break;

                case 80:
                    crew = 9;
                    if ($scope.currentItem.LaborersReqd > 9) {
                        twotcs = true;
                    }
                    break;

                case 88 :
                case "27M":
                    crew = 9;
                    if ($scope.currentItem.LaborersReqd > 9) {
                        twotcs = true;
                    }
                    break;

                case 90:
                    crew = 10;
                    if ($scope.currentItem.LaborersReqd > 10) {
                        twotcs = true;
                    }
                    break;

                case 100:
                    crew = 12;
                    if ($scope.currentItem.LaborersReqd > 12) {
                        twotcs = true;
                    }
                    break;

                case 110:
                    crew = 12;
                    if ($scope.currentItem.LaborersReqd > 12) {
                        twotcs = true
                    }
                    break;

                case 120:
                    crew = 14;
                    if ($scope.currentItem.LaborersReqd > 14) {
                        twotcs = true
                    }
                    break;

                case 130:
                    crew = 14;
                    if ($scope.currentItem.LaborersReqd > 14) {
                        twotcs = true;
                    }
                    break;
            }
            $scope.emails = [];
            $scope.toEmail = {'contact': {'email': $scope.to, 'fullname': $scope.name}};
            $scope.emails.push($scope.toEmail);
            var Customer = "";
//            $scope.email.push($scope.currentItem.TechNameEmail + ";");
            if ($scope.currentItem.Customer)
                Customer = $scope.currentItem.Customer.trim();
            if (Customer === null || Customer === undefined)
                Customer = "";
            $scope.subject = "Construction Info re: " + Customer + " > Sprung Structure assembly.";
            $scope.message = "Dear " + $scope.name + "," + "<br/>" + "<br/>";

            var Wording = '';
            var templates = ["IntroErect", "DeliveryFirm1", "DeliveryFirm2", "DeliveryBlank", "DeliveryMaybe1"
                        , "DeliveryMaybe2", "Tech1", "Tech2", "AnchorEarth", "AnchorConcrete", "AnchorPins", "2Techs1"
                        , "2Techs2", "2Techs3", "GeneralClose"];
            var messages = [];
            var counter = 0;
            angular.forEach(templates, function (value, key) {
                TechSchedService.techschedGetByClause(value)
                        .then(function (response) {
                            console.log(response.data);
                            if (!response.data.hasOwnProperty('file')) {
                                Wording = response.data;
                                var res = Wording.split('"');
                                Wording = res[1];
                                if (Wording != "") {
                                    messages[key] = Wording;
                                    counter++;
//                                $scope.message += Wording + "<br/>" + "<br/>";
                                }
                            }
                        });
            });
            var intvl = setInterval(function () {
                if (counter === 15) {
                    clearInterval(intvl);
                    messages[0] = messages[0].replace("\\", "");
                    $scope.message += messages[0] + "<br/>" + "<br/>";


                    var mergeMessage = '';
                    if ($scope.currentItem.OnSiteConfirmed) {
//                        var date = $filter('utcToLocal')($scope.currentItem.OnSiteDate, 'datetime');
                        var OnSiteDate = $scope.currentItem.OnSiteDate;
                        if (OnSiteDate)
                            OnSiteDate = moment(OnSiteDate).format('MM-DD-YYYY');
                        if (OnSiteDate === undefined || OnSiteDate === null || OnSiteDate == 'Invalid date') {
                            OnSiteDate = '';
                        }
                        $scope.message += messages[1] + " " + OnSiteDate + ". ";

//                        var date = $filter('utcToLocal')($scope.currentItem.INCShipDate, 'datetime');
                        var INCShipDate = $scope.currentItem.INCShipDate;
                        if (INCShipDate)
                            INCShipDate = moment(INCShipDate).format('MM-DD-YYYY');
                        if (INCShipDate === undefined || INCShipDate === null || INCShipDate == 'Invalid date') {
                            INCShipDate = '';
                        }
                        $scope.message += messages[2] + " " + INCShipDate + ". ";

                        Delivery = mergeMessage;
                    } else if ($scope.currentItem.TechOnSiteDate == "") {
                        $scope.message += "<br/>" + messages[3] + "<br/>";

                        Delivery = mergeMessage
                    } else if ($scope.currentItem.TechOnSiteDate != "" && ($scope.currentItem.OnSiteConfirmed == false || $scope.currentItem.OnSiteConfirmed == "")) {

//                        var date = $filter('utcToLocal')($scope.currentItem.TechOnSiteDate, 'datetime');
                        var TechOnSiteDate = $scope.currentItem.TechOnSiteDate;
                        if (TechOnSiteDate)
                            TechOnSiteDate = moment(TechOnSiteDate).format('MM-DD-YYYY');
                        if (TechOnSiteDate === undefined || TechOnSiteDate === null || TechOnSiteDate == 'Invalid date') {
                            TechOnSiteDate = '';
                        }
                        $scope.message += " " + messages[4] + " " + TechOnSiteDate;

                        $scope.message += " " + messages[5] + "<br/>";

                        Delivery = mergeMessage;
                    }

                    if (!$scope.currentItem.TechConfirmed) {
                        $scope.message += "<br/>" + messages[6];

                        $scope.message += " " + messages[7] + "<br/>";

                        Tech = mergeMessage;
                    } else {
                        var TechName = $scope.currentItem.TechName;
                        if (!TechName)
                            TechName = '';
                        $scope.message += "<br/>" + messages[6] + ", " + TechName + ",";

//                        var date = $filter('utcToLocal')($scope.currentItem.TechOnSiteDate, 'datetime');
                        var TechOnSiteDate = $scope.currentItem.TechOnSiteDate;
                        if (TechOnSiteDate)
                            TechOnSiteDate = moment(TechOnSiteDate).format('MM-DD-YYYY');
                        if (TechOnSiteDate === undefined || TechOnSiteDate === null || TechOnSiteDate == 'Invalid date') {
                            TechOnSiteDate = '';
                        }
                        var time = "";
                        var TechOnSiteTime = $scope.currentItem.TechOnSiteTime;

                        if (TechOnSiteTime) {
                            time = $filter('date')(TechOnSiteTime, 'shortTime', 'h:mm a');
                        }
                        if (time === undefined || time === null || time == 'Invalid date') {
                            time = '';
                        }
                        $scope.message += "<br/>" + messages[7] + " at " + time + " on " + TechOnSiteDate + "." + "<br/>";

                        Tech = mergeMessage;
                    }

                    if (earth == true) {
                        $scope.message += "<br/>" + messages[8];

                        Anchor = mergeMessage;
                    } else {
                        Flag = true;
                    }

                    if (Flag == true) {
                        if ($scope.choice1 == "Concrete Anchors") {
                            $scope.message += "<br/>" + messages[9] + "<br/>";

                            Anchor = mergeMessage;
                        } else {
                            $scope.message += "<br/>" + messages[10] + "<br/>";

                            Anchor = mergeMessage;
                        }
                    }


                    if ($scope.choice2 == "Yes") {
                        twotcs = true;
                    } else {
                        twotcs = false;
                    }

                    //view(twotcs, "Are two techs required?")
                    //alert(twotcs)
                    if (twotcs) {
                        $scope.message += "<br/>" + messages[11] + " " + crew + ".";

                        $scope.message += messages[12] + " " + (2 * crew) + ", ";

                        $scope.message += messages[13];

                        TwoTechs = mergeMessage;
                    }
                    var close = messages[14].split('<');
                    console.log(close);
                    var close2 = close[2].split('>');
                    console.log(close2);
                    $scope.message += "<br/>" + "<br/>" + close[0] + "<br/>" + "<br/>" + close2[1];

                    Close = mergeMessage;

                    // console.log($scope.message);
                    // console.log(document1);
                    // console.log(document2);
                    var documentDefault_name = "Ops_ClientGeneralProcedures.pdf";
                    documentDefault = {
                        db: $scope.module,
                        file: '/data/techsched_documents/' + documentDefault_name,
                        name: documentDefault_name
                    };

                    var attachments = [];
                    attachments.push(documentDefault);
                    if (document1.hasOwnProperty('file'))
                        attachments.push(document1);
                    if (document2.hasOwnProperty('file'))
                        attachments.push(document2);

                    console.log(attachments);
//                    var intvl = setInterval(function () {
//                        if (mailBodyFinished) {
//                            clearInterval(intvl);
                    var email = {
                        subject: $scope.subject,
                        body: $scope.message,
                        toArray: $scope.emails,
                        attachments: attachments
                    }
                    $scope.db.email = email;
                    console.log($scope.db);
                    var res;
                    $uibModalInstance.close(res);
                    $rootScope.UpdateNotes('Initial Introduction sent to customer via email.');
                    var uibModal = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/emailModule/views/emailwithupload.html',
                        controller: 'EmailWithUploadController',
                        size: 'lg'
                    });
//                        }
//
//                    }, 100);
                }
            }, 100);
        };

        $scope.sendEmail2 = function () {
            console.log($scope.choice3);
            var WO = ShipDate = EmailText1 = EmailText2 = EmailText3 = EmailText4 = EmailText5 = EmailText6 = EmailText7 = EmailText8 = "";
//            var ID = document.getElementById("Row_ID").value;
            var INC = $scope.db.selectedTechsched.INC;
            if (!INC)
                INC = '';
            console.log(INC);
            var Customer = $scope.db.selectedTechsched.Customer;
            if (Customer != "null" && Customer != "undefined")
            {
                Customer = Customer.trim();
            }
            var LTD = $scope.db.selectedTechsched.LTD;
            if (!LTD)
                LTD = '';
            var Width = $scope.db.selectedTechsched.Width;
            if (!Width)
                Width = '';
            var Length = $scope.db.selectedTechsched.Length;
            if (!Length)
                Length = '';

            var SalesOffice = $scope.db.selectedTechsched.SalesOffice;
            var STContact = $scope.db.selectedTechsched.STContact;
            var STPhone1 = $scope.db.selectedTechsched.STPhone1;
            var STPhone2 = $scope.db.selectedTechsched.STPhone2;
            var STEmail = $scope.db.selectedTechsched.STEmail;
            var TechName = $scope.db.selectedTechsched.TechName;

            if (!SalesOffice)
                SalesOffice = '';
            if (!STContact)
                STContact = '';
            if (!STPhone1)
                STPhone1 = '';
            if (!STPhone2)
                STPhone2 = '';
            if (!STEmail)
                STEmail = '';
            if (!TechName)
                TechName = '';


            var time = "";
            var TechOnSiteTime = $scope.db.selectedTechsched.TechOnSiteTime;
            if (TechOnSiteTime) {
                time = $filter('date')(TechOnSiteTime, 'shortTime', 'h:mm a');
            }
            if (!time)
                time = '';
            var TechOnSiteDate = $scope.db.selectedTechsched.TechOnSiteDate;
            if (TechOnSiteDate) {
//                TechOnSiteDate = $filter('utcToLocal')(TechOnSiteDate, 'datetime');
                TechOnSiteDate = moment(TechOnSiteDate).format('MM-DD-YYYY');
            }
            if (!TechOnSiteDate || TechOnSiteDate == 'Invalid date')
                TechOnSiteDate = '';

            var TechOnSiteConfirmed = $scope.db.selectedTechsched.TechOnSiteConfirmed;
            if (!TechOnSiteConfirmed)
                TechOnSiteConfirmed = '';

            var OnSiteDate = $scope.db.selectedTechsched.OnSiteDate;
            if (OnSiteDate) {
//                OnSiteDate = $filter('utcToLocal2')(OnSiteDate, 'datetime');
                OnSiteDate = moment(OnSiteDate).format('MM-DD-YYYY');
            }
            if (!OnSiteDate || OnSiteDate == 'Invalid date')
                OnSiteDate = '';
            var OnSiteConfirmed = $scope.db.selectedTechsched.OnSiteConfirmed;
            if (!OnSiteConfirmed)
                OnSiteConfirmed = '';

            var INCShipDate = $scope.db.selectedTechsched.INCShipDate;
            if (INCShipDate) {
//                INCShipDate = $filter('utcToLocal')(INCShipDate, 'datetime');
                INCShipDate = moment(INCShipDate).format('MM-DD-YYYY');
            }
            if (!INCShipDate || INCShipDate == 'Invalid date')
                INCShipDate = '';

            var LTDShipDate = $scope.db.selectedTechsched.LTDShipDate;
            if (LTDShipDate) {
//                LTDShipDate = $filter('utcToLocal2')(LTDShipDate, 'datetime');
                LTDShipDate = moment(LTDShipDate).format('MM-DD-YYYY');
            }
            console.log($scope.db.selectedTechsched.LTDShipDate)
            console.log(LTDShipDate)
            if (!LTDShipDate || LTDShipDate == 'Invalid date')
                LTDShipDate = '';
            console.log(LTDShipDate)

            var LTDtoSite = $scope.db.selectedTechsched.LTDtoSite;
            var INCDateConfirmed = $scope.db.selectedTechsched.INCDateConfirmed;
            var LTDDateConfirmed = $scope.db.selectedTechsched.LTDDateConfirmed;
            var INCShipped = $scope.db.selectedTechsched.INCShipped;
            var LTDShipped = $scope.db.selectedTechsched.LTDShipped;

            if (!LTDtoSite)
                LTDtoSite = '';
            if (!INCDateConfirmed)
                INCDateConfirmed = '';
            if (!LTDDateConfirmed)
                LTDDateConfirmed = '';
            if (!INCShipped)
                INCShipped = '';
            if (!LTDShipped)
                LTDShipped = '';

            var WOInfo = $scope.db.selectedTechsched.WOInfo;
            var index = 0;
            var regex = /<p>/gi;
            while ((index = regex.exec(WOInfo))) {
//                indices.push(result.index);
//            }
//            while (index < WOInfo.length) {
//                console.log(WOInfo.length)
//                index = WOInfo.indexOf("<p>") + 3;
                console.log(index)
                WOInfo = WOInfo.replace("<p>", "<p style='font-family:Arial,Helvetica,sans-serif'>");
//                if (index >= 1000)
//                    break;
            }
//            console.log(WOInfo)
            if (!WOInfo)
                WOInfo = '';

            var TCCoordinator = $scope.db.selectedTechsched.TCCoordinator;
            if (!TCCoordinator)
                TCCoordinator = '';

            if (INC != "" && LTD == "") {
                WO = "INC " + INC;
            } else if (LTD != "" && INC == "") {
                WO = "LTD " + LTD;
            } else {
                WO = "INC " + INC + " LTD " + LTD;
            }

            if (INC == "") {
                ShipDate = LTDShipDate;
            } else if (LTD == "" && INCShipDate == "") {
                ShipDate = LTDShipDate;
            } else if (LTD == "" && INCShipDate != "") {
                ShipDate = INCShipDate;
            } else {
                ShipDate = "";
            }

            if (ShipDate == "" || ShipDate == null) {
                EmailText1 = "";
            } else {
                EmailText1 = "Order is scheduled to ship " + ShipDate + ".<br/>";
            }

            if (OnSiteDate != "" && OnSiteDate != null) {
                EmailText2 = "Structure is scheduled to arrive on site " + OnSiteDate + ".<br/>";
            } else {
                EmailText2 = "";
            }

            if (TechName != "" && TechName != null) {
                EmailText3 = "The name of the Technical Consultant is " + TechName + ".<br/>" + "The Tech Coordinator for this project is " + TCCoordinator + ".<br/>";
            } else {
                EmailText3 = "";
            }

            if (OnSiteConfirmed == true) {
                EmailText4 = "This date has been confirmed by the customer.";
            } else {
                EmailText4 = "";
            }

            if (INCShipDate != "" && INCShipDate != null && INCDateConfirmed != true && INCDateConfirmed != null && INCShipped != true && INCShipped != null) {
                EmailText5 = "Salt Lake City is scheduled to ship " + INCShipDate + ".<br/>";
            } else if (INCShipDate != "" && INCShipDate != null && (INCShipped == true || INCDateConfirmed == true)) {
                EmailText5 = "Salt Lake City has shipped " + INCShipDate + ".<br/>";
            } else {
                EmailText5 = "";
            }

            if (TechOnSiteDate != "" && TechOnSiteDate != null && TechOnSiteConfirmed == true) {
                EmailText7 = "Technical Consultant is scheduled to arrive " + TechOnSiteDate + " at " + time + "<br/>";
            } else {
                EmailText7 = "";
            }

            if (LTDShipDate != "" && LTDDateConfirmed != true && LTDShipped != true) {
                if (LTDtoSite == true) {
                    s = "directly to site ";
                } else {
                    s = "to Salt Lake ";
                }
                EmailText6 = "Calgary is scheduled to ship " + s + LTDShipDate + ".<br/>";
            } else if (LTDShipped == true) {
                if (LTDtoSite == true) {
                    s = "directly to site ";
                } else {
                    s = "to Salt Lake ";
                }
                EmailText6 = "Calgary has shipped " + s + LTDShipDate + ".<br/>";
            } else {
                EmailText6 = "";
            }
            EmailText8 = "<br/><u>Site Information:</u><br/>Site Contact: " + STContact + "<br/>Site Phone: " + STPhone1 + "<br/>Site Mobile: " + STPhone2 + "<br/>Site Email: " + STEmail + "<br/><br/><u>Structure Size:</u><br/>" + Width + " X " + Length + "<br/><br/><u>Options Include:</u><br/>" + WOInfo;

            $scope.subject = "Update Re: " + " Work Order " + WO + " " + Customer
            $scope.message = "This is an update!!<br/>" + EmailText1 + EmailText7 + EmailText5 + EmailText6 + EmailText3 + EmailText2 + EmailText4 + EmailText8


            $scope.message += "<br/>";

            $scope.emails = [];
            coreService.getSalesEmails($scope.choice3, SalesOffice)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            angular.forEach(response.data, function (email) {
                                $scope.toEmail = {'contact': {'email': email.user_email, 'fullname': email.full_name}};
                                $scope.emails.push($scope.toEmail);
                            });
                            console.log($scope.emails);
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'error', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'error', message: error.data});
                    });
            var email = {
                subject: $scope.subject,
                body: $scope.message,
                toArray: $scope.emails,
                attachments: []
            }
            $scope.db.email = email;
            console.log(1);
            console.log($scope.message);
            console.log(2);
            var res;
            $uibModalInstance.close(res);
            $rootScope.UpdateNotes("Update sent to " + $scope.choice3 + ".");
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/emailwithupload.html',
                controller: 'EmailWithUploadController',
                size: 'lg'
            });
        };
        $scope.closeEmail = function () {
            var res;
            $uibModalInstance.close(res);
        };
    };
    controller.$inject = ['$scope', '$uibModalInstance', 'coreService', 'TechSchedService', '$uibModal', '$rootScope', '$filter', 'currentItem'];
    angular.module('techschedModule')
            .controller('TechSchedEmailController', controller);
}());
;(function () {
    var controller = function ($scope, $uibModalInstance, TechSchedService, coreService, $filter, $rootScope, $uibModal) {

        $scope.overwriteText = true;
        $scope.overwriteSpiner = false;
        $scope.selectedColumns = [];
        $scope.allCols = [];
        var allCols = $rootScope.allColumns;
        angular.copy(allCols, $scope.allCols);
        $scope.notSelectedColumns = [];
        console.log($scope.db.selectedProfile);

        $scope.db.selectedProfile.fields.forEach(function (item) {
            console.log(item);
            $scope.selectedColumns.push(item.display);
//            $scope.allColumns.splice($scope.allColumns.indexOf(item), 1);
        });
        console.log($scope.selectedColumns);
        console.log($scope.allCols);

        angular.forEach($scope.allCols, function (value, key) {

            if ($scope.selectedColumns.indexOf(value.display) < 0) {
                $scope.notSelectedColumns.push(value.display);
            }
        });
//        for(var i = $scope.db.selectedProfile.fields.length-1; i >= 0; i--){
//            $scope.allColumns.unshift($scope.db.selectedProfile.fields[i]);
//        }
        $scope.db.selectedProfile.fields.forEach(function (item, key) {
            console.log(item);
            var temp;
//            $scope.selectedColumns.push(item.display);
//            $scope.allColumns.unshift(item);
            angular.forEach($scope.allCols, function (value, key2) {

                if (value.name === item.name) {
                    console.log(key2);
                    console.log(key);
                    if (key2 !== -1 && key2 !== key) {
                        console.log($scope.allCols[key]);
                        temp = $scope.allCols[key];
                        $scope.allCols[key] = item;
                        $scope.allCols[key2] = temp;
                    }
                }
            });
//            var index = $scope.allCols.indexOf($filter('filter')($scope.allCols, {name: item.name})[0]);
//            console.log(index);
//            console.log(key);
//            if (index !== -1 && index !== key) {
//            console.log($scope.allCols[key]);
//                temp = $scope.allCols[key];
//                $scope.allCols[key] = item;
//                $scope.allCols[index] = temp;
//            }
        });
        console.log($scope.allCols);

        $scope.editColumn = function () {
            var colName;
            $scope.db.selectedProfile.fields = [];
            $('#columns + div .selected ul li').each(function () {

                colName = $(this).attr('data-selected-value');
                console.log(colName);

                angular.forEach($scope.allCols, function (value, key) {

                    if (colName == value.display) {
                        $rootScope.tabelWidth = $rootScope.tabelWidth + 100;
                        $scope.db.selectedProfile.fields.push(value);
                        console.log($scope.db.selectedProfile);
                    }

                });

                if ($scope.selectedColumns.indexOf(colName) < 0) {
                    var position = $.inArray(colName, $scope.notSelectedColumns);

                    if (~position)
                        $scope.notSelectedColumns.splice(position, 1);
                }


            });

            $('#columns + div .available ul li').each(function () {

                colName = $(this).attr('data-selected-value');
                if ($scope.notSelectedColumns.indexOf(colName) < 0) {

                    angular.forEach($scope.allCols, function (value, key) {

                        if (colName == value.display) {
                            if ($rootScope.tabelWidth > 1360) {
                                $rootScope.tabelWidth = $rootScope.tabelWidth - 100;
                            }

                            $scope.notSelectedColumns.push(colName);

                            angular.forEach($scope.db.selectedProfile.fields, function (fieldVal, fieldKey) {

                                if (fieldVal.display == value.display) {

                                    var position = $.inArray(fieldVal, $scope.db.selectedProfile.fields);

                                    if (~position)
                                        $scope.db.selectedProfile.fields.splice(position, 1);

                                }
                            })


                        }

                    });

                }

            });

            $uibModalInstance.close();
        }

        var SaveUserSettings = function (tablName) {
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'Filter is saving .. please wait'});
            $scope.db = $rootScope.db;

            var fields = $scope.db.selectedProfile.fields;
            var filters = $scope.db.selectedProfile.filters;
            var rowNum = $scope.db.itemsPerPage;


            var OrderBy = 'Company';
            var SortOrder = $filter('filter')(fields, {sort: 1})[0].direction === 0 ? 'asc' : 'desc';

            var FavoriteTableId = 0;

            if (localStorage.getItem('FavoriteTableId') !== null) {
                FavoriteTableId = localStorage.getItem('FavoriteTableId');
            }


            var GridColumns = [];
            var GridColumnValues = [];
//            //WIDTH Changes
            var GridColumnsWidth = [];
            for (var i = 0; i < fields.length; i++) {
//                var visible = $("#my_grid").jqGrid('getColProp', (colModel[i].name)).hidden;
//                if (visible == false)
//                {
                GridColumns.push(fields[i].name);
                //WIDTH Changes
                GridColumnsWidth.push(0);
//                    var colValue = jQuery('#gs_' + colModel[i].name).val();
                var colValue = filters[fields[i].name];
                if (colValue && (fields[i].name === 'INCShipDate' || fields[i].name === 'LTDShipDate' || fields[i].name === 'OnSiteDate')) {
                    if ($scope.db) {
                        var date = $scope.db.selectedProfile.filters[fields[i].name];
                    }
//                    var item = $filter('filter')($scope.db.selectedProfile.filters[fields[i].filter_source], {id: id})[0];
//                    console.log(date);
//                    $rootScope.selectedItem[fields[i].name].item = item;
//                    if (date.indexOf('<') === -1 && date.indexOf('>') === -1 && date.indexOf('To') === -1)
//                        var date = moment($rootScope.selectedItem[fields[i].name].searchDate, 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
//                    var date = TechSchedService.setDateSearchField(item, $rootScope.selectedItem[fields[i].name].searchDate);

//                    $rootScope.selectedItem[fields[i].name].searchDate.setDate($rootScope.selectedItem[fields[i].name].searchDate.getDate() + 1);
//                    var date = $filter('localToUtc')($rootScope.selectedItem[fields[i].name].searchDate, 'date');
                    console.log(date);
                    GridColumnValues.push(date);
                } else
                if (colValue === undefined)
                    GridColumnValues.push('');
                else
                    GridColumnValues.push(colValue);

//                }
            }

            var settings = {
                FavoriteTableId: FavoriteTableId,
                UserId: coreService.getUser().user_id,
                rowNum: rowNum,
                SortOrder: SortOrder,
                OrderBy: OrderBy,
                GridColumns: GridColumns,
                GridColumnValues: GridColumnValues,
                GridColumnsWidth: GridColumnsWidth,
                tablName: tablName
            };

            TechSchedService.saveSettings(settings)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            if (response.data.TableId) {
                                localStorage.setItem('FavoriteTableId', response.data.TableId);
                                var data = {
                                    ProfileId: $scope.db.profile.profile_id,
                                    TableId: response.data.TableId
                                };
                                console.log(data);
                                TechSchedService.saveProfileCustomFilter(data)
                                        .then(function (response) {
                                            console.log(response.data);
                                        }, function (error) {
                                            coreService.resetAlert();
                                            coreService.setAlert({type: 'exception', message: error.data});
                                        });
                            }
//                            coreService.resetAlert();
                            coreService.setAlert({type: 'info', message: 'Filter is saved successfully'});
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
        $scope.saveSettings = function () {
            coreService.resetAlert();
            var flag = true;

            if ($scope.settingName == "") {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: "Not Saved, Name should not be empty !"});
            }
            else {
                var data = {
                    UserId: coreService.getUser().user_id
                };
                TechSchedService.getFavTableNames(data)
                        .then(function (response) {
                            console.log(response.data)
                            if (!response.data.hasOwnProperty('file')) {

                                if (response.data !== null && response.data.length > 0 && $scope.settingName !== '') {
                                    for (var i = 0; i < response.data.length; i++) {
                                        console.log($scope.settingName)
                                        console.log(response.data[i]["FavoriteTableName"])
                                        console.log($scope.settingName === response.data[i]["FavoriteTableName"])
                                        if ($scope.settingName === response.data[i]["FavoriteTableName"]) {
                                            flag = false;
                                            break;
                                        }
                                    }
                                }
                                if (flag) {
                                    var res;
                                    $uibModalInstance.close(res);
                                    SaveUserSettings($scope.settingName);
                                    $scope.settingName = "";
                                    localStorage.setItem('FavoriteTableId', 1000000000);
                                } else {
                                    coreService.resetAlert();
                                    coreService.setAlert({type: 'error', message: "This name is saved before, please type another one."});
                                }
                            } else {
                                coreService.resetAlert();
                                coreService.setAlert({type: 'exception', message: response.data});
                            }
                        }, function (error) {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: error.data});
                        });


            }

//            var settings = {
//                OrderBy: [],
//                GridColumns: [],
//                GridColumnValues: [],
//                GridColumnsWidth: [],
//                tablName: $scope.settingName,
//                UserId: '',
//                SortOrder: '',
//                rowNum: '',
//                FavoriteTableId: '',
//            };
//            TechSchedService.saveSettings(settings)
//                    .then(function (response) {
//                        if (!response.date.hasOwnProperty('file')) {
//                            console.log(response.data);
//                        } else {
//                            coreService.resetAlert();
//                            coreService.setAlert({type: 'exception', message: response.data});
//                        }
//                    }, function (error) {
//                        coreService.resetAlert();
//                        coreService.setAlert({type: 'exception', message: error.data});
//                    });
        };

        $scope.loadModalClass = 'no_display';

        $scope.openSaveSettingsPopup = function () {
            // $scope.loadModalClass = '';
            var res;
            $uibModalInstance.close(res);
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedModule/views/savesettings.html',
                controller: 'TechSchedSettingsController'
            });
        };
        $scope.updateSetting = function () {
            coreService.resetAlert();
            coreService.setAlert({type: 'wait', message: 'Filter is updating .. please wait'});
            // $scope.db = coreService.getParentDB('techsched');
            $scope.db = $rootScope.db;

            var fields = $scope.db.selectedProfile.fields;
            var filters = $scope.db.selectedProfile.filters;
            var rowNum = $scope.db.itemsPerPage;
            var OrderBy = 'Company';
            var SortOrder = $filter('filter')(fields, {sort: 1})[0].direction === 0 ? 'asc' : 'desc';

            var FavoriteTableId = localStorage.getItem('FavoriteTableId');
// var FavoriteTableId = 0;

            var GridColumns = [];
            var GridColumnValues = [];
//            //WIDTH Changes
            var GridColumnsWidth = [];
            for (var i = 0; i < fields.length; i++) {
//                var visible = $("#my_grid").jqGrid('getColProp', (colModel[i].name)).hidden;
//                if (visible == false)
//                {
                GridColumns.push(fields[i].name);
                //WIDTH Changes
                GridColumnsWidth.push(0);
//                    var colValue = jQuery('#gs_' + colModel[i].name).val();
                var colValue = filters[fields[i].name];
                if (colValue && (fields[i].name === 'INCShipDate' || fields[i].name === 'LTDShipDate' || fields[i].name === 'OnSiteDate')) {
                    var date = $scope.db.selectedProfile.filters[fields[i].name];
//                    var item = $filter('filter')($scope.db.selectedProfile.filters[fields[i].filter_source], {id: id})[0];
                    console.log(date);
//                    $rootScope.selectedItem[fields[i].name].item = item;
////                    var date = moment($rootScope.selectedItem[fields[i].name].searchDate, 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
//                    var date = TechSchedService.setDateSearchField(item, $rootScope.selectedItem[fields[i].name].searchDate);

//                    $rootScope.selectedItem[fields[i].name].searchDate.setDate($rootScope.selectedItem[fields[i].name].searchDate.getDate() + 1);
//                    var date = $filter('localToUtc')($rootScope.selectedItem[fields[i].name].searchDate, 'date');
                    if (date.toString().indexOf('<') === -1 && date.toString().indexOf('>') === -1 && date.toString().indexOf('To') === -1)
//                    var date = moment($rootScope.selectedItem[fields[i].name].searchDate, 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
                        var date = $filter('utcToLocal')($rootScope.selectedItem[fields[i].name].searchDate, 'date');
                    console.log(date);
                    GridColumnValues.push(date);
                } else
                if (colValue === undefined)
                    GridColumnValues.push('');
                else
                    GridColumnValues.push(colValue);

//                }
            }
            console.log(GridColumns);
            console.log(GridColumnValues);

            var settings = {
                FavoriteTableId: FavoriteTableId,
//                UserId: coreService.getUser().user_id,
                rowNum: rowNum,
                SortOrder: SortOrder,
                OrderBy: OrderBy,
                GridColumns: GridColumns,
                GridColumnValues: GridColumnValues,
                GridColumnsWidth: GridColumnsWidth
            };

            $scope.overwriteText = false;
            $scope.overwriteSpiner = true;

            TechSchedService.updateSettings(settings)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            var res;
                            $uibModalInstance.close(res);
                            coreService.resetAlert();
                            coreService.setAlert({type: 'info', message: 'Filter is updated successfully'});
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                        $scope.overwriteText = true;
                        $scope.overwriteSpiner = false;
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };
        $scope.closeModal = function () {
            $uibModalInstance.close();
        }
    };
    controller.$inject = ['$scope', '$uibModalInstance', 'TechSchedService', 'coreService', '$filter', '$rootScope', '$uibModal']
    angular.module('techschedModule')
            .controller('TechSchedSettingsController', controller)
}());;(function () {
    var controller = function ($scope, $uibModal) {

      $scope.ShippingtinymceOptions = {
            selector: 'textarea',
            height: 400,
            min_height: 400,
            max_height: 400,
          fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
          plugins: "textcolor",
          menubar: false,
          toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor backcolor"
        };

        $scope.addShippingNote = function () {
            var text = '- \n';
            var dateTime = moment().format("HH:mm:ss a DD/MM/YYYY");
            console.log(dateTime);
            var notes = $scope.currentItem.ShippingNotes == null? '':$scope.currentItem.ShippingNotes;
            $scope.currentItem.ShippingNotes = '' + dateTime + '<br/>' + text + notes + '';
        };

    }
    controller.$inject = ['$scope', '$uibModal']
    angular.module('techschedModule')
            .controller('TechSchedShippingController',controller)
}())
;(function () {
    var controller = function ($scope, $uibModal) {


        var readOnly = 1;
        if($scope.fieldsAccess.schedadmin) {
            readOnly = 0;
        }

        // $scope.fieldsAccess.schedadmin = true;
        $scope.tinymceOptions = {
            selector: 'textarea',
            height: 45,
            min_height: 45,
            fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
            plugins: "textcolor",
            menubar: false,
            toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor backcolor"
            // readonly : readOnly
        };

        $scope.tinymceOptionsbigger = {
            selector: 'textarea',
            height: 430,
            min_height: 430,
            max_height: 430,
            fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
            plugins: "textcolor",
            menubar: false,
            toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor backcolor"
            // readonly : readOnly
        };


        $scope.tinymceOptionsbigger2 = {
            selector: 'textarea',
            height: 121,
            min_height: 121,
            max_height: 121,
            fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
            plugins: "textcolor",
            menubar: false,
            toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor backcolor"
            // readonly : readOnly
        };



    }
    controller.$inject = ['$scope', '$uibModal']
    angular.module('techschedModule')
            .controller('TechSchedWOController', controller)
}())
;(function () {
    var controller = function ($scope, $uibModal, TechSchedService, coreService, $filter, $rootScope, $timeout, $window) {

        $scope.tinymceOption = {
            selector: 'textarea',
            height: 390,
            min_height: 390,
            max_height: 390,
            fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
            plugins: "textcolor",
            menubar: false,
            toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor | backcolor"
        };

        $scope.animationsEnabled = true;
        ///**
        $scope.InitialLetter = function (size) {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedModule/views/techschedinitialletter.html',
                controller: 'TechSchedEmailController',
                scope: $scope,
                resolve: {
                    currentItem: function () {
                        return $scope.currentItem;
                    }
                }
            });
        };
        ///**
        $scope.InternalUpdate = function (size) {

            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedModule/views/techschedinternalupdate.html',
                controller: 'TechSchedEmailController',
                resolve: {
                    currentItem: function () {
                        return $scope.currentItem;
                    }
                }
            });
        };

        ///**
        $scope.StatusUpdate = function (size) {
            var date = '';
            $scope.module = 'techsched';
            coreService.setCurrentState($scope.module);

            var techName = $scope.currentItem.TechName;
            var onSiteDate = $scope.currentItem.OnSiteDate;
            var stContact = $scope.currentItem.STContact;
            var emailAddress = $scope.currentItem.STEmail;
            var customer = $scope.currentItem.Customer;
            if (customer != "null" && customer != "undefined") {
                customer = customer.trim();
            }
            if (techName === null || techName === undefined) {
                techName = '';
            }
            if (stContact === null || stContact === undefined) {
                stContact = '';
            }
            if (emailAddress === null || emailAddress === undefined) {
                stContact = '';
            }

            if (onSiteDate) {
                date = moment(onSiteDate).format('MM-DD-YYYY');
//                date = $filter('utcToLocal2')(onSiteDate, 'date');
//                date = moment(date).format('MM-DD-YYYY');
            } else {
                date = '';
            }
            if (date === undefined || date === null || date == 'Invalid date') {
                date = '';
            }
            console.log(onSiteDate);
            console.log(date);
            $scope.emails = [];
            $scope.to = {'contact': {'email': emailAddress, 'fullname': stContact}};
            $scope.emails.push($scope.to);

            $scope.subject = "Update re: " + customer;

            $scope.message = "Dear Mr. " + stContact + ",<br/><br/>" +
                    "This message will confirm the following:<br/>" +
                    "Your order is scheduled to arrive " + date + ".<br/>" +
                    "Our Technical Consultant's name is " + techName + "." + "<br/>" +
                    "If you have any further questions or this information is incorrect please call me immediately.<br/><br/><br/>" +
                    "Regards,<br/><br/>";

            var email = {
                subject: $scope.subject,
                body: $scope.message,
                toArray: $scope.emails,
                attachments: []
            }

            if (emailAddress !== null && emailAddress.trim() != "") {
                $scope.db.email = email;
                console.log($scope.db);
                $rootScope.UpdateNotes('Update sent to customer via Email.');
                var uibModal = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/emailModule/views/emailwithupload.html',
                    controller: 'EmailWithUploadController',
                    size: 'lg'
                });
            } else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: "You must enter Email Address in Site Email in Work Order Notes"});

            }
        };

        ///**
        $scope.Email = function (size) {
            var date = '';
            $scope.module = 'techsched';
            coreService.setCurrentState($scope.module);
            console.log($scope.db);
            $scope.customer = $scope.currentItem.Customer;
            $scope.techName = $scope.currentItem.TechName;
            var data = {
                'TechName': $scope.techName
            };
            TechSchedService.getTechEmail(data)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data)
                            $scope.currentItem.TechNameEmail = response.data;
                            $scope.emails = [];
                            $scope.to = {'contact': {'email': $scope.currentItem.TechNameEmail, 'fullname': $scope.techName}};
                            $scope.emails.push($scope.to);
                            if ($scope.currentItem.TechOnSiteDate) {
                                date = $filter('utcToLocal2')($scope.currentItem.TechOnSiteDate, 'date');
//                date = moment(date).format('MM-DD-YYYY');
                            } else {
                                date = '';
                            }
//            $scope.email.push($scope.currentItem.TechNameEmail + ";");
                            var time = "";
                            var TechOnSiteTime = $scope.currentItem.TechOnSiteTime;

                            if (TechOnSiteTime) {
                                time = $filter('date')(TechOnSiteTime, 'shortTime', 'h:mm a');
                            }
                            if (time === undefined || time === null || time == 'Invalid date') {
                                time = '';
                            }
                            if (date === undefined || date === null || date == 'Invalid date') {
                                date = '';
                            }
                            $scope.subject = "Re: " + $scope.currentItem.Customer;
                            $scope.message = "We have confirmed with the customer that you will arrive on site " +
                                    date + " at " +
                                    time + " <br/>" +
                                    "<br/><br/>";
                            var email = {
                                subject: $scope.subject,
                                body: $scope.message,
                                toArray: $scope.emails,
                                attachments: []
                            }
                            $scope.db.email = email;
                            console.log($scope.db);
                            $rootScope.UpdateNotes('Update sent to Tech.');
                            var uibModal = $uibModal.open({
                                animation: true,
                                templateUrl: 'app/emailModule/views/emailwithupload.html',
                                controller: 'EmailWithUploadController',
                                size: 'lg'
                            });

                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (error) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: error.data})
                    });
        };
        /*tinymce.init({
         selector: 'textarea',
         height: 390,
         min_height: 390,
         max_height: 390,
         fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
         plugins: "textcolor",
         menubar: false,
         toolbar: "sizeselect | fontselect |  fontsizeselect | forecolor | backcolor",
         init_instance_callback: function (editor) {
         editor.on('SetContent', function (e) {
         e.selectRange(10);
         });
         }
         });*/

        $rootScope.UpdateNotes = function (addedText) {
            var text = '- \n' + addedText;
            var dateTime = moment().format("hh:mm:ss a MM-DD-YYYY");
            var notes = $scope.currentItem.Comments;
            $scope.currentItem.Comments = '' + dateTime + '<br/>' + text + notes + '';
//            var length = (dateTime + '<br/>' + '-').length;
//            var ed = tinyMCE.activeEditor;
//            ed.focus();
//            var newNode = ed.dom.select('#Comments');
//            newNode.selectRange(length);

//add an empty span with a unique id
//var endId = tinyMCE.DOM.uniqueId();
//ed.dom.add(ed.getBody(), 'span', {'id': endId}, '');
//
////select that span
//var newNode = ed.dom.select('span#' + endId);
////ed.selection.select(newNode[0]);
////ed.focus();
////ed.selection.setNode(newNode[0]);
//ed.selection.setCursorLocation(newNode[0]);

            //var element = tinyMCE.EditorManager.get('textarea');
//            var element = $window.document.getElementById('comments');
//            element.focus();
//            element.selectRange(length);

            // $("#comments").selectRange(length);
            //var element = $window.document.getElementById('comments');

            //$("#comments").focus();
            //$("#comments").selectRange(length);

            /*$timeout(function () {
             var element = $window.document.getElementById('comments');
             if (element) {
             element.focus();
             $("#comments").selectRange(length);
             }
             });
             
             $timeout(function () {
             var editor = $window.document.getElementById('comments');
             editor.selection.select(editor.getBody(), true);
             editor.selection.collapse(false);
             editor.focus();
             });*/

//            var elemenst = $window.document.getElementById('comments');
//            if (element)
//                element.focus();
//            console.log($('#comments').prop('selectionStart'));
        };

//        $.fn.selectRange = function (start, end) {
//
//            if (end === undefined) {
//                end = start;
//            }
//
//            console.log("start == " + start);
//
//            return this.each(function () {
//                if ('selectionStart' in this) {
//                    this.selectionStart = start;
//                    this.selectionEnd = end;
//                } else if (this.setSelectionRange) {
//                    this.setSelectionRange(start, end);
//                } else if (this.createTextRange) {
//                    var range = this.createTextRange();
//                    range.collapse(true);
//                    range.moveEnd('character', end);
//                    range.moveStart('character', start);
//                    range.select();
//                }
//            });
//        };

        $scope.getAllTechs = function () {
            coreService.getAllTechs()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            $scope.techs = response.data;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

        $scope.selectedTechs = function () {
            console.log(this);
            $scope.currentItem.TechName = this.searchStr;
            console.log($scope.currentItem.TechName);
            var techData = $filter('filter')($scope.techs, {full_name: this.searchStr})[0];
            console.log(techData);
            if (techData) {
                $scope.currentItem.TechNameEmail = techData.user_email;
                console.log($scope.currentItem.TechNameEmail);
                $scope.currentItem.TechNameId = techData.user_id;
                console.log($scope.currentItem.TechNameId);
                $scope.saveTechsched('TechName', $scope.currentItem.TechName);
            }
        };

        $scope.getAllTechs();
    };
    controller.$inject = ['$scope', '$uibModal', 'TechSchedService', 'coreService', '$filter', '$rootScope', '$timeout', '$window']
    angular.module('techschedModule')
            .controller('TechSchedWONoteController', controller)
}())
;(function () {
    var controller = function ($scope, $rootScope, $uibModalInstance, $state, coreService) {
        $scope.$watch(function () {
            // return coreService.getParentDB('techsched')
            return $rootScope.db;
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && (coreService.getCurrentState() === "techschedview.techschedmain" || coreService.getCurrentState() === "techsched.shedule") ) {
                $scope.db = newVal
                if ($scope.db.hasOwnProperty('selectedTechsched') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true
//                    coreService.resetAlert()
//                    coreService.setAlert({type: 'wait', message: 'Fetching Tech Schedule .. Please wait'})
                    if ($scope.db.selectedTechsched !== null) {
                        console.log($scope.db.selectedTechsched);
                    }
                } else {
                    return
                }
            }
        }, true);

        $scope.openWOPdf = function () {
            var newVal = coreService.getDB();
            if (coreService.getCurrentState() === 'techsched' || coreService.getCurrentState() === 'techsched.shedule') {
                $scope.module = coreService.getCurrentState()
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                }
            }
            console.log($scope.pdfno);
            console.log($scope.db);
            console.log($scope.db.selectedTechsched);
            var num = $scope.db.selectedTechsched[$scope.pdfno];
            console.log(num);
            if (num) {
                num = num.trim();
                var res;
                $uibModalInstance.close(res);
                $state.go('workorder', {search: $scope.pdfno + num, from: 'techsched'});
            } else {
                coreService.resetAlert()
                coreService.setAlert({type: 'error', message: 'This number is null, Please choose another one'});
            }
        };
    };
    controller.$inject = ['$scope', '$rootScope', '$uibModalInstance', '$state', 'coreService']
    angular.module('techschedModule')
            .controller('TechSchedWOPdfController', controller)
}());;(function () {
    var factory = function ($http, coreService, $filter) {
        var response = {
            getAllTechSched: function (techscheddata) {
                return $http.post(coreService.getApi() + 'techschedallrecords', techscheddata);
            },
            saveSettings: function (techschedsettingsdata) {
                return $http.post(coreService.getApi() + 'techschedsavesettings', techschedsettingsdata);
            },
            saveProfileCustomFilter: function (techschedprofilefilterdata) {
                return $http.post(coreService.getApi() + 'techschedsaveprofilefilter', techschedprofilefilterdata);
            },
            getCustomFilterProfile: function(customfilterid){
                return $http.post(coreService.getApi() + 'techschedgetcustomfilterprofile', customfilterid);
            },
            getFavTableNames: function (techscheddata) {
                return $http.post(coreService.getApi() + 'techschedgetfavtablenames', techscheddata);
            },
            getGridColumns: function (techscheddata) {
                return $http.post(coreService.getApi() + 'techschedgetgridcolumns', techscheddata);
            },
            deleteSetting: function (tableid) {
                return $http.get(coreService.getApi() + 'techscheddeletesetting/' + tableid);
            },
            deleteCustomFilterProfile: function(customfilterid){
                return $http.get(coreService.getApi() + 'techscheddeletecustomfilterprofile/'+ customfilterid);
            },
            deleteProfileCustomFilters: function(profileid){
                return $http.get(coreService.getApi() + 'techscheddeleteprofilecustomfilters/'+ profileid);
            },
            renameSetting: function (tableid, name) {
                return $http.get(coreService.getApi() + 'techschedrenamesetting/' + tableid + '/' + name);
            },
            updateSettings: function (techschedsettingsdata) {
                return $http.post(coreService.getApi() + 'techschedupdatesetting', techschedsettingsdata);
            },
            setDateSearchField: function (item, searchDate) {
                var selectedItem = {};
                if (item.id === 'Blank') {
                    selectedItem.searchDate = '01-01-1000';
                } else if (item.id === 'NotBlank') {
                    selectedItem.searchDate = '09-09-9999';
                } else if (item.id === 0) { // today
                    var date = new Date();
                    selectedItem.searchDate = $filter('localToUtc2')(date, 'date');
                } else if (item.id === 1) { //last 7 days
                    var date = new Date();
                    var enddate = $filter('localToUtc2')(date, 'date');
                    console.log(enddate);
                    date.setDate(date.getDate() - 7);
                    var startdate = $filter('localToUtc2')(date, 'date');
                    console.log(startdate);
                    selectedItem.searchDate = startdate + ' To ' + enddate;
                } else if (item.id === 2) { //month to date
                    var date = new Date();
                    var enddate = $filter('localToUtc2')(date, 'date');
                    console.log(enddate);
                    date.setDate(date.getDate() - (date.getDate() - 1));
                    var startdate = $filter('localToUtc2')(date, 'date');
                    console.log(startdate);
                    selectedItem.searchDate = startdate + ' To ' + enddate;
                } else if (item.id === 3) { //year to date
                    var date = new Date();
                    var enddate = $filter('localToUtc2')(date, 'date');
                    console.log(enddate);
                    var date = date.getFullYear() + '-01-01';
                    var startdate = $filter('localToUtc2')(date, 'date');
                    console.log(startdate);
                    selectedItem.searchDate = startdate + ' To ' + enddate;
                } else if (item.id === 4) { //the previous month
                    var date = new Date();
                    var month = date.getMonth();
                    var year = date.getFullYear();
                    if (month === 0) {
                        month = 12;
                        year = year - 1;
                    }
                    date.setFullYear(year, month, 0);
                    var enddate = $filter('localToUtc2')(date, 'date');
                    console.log(enddate);
                    var date = new Date();
                    date.setFullYear(year, month - 1, 1);
                    var startdate = $filter('localToUtc2')(date, 'date');
                    console.log(startdate);
                    selectedItem.searchDate = startdate + ' To ' + enddate;
                } else if (item.id === 5) { // specific date
                    console.log(searchDate);
                    selectedItem.searchDate = $filter('localToUtc2')(searchDate, 'date');
                    console.log(selectedItem.searchDate);
//                    selectedItem.searchDate = searchDate;
                } else if (item.id === 6) { // all dates before
//                    searchDate.setDate(searchDate.getDate() + 1);
                    var date = $filter('localToUtc2')(searchDate, 'date');
                    console.log(searchDate);
                    selectedItem.searchDate = '< ' + date;
                } else if (item.id === 7) { // all dates after
//                    searchDate.setDate(searchDate.getDate() + 1);
                    var date = $filter('localToUtc2')(searchDate, 'date');
                    console.log(searchDate);
                    selectedItem.searchDate = date + ' >';
                } else if (item.id === 8) { // date range
                    var startdate = moment(searchDate.startDate, 'YYYY-MM-DD hh:mm:ss').format('MM-DD-YYYY');
                    var enddate = moment(searchDate.endDate, 'YYYY-MM-DD hh:mm:ss').format('MM-DD-YYYY');
                    selectedItem.searchDate = startdate + ' To ' + enddate;
                }
                return selectedItem;
            },
            getDateIdByValue: function (value) {
                var id = '';
                // today
                var date1 = new Date();
                date1 = $filter('localToUtc')(date1, 'date');
                // last 7 days
                var date2 = new Date();
                var enddate = $filter('localToUtc')(date2, 'date');
                console.log(enddate);
                date2.setDate(date2.getDate() - 7);
                var startdate = $filter('localToUtc')(date2, 'date');
                console.log(startdate);
                var date2 = startdate + ' To ' + enddate;
                // month to date
                var date3 = new Date();
                var enddate = $filter('localToUtc')(date3, 'date');
                console.log(enddate);
                date3.setDate(date3.getDate() - (date3.getDate() - 1));
                var startdate = $filter('localToUtc')(date3, 'date');
                console.log(startdate);
                var date3 = startdate + ' To ' + enddate;
                // year to date
                var date4 = new Date();
                var enddate = $filter('localToUtc')(date4, 'date');
                console.log(enddate);
                var date4 = date4.getFullYear() + '-01-01';
                var startdate = $filter('localToUtc')(date4, 'date');
                console.log(startdate);
                var date4 = startdate + ' To ' + enddate;
                //the previous month 
                var date5 = new Date();
                var month = date5.getMonth();
                var year = date5.getFullYear();
                if (month === 0) {
                    month = 12;
                    year = year - 1;
                }
                date5.setFullYear(year, month, 0);
                var enddate = $filter('localToUtc')(date5, 'date');
                console.log(enddate);
                var date5 = new Date();
                date5.setFullYear(year, month - 1, 1);
                var startdate = $filter('localToUtc')(date5, 'date');
                console.log(startdate);
                var date5 = startdate + ' To ' + enddate;

                if (value === '01-01-1000') {
                    id = 'Blank';
                } else if (value === '09-09-9999') {
                    id = 'NotBlank';
                } else if (value === date1) { //today
                    id = 0;
                } else if (value === date2) { //last 7 days
                    id = 1;
                } else if (value === date3) { //month to date
                    id = 2;
                } else if (value === date4) { //year to date
                    id = 3;
                } else if (value === date5) { //the previous month
                    id = 4;
                } else {
                    if (value.indexOf('<') !== -1) { // all dates before
                        id = 6;
                    } else if (value.indexOf('>') !== -1) { // all dates after
                        id = 7;
                    } else if (value.indexOf('To') !== -1) { // date range
                        id = 8;
                    } else { // specific date
                        id = 5;
                    }
                }
                return id;
            },
//            convertStringToDate: function(dateString){
//                var date = '';
//                if(dateString.indexOf('<') !== -1){
//                    var date = dateString.split('< ');
//                    console.log(date);
//                    var date = moment(date[1], 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
//                    console.log(date);
//                }else if(dateString.indexOf('>') !== -1){
//                    var date = dateString.split(' >');
//                    console.log(date);
//                    var date = moment(date[0], 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
//                    console.log(date);
//                }else if(dateString.indexOf('To') !== -1){
//                    var date = dateString.split(' To ');
//                    console.log(date);
//                    var startdate = moment(date[0], 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
//                    var enddate = moment(date[1], 'YYYY-MM-DD hh:mm:ss').format('YYYY-MM-DD');
//                    console.log(startdate);
//                    console.log(enddate);
//                    var date = startdate + ' ' + enddate;
//                }
//                return date;
//            }
            generateProductionReport: function () {
                return $http.get(coreService.getApi() + 'techschedproductionreport');
            },
            generateTableExcel: function () {
                return $http.get(coreService.getApi() + 'techscheexcelexport');
            },
//            generateProductionReport: function(reporttype){
//                return $http.get(coreService.getApi()+'techschedproductionreport/'+reporttype);
//            },
            getUpdatedHideJobs: function () {
                return $http.get(coreService.getApi() + 'techschedupdatedhidejobs');
            },

            techschedUpdate: function(update){
                return $http.put(coreService.getApi()+'techschedupdate',update)
            },
            techschedGetByClause: function(clause){
                return $http.get(coreService.getApi() + 'techschedgetbyclause/'+ clause);
            },
            getTechUserNames: function(value){
                return $http.post(coreService.getApi() + 'getTechUserNames', value);
            },
            getRelatedWO: function(data){
                return $http.post(coreService.getApi() + 'techschedgetrelatedwo', data);
            },
            getTechEmail: function(techname){
                return $http.post(coreService.getApi() + 'techschedgettechemail', techname);
            }

        };
        return response;
    };
    factory.$inject = ['$http', 'coreService', '$filter'];
    angular.module('techschedModule')
            .factory('TechSchedService', factory)
            .factory('Excel',['$window',function($window){
                var uri='data:application/vnd.ms-excel;base64,',
                    template='<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" ' +
                        'xmlns="http://www.w3.org/TR/REC-html40"><head>' +
                        '</head><body><table>{table}</table></body></html>',
                    base64=function(s){return $window.btoa(unescape(encodeURIComponent(s)));},
                    format=function(s,c){return s.replace(/{(\w+)}/g,function(m,p){return c[p];})};
                return {
                    tableToExcel:function(tableId,worksheetName){
                        var table=$(tableId),
                            ctx={worksheet:worksheetName,table:table.html()},
                            href=uri+base64(format(template,ctx));
                        return href;
                    }
                };
            }]);
}());;(function () {
    var controller = function ($scope, $uibModalInstance, coreService, TechSchedViewService, $uibModal, $rootScope, $filter) {

        $scope.module = 'techsched';
        coreService.setCurrentState($scope.module);

        $scope.choice1 = 'Concrete Anchors';
        $scope.choice2 = 'Yes';
        $scope.choice3 = 'All';

        $scope.$watch(function () {
            return coreService.getParentDB($scope.module);
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal)) {
                $scope.db = newVal
                if ($scope.db.hasOwnProperty('selectedTechsched')) {
                    $scope.currentItem = $scope.db.selectedTechsched;
                    $scope.to = $scope.db.selectedTechsched.STEmail;
                    $scope.name = $scope.db.selectedTechsched.STContact;
                }
            }
        });
        $scope.sendEmail = function () {
//            var mailBodyFinished = false;
            var earth = false;
            var Flag = false;
            var crew = 0;
            var document1 = {};
            var document2 = {};
            var s1 = $scope.currentItem.WOInfo;

            if (s1.toLowerCase().match("earth anchors")) {
                earth = true;
            }

            if ($scope.currentItem.Insulated == true && earth == true) {
                s2 = "InsulatedEarth";
                var document2_name = "Ops_EarthAnchorGuide.pdf";
                document2 = {
                    db: $scope.module,
                    file: '/data/techsched_documents/' + document2_name,
                    name: document2_name
                };
            }
            else if ($scope.currentItem.Insulated == true && earth == false) {
                s2 = "InsulatedConcrete";
            }
            else if ($scope.currentItem.Insulated == false && earth == true) {
                s2 = "Earth";
                var document2_name = "Ops_EarthAnchorGuide.pdf";
                document2 = {
                    db: $scope.module,
                    file: '/data/techsched_documents/' + document2_name,
                    name: document2_name
                };
            }
            else if ($scope.currentItem.Insulated == false && earth == false) {
                s2 = "Concrete";
            }

            if ($scope.currentItem.Width != "") {
                var document1_name = "Ops_" + $scope.currentItem.Width.trim() + s2.trim() + ".pdf";
                document1 = {
                    db: $scope.module,
                    file: '/data/techsched_documents/' + document1_name,
                    name: document1_name
                };
            }

            switch (parseInt($scope.currentItem.Width)) {
                case 30:
                    crew = 4;
                    if ($scope.currentItem.LaborersReqd > 4) {
                        twotcs = true;
                    }
                    break;

                case 40:
                    crew = 5;
                    if ($scope.currentItem.LaborersReqd > 5) {
                        twotcs = true;
                    }
                    break;

                case 50:
                    crew = 6;
                    if ($scope.currentItem.LaborersReqd > 6) {
                        twotcs = true;
                    }
                    break;

                case 60:
                    crew = 7;
                    if ($scope.currentItem.LaborersReqd > 7) {
                        twotcs = true;
                    }
                    break;

                case 70:
                    crew = 8;
                    if ($scope.currentItem.LaborersReqd > 8) {
                        twotcs = true;
                    }
                    break;

                case 80:
                    crew = 9;
                    if ($scope.currentItem.LaborersReqd > 9) {
                        twotcs = true;
                    }
                    break;

                case 88 :
                case "27M":
                    crew = 9;
                    if ($scope.currentItem.LaborersReqd > 9) {
                        twotcs = true;
                    }
                    break;

                case 90:
                    crew = 10;
                    if ($scope.currentItem.LaborersReqd > 10) {
                        twotcs = true;
                    }
                    break;

                case 100:
                    crew = 12;
                    if ($scope.currentItem.LaborersReqd > 12) {
                        twotcs = true;
                    }
                    break;

                case 110:
                    crew = 12;
                    if ($scope.currentItem.LaborersReqd > 12) {
                        twotcs = true
                    }
                    break;

                case 120:
                    crew = 14;
                    if ($scope.currentItem.LaborersReqd > 14) {
                        twotcs = true
                    }
                    break;

                case 130:
                    crew = 14;
                    if ($scope.currentItem.LaborersReqd > 14) {
                        twotcs = true;
                    }
                    break;
            }
            console.log($scope.to);
            console.log($scope.name);
            console.log($scope.choice1);
            console.log($scope.choice2);

            console.log($scope.db);
            $scope.emails = [];
            $scope.toEmail = {'contact': {'email': $scope.to, 'fullname': $scope.name}};
            $scope.emails.push($scope.toEmail);
//            $scope.email.push($scope.currentItem.TechNameEmail + ";");
            if ($scope.currentItem.Customer)
                Customer = $scope.currentItem.Customer.trim();
            $scope.subject = "Construction Info re: " + Customer + " > Sprung Structure assembly.";
            $scope.message = "Dear " + $scope.name + "," + "<br/>" + "<br/>";

            var Wording = '';
            var templates = ["IntroErect", "DeliveryFirm1", "DeliveryFirm2", "DeliveryBlank", "DeliveryMaybe1"
                        , "DeliveryMaybe2", "Tech1", "Tech2", "AnchorEarth", "AnchorConcrete", "AnchorPins", "2Techs1"
                        , "2Techs2", "2Techs3", "GeneralClose"];
            var messages = [];
            var counter = 0;
            angular.forEach(templates, function (value, key) {
                TechSchedViewService.techschedGetByClause(value)
                        .then(function (response) {
                            console.log(response.data);
                            if (!response.data.hasOwnProperty('file')) {
                                Wording = response.data;
                                var res = Wording.split('"');
                                Wording = res[1];
                                if (Wording != "") {
                                    messages[key] = Wording;
                                    counter++;
//                                $scope.message += Wording + "<br/>" + "<br/>";
                                }
                            }
                        });
            });
            var intvl = setInterval(function () {
                if (counter === 15) {
                    clearInterval(intvl);
                    $scope.message += messages[0] + "<br/>" + "<br/>";

                    var mergeMessage = '';
                    if ($scope.currentItem.OnSiteConfirmed) {
                        var date = $filter('utcToLocal')($scope.currentItem.TechOnSiteDate, 'datetime');
                        date = moment(date).format('MM-DD-YYYY');
                        $scope.message += messages[1] + " " + date;

                        var date = $filter('utcToLocal')($scope.currentItem.INCShipDate, 'datetime');
                        date = moment(date).format('MM-DD-YYYY');
                        $scope.message += messages[2] + " " + date;

                        Delivery = mergeMessage;
                    }
                    else if ($scope.currentItem.TechOnSiteDate == "") {
                        $scope.message += "<br/>" + messages[3] + "<br/>";

                        Delivery = mergeMessage
                    }
                    else if ($scope.currentItem.TechOnSiteDate != "" && ($scope.currentItem.OnSiteConfirmed == false || $scope.currentItem.OnSiteConfirmed == "")) {

                        var date = $filter('utcToLocal')($scope.currentItem.TechOnSiteDate, 'datetime');
                        date = moment(date).format('MM-DD-YYYY');
                        $scope.message += " " + messages[4] + " " + date;

                        $scope.message += " " + messages[5] + "<br/>";

                        Delivery = mergeMessage;
                    }

                    if (!$scope.currentItem.TechConfirmed) {
                        $scope.message += "<br/>" + messages[6];

                        $scope.message += " " + messages[7] + "<br/>";

                        Tech = mergeMessage;
                    }
                    else {
                        $scope.message += "<br/>" + messages[6] + ", " + $scope.currentItem.TechName + ",";

                        var date = $filter('utcToLocal')($scope.currentItem.TechOnSiteDate, 'datetime');
                        date = moment(date).format('MM-DD-YYYY');
                        $scope.message += "<br/>" + messages[7] + " at " + $scope.currentItem.TechOnSiteTime + " on " + date + "." + "<br/>";

                        Tech = mergeMessage;
                    }

                    if (earth == true) {
                        $scope.message += "<br/>" + messages[8];

                        Anchor = mergeMessage;
                    }
                    else {
                        Flag = true;
                    }

                    if (Flag == true) {
                        if ($scope.choice1 == "Concrete Anchors") {
                            $scope.message += "<br/>" + messages[9] + "<br/>";

                            Anchor = mergeMessage;
                        }
                        else {
                            $scope.message += "<br/>" + messages[10] + "<br/>";

                            Anchor = mergeMessage;
                        }
                    }

                    if ($scope.choice2 == "Yes") {
                        twotcs = true;
                    }
                    else {
                        twotcs = false;
                    }

                    //view(twotcs, "Are two techs required?")
                    //alert(twotcs)
                    if (twotcs) {
                        $scope.message += "<br/>" + messages[11] + " " + crew + ".";

                        $scope.message += messages[12] + " " + (2 * crew) + ", ";

                        $scope.message += messages[13];

                        TwoTechs = mergeMessage;
                    }
                    var close = messages[14].split('<');
                    console.log(close);
                    var close2 = close[2].split('>');
                    console.log(close2);
                    $scope.message += "<br/>" + "<br/>" + close[0] + "<br/>" + "<br/>" + close2[1];

                    Close = mergeMessage;

                    console.log($scope.message);
                    console.log(document1);
                    console.log(document2);
                    var attachments = [];
                    if (document1.hasOwnProperty('file'))
                        attachments.push(document1);
                    if (document2.hasOwnProperty('file'))
                        attachments.push(document2);

                    console.log(attachments);
//                    var intvl = setInterval(function () {
//                        if (mailBodyFinished) {
//                            clearInterval(intvl);
                    var email = {
                        subject: $scope.subject,
                        body: $scope.message,
                        toArray: $scope.emails,
                        attachments: attachments
                    }
                    $scope.db.email = email;
                    console.log($scope.db);
                    var res;
                    $uibModalInstance.close(res);
                    $rootScope.UpdateNotes('Initial Introduction sent to customer via email.');
                    var uibModal = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/emailModule/views/email.html',
                        controller: 'EmailController',
                        size: 'lg'
                    });
//                        }
//
//                    }, 100);
                }
            }, 100);
        };

        $scope.sendEmail2 = function () {
            console.log($scope.choice3);
            var WO = ShipDate = EmailText1 = EmailText2 = EmailText3 = EmailText4 = EmailText5 = EmailText6 = EmailText7 = EmailText8 = "";
//            var ID = document.getElementById("Row_ID").value;
            var INC = $scope.db.selectedTechsched.INC;
            console.log(INC);
            var Customer = $scope.db.selectedTechsched.Customer;
            if (Customer != "null" && Customer != "undefined")
            {
                Customer = Customer.trim();
            }
            var LTD = $scope.db.selectedTechsched.LTD;
            var Width = $scope.db.selectedTechsched.Width;
            var Length = $scope.db.selectedTechsched.Length;

            var SalesOffice = $scope.db.selectedTechsched.SalesOffice;
            var STContact = $scope.db.selectedTechsched.STContact;
            var STPhone1 = $scope.db.selectedTechsched.STPhone1;
            var STPhone2 = $scope.db.selectedTechsched.STPhone2;
            var TechName = $scope.db.selectedTechsched.TechName;

            var TechOnSiteTime = $scope.db.selectedTechsched.TechOnSiteTime;
            var TechOnSiteDate = $scope.db.selectedTechsched.TechOnSiteDate;
            if (TechOnSiteDate) {
                TechOnSiteDate = $filter('utcToLocal')(TechOnSiteDate, 'datetime');
                TechOnSiteDate = moment(TechOnSiteDate).format('MM-DD-YYYY');
            }

            var TechOnSiteConfirmed = $scope.db.selectedTechsched.TechOnSiteConfirmed;

            var OnSiteDate = $scope.db.selectedTechsched.OnSiteDate;
            if (OnSiteDate) {
                OnSiteDate = $filter('utcToLocal')(OnSiteDate, 'datetime');
                OnSiteDate = moment(OnSiteDate).format('MM-DD-YYYY');
            }
            var OnSiteConfirmed = $scope.db.selectedTechsched.OnSiteConfirmed;

            var INCShipDate = $scope.db.selectedTechsched.INCShipDate;
            if (INCShipDate) {
                INCShipDate = $filter('utcToLocal')(INCShipDate, 'datetime');
                INCShipDate = moment(INCShipDate).format('MM-DD-YYYY');
            }

            var LTDShipDate = $scope.db.selectedTechsched.LTDShipDate;
            if (LTDShipDate) {
                LTDShipDate = $filter('utcToLocal')(LTDShipDate, 'datetime');
                LTDShipDate = moment(LTDShipDate).format('MM-DD-YYYY');
            }

            var LTDtoSite = $scope.db.selectedTechsched.LTDtoSite;
            var INCDateConfirmed = $scope.db.selectedTechsched.INCDateConfirmed;
            var LTDDateConfirmed = $scope.db.selectedTechsched.LTDDateConfirmed;
            var INCShipped = $scope.db.selectedTechsched.INCShipped;
            var LTDShipped = $scope.db.selectedTechsched.LTDShipped;

            var STEmail = $scope.db.selectedTechsched.STEmail;
            var WOInfo = $scope.db.selectedTechsched.WOInfo;

            var TCCoordinator = $scope.db.selectedTechsched.TCCoordinator;

            if (INC != "" && LTD == "") {
                WO = "INC " + INC;
            }
            else if (LTD != "" && INC == "") {
                WO = "LTD " + LTD;
            }
            else {
                WO = "INC " + INC + " LTD " + LTD;
            }

            if (INC == "") {
                ShipDate = LTDShipDate;
            }
            else if (LTD == "" && INCShipDate == "") {
                ShipDate = LTDShipDate;
            }
            else if (LTD == "" && INCShipDate != "") {
                ShipDate = INCShipDate;
            }
            else {
                ShipDate = "";
            }

            if (ShipDate == "") {
                EmailText1 = "";
            }
            else {
                EmailText1 = "Order is scheduled to ship " + ShipDate + ".<br/>";
            }

            if (OnSiteDate != "") {
                EmailText2 = "Structure is scheduled to arrive on site " + OnSiteDate + ".<br/>";
            }
            else {
                EmailText2 = "";
            }

            if (TechName != "") {
                EmailText3 = "The name of the Technical Consultant is " + TechName + ".<br/>" + "The Tech Coordinator for this project is " + TCCoordinator + ".<br/>";
            }
            else {
                EmailText3 = "";
            }

            if (OnSiteConfirmed == true) {
                EmailText4 = "This date has been confirmed by the customer.";
            }
            else {
                EmailText4 = "";
            }

            if (INCShipDate != "" && INCDateConfirmed != true && INCShipped != true) {
                EmailText5 = "Salt Lake City is scheduled to ship " + INCShipDate + ".<br/>";
            }
            else if (INCShipDate != "" && (INCShipped == true || INCDateConfirmed == true)) {
                EmailText5 = "Salt Lake City has shipped " + INCShipDate + ".<br/>";
            }
            else {
                EmailText5 = "";
            }

            if (TechOnSiteDate != "" && TechOnSiteConfirmed == true) {
                EmailText7 = "Technical Consultant is scheduled to arrive " + TechOnSiteDate + " at " + TechOnSiteTime + "<br/>";
            }
            else {
                EmailText7 = "";
            }

            if (LTDShipDate != "" && LTDDateConfirmed != true && LTDShipped != true) {
                if (LTDtoSite == true) {
                    s = "directly to site ";
                }
                else {
                    s = "to Salt Lake ";
                }
                EmailText6 = "Calgary is scheduled to ship " + s + LTDShipDate + ".<br/>";
            }
            else if (LTDShipped == true) {
                if (LTDtoSite == true) {
                    s = "directly to site ";
                }
                else {
                    s = "to Salt Lake ";
                }
                EmailText6 = "Calgary has shipped " + s + LTDShipDate + ".<br/>";
            }
            else {
                EmailText6 = "";
            }

            if (!STContact)
                STContact = '';
            if (!STPhone1)
                STPhone1 = '';
            if (!STPhone2)
                STPhone2 = '';
            if (!STEmail)
                STEmail = '';
            EmailText8 = "<br/><u>Site Information:</u><br/>Site Contact: " + STContact + "<br/>Site Phone: " + STPhone1 + "<br/>Site Mobile: " + STPhone2 + "<br/>Site Email: " + STEmail + "<br/><br/><u>Structure Size:</u><br/>" + Width + " X " + Length + "<br/><br/><u>Options Include:</u><br/>" + WOInfo;

            $scope.subject = "Update Re: " + " Work Order " + WO + " " + Customer
            $scope.message = "This is an update!!<br/>" + EmailText1 + EmailText7 + EmailText5 + EmailText6 + EmailText3 + EmailText2 + EmailText4 + EmailText8


            $scope.message += "<br/>";

            $scope.emails = [];
            coreService.getSalesEmails($scope.choice3, SalesOffice)
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            angular.forEach(response.data, function (email) {
                                $scope.toEmail = {'contact': {'email': email.user_email, 'fullname': email.full_name}};
                                $scope.emails.push($scope.toEmail);
                            });
                            console.log($scope.emails);
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'error', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'error', message: error.data});
                    });
            var email = {
                subject: $scope.subject,
                body: $scope.message,
                toArray: $scope.emails,
                attachments: []
            }
            $scope.db.email = email;
            console.log($scope.db);
            var res;
            $uibModalInstance.close(res);
            $rootScope.UpdateNotes("Update sent to " + $scope.choice3 + ".");
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/email.html',
                controller: 'EmailController',
                size: 'lg'
            });
        };
        $scope.closeEmail = function () {
            var res;
            $uibModalInstance.close(res);
        };
    };
    controller.$inject = ['$scope', '$uibModalInstance', 'coreService', 'TechSchedViewService', '$uibModal', '$rootScope', '$filter'];
    angular.module('techschedviewModule')
            .controller('TechSchedEmailController', controller);
}());
;(function(){
  var controller =   function ($scope, $state) {
//    $state.go('techsched.schedule');
//    $scope.$watch($scope.currentItem.LaborersReqd, function (newVal) {
//        if (newVal) {
//            $scope.CalculateManHour();
//        }
//    });
//    $scope.$watch($scope.currentItem.OnSiteDays, function (newVal) {
//        if (newVal) {
//            $scope.CalculateManHour();
//        }
//    });
//    $scope.CalculateManHour = function () {
//        console.log($scope.currentItem.LaborersReqd);
//        console.log($scope.currentItem.OnSiteDays);
//        $scope.currentItem.ManHours = parseInt($scope.currentItem.LaborersReqd) * 8 * parseInt($scope.currentItem.OnSiteDays);
//        console.log($scope.currentItem.ManHours);
//    };
}
controller.$inject = ['$scope', '$state']
angular.module('techschedviewModule')
        .controller('TechSchedMainController',controller)
}())
;(function () {
    var controller = function ($scope, $uibModal) {


      $scope.ShippingtinymceOptions = {
            selector: 'textarea',
            height: 400,
            min_height: 400,
            max_height: 400,
            menubar: false,
            toolbar: false
        };

        $scope.addShippingNote = function () {
            var text = '- \n';
            var dateTime = moment().format("HH:mm:ss a DD/MM/YYYY");
            console.log(dateTime);
            var notes = $scope.currentItem.ShippingNotes == null? '':$scope.currentItem.ShippingNotes;
            $scope.currentItem.ShippingNotes = '' + dateTime + '<br/>' + text + notes + '';
        };

    }
    controller.$inject = ['$scope', '$uibModal']
    angular.module('techschedviewModule')
            .controller('TechSchedShippingController',controller)
}())
;(function () {
    var controller = function ($scope, coreService, $state, TechSchedViewService, $filter) {
        $scope.isNew = false
        $scope.fetched = false;
        $scope.currentItem = {};
        $scope.techonsitetimeopened = false;
        $scope.techonsitedateopened = false;
        $scope.onsitedateopened = false;
        $scope.incshipdateopened = false;
        $scope.ltdshipdateopened = false;
        $scope.hideuntilopened = false;
        $scope.datecompletedopened = false;

        $scope.mytime = new Date();

        $scope.hstep = 1;
        $scope.mstep = 15;

        $scope.ismeridian = true;

        $scope.fieldsAccess = {
            schedadmin: true,
            scheduser: true,
            schedship: true,
            schedviewer: true
        };
        $scope.tabData = [
            {
                heading: "Main",
                route: "techschedview.techschedmain"
            },
            {
                heading: "Contracts",
                route: "techschedview.techschedwonote"
            },
            {
                heading: "Work Order",
                route: "techschedview.techschedwo"
            },
            {
                heading: "Shipping",
                route: "techschedview.techschedshipping"
            }
        ];
        $scope.prepareWOInfo = function () {
            var newstr = '';
            var str = $scope.db.selectedTechsched.WOInfo.split('&lt;p&gt;');
            str.splice(0, 1);
            console.log(str);
            angular.forEach(str, function (line) {
                newstr += '<p>' + line + '</p>';
            });
            console.log(newstr);
//            if(newstr.indexOf('&amp;') !== -1){
//                newstr.replace('&amp;','&');
//            }
//            console.log(newstr);
            $scope.db.selectedTechsched.WOInfo = newstr;
        };
        $scope.prepareLogo = function () {
            if ($scope.db.selectedTechsched.Logo === true) {
                $scope.db.selectedTechsched.Logo = 'yes';
            } else if ($scope.db.selectedTechsched.Logo === false) {
                $scope.db.selectedTechsched.Logo = 'no';
            } else {
                $scope.db.selectedTechsched.Logo = '';
            }
        };
        $scope.prepareDates = function () {
            if ($scope.db.selectedTechsched.TechOnSiteDate) {
                var date = $filter('utcToLocal')($scope.db.selectedTechsched.TechOnSiteDate, 'datetime');
                $scope.db.selectedTechsched.TechOnSiteDate = new Date(date);
//                $scope.db.selectedTechsched.TechOnSiteDate = moment($scope.db.selectedTechsched.TechOnSiteDate, 'YYYY-MM-DD HH:mm:ss').toDate();
            }
            if ($scope.db.selectedTechsched.OnSiteDate) {
                var date = $filter('utcToLocal')($scope.db.selectedTechsched.OnSiteDate, 'datetime');
                $scope.db.selectedTechsched.OnSiteDate = new Date(date);
//                $scope.db.selectedTechsched.OnSiteDate = $filter('localToUtc')($scope.db.selectedTechsched.OnSiteDate, 'date')
//                $scope.db.selectedTechsched.OnSiteDate = moment($scope.db.selectedTechsched.OnSiteDate, 'YYYY-MM-DD').toDate();
            }
            if ($scope.db.selectedTechsched.INCShipDate) {
                var date = $filter('utcToLocal')($scope.db.selectedTechsched.INCShipDate, 'datetime');
                $scope.db.selectedTechsched.INCShipDate = new Date(date);
            }
            if ($scope.db.selectedTechsched.LTDShipDate) {
                var date = $filter('utcToLocal')($scope.db.selectedTechsched.LTDShipDate, 'datetime');
                $scope.db.selectedTechsched.LTDShipDate = new Date(date);
            }
            if ($scope.db.selectedTechsched.HideUntil) {
                var date = $filter('utcToLocal')($scope.db.selectedTechsched.HideUntil, 'datetime');
                $scope.db.selectedTechsched.HideUntil = new Date(date);
            }
            if ($scope.db.selectedTechsched.DateCompleted) {
                var date = $filter('utcToLocal')($scope.db.selectedTechsched.DateCompleted, 'datetime');
                $scope.db.selectedTechsched.DateCompleted = new Date(date);
            }
        };
        $scope.prepareTimes = function () {
            if ($scope.db.selectedTechsched.TechOnSiteTime) {
                var time = $scope.db.selectedTechsched.TechOnSiteTime.split(':');
                var newtime = new Date();
                newtime.setHours(time[0]);
                newtime.setMinutes(time[1]);
                $scope.db.selectedTechsched.TechOnSiteTime = newtime;
            }
            console.log($scope.db.selectedTechsched.TechOnSiteTime);
        };
        $scope.$watch(function () {
            return coreService.getParentDB('techsched')
        }, function (newVal) {
            if (newVal !== null && angular.isDefined(newVal) && coreService.getCurrentState() === "techschedview.techschedmain") {
                $scope.db = newVal
                if ($scope.db.hasOwnProperty('selectedTechsched') && !$scope.isNew && !$scope.fetched) {
                    $scope.fetched = true
                    coreService.resetAlert()
                    coreService.setAlert({type: 'wait', message: 'Fetching Tech Schedule .. Please wait'})
                    if ($scope.db.selectedTechsched !== null) {
                        console.log($scope.db.selectedTechsched);
                        if ($scope.db.selectedTechsched.hasOwnProperty('WOInfo') && $scope.db.selectedTechsched.WOInfo) {
                            $scope.prepareWOInfo();
                        }
                        if ($scope.db.selectedTechsched.hasOwnProperty('Logo')) {
                            $scope.prepareLogo();
                        }
                        $scope.prepareDates();
                        $scope.prepareTimes();
                        $scope.currentItem = $scope.db.selectedTechsched;
                        console.log($scope.db.selectedTechsched);
                    }
                    if ($scope.currentItem !== []) {
                        $scope.CalculateManHour();
//                        if($scope.currentItem.hasOwnProperty('WOInfo')){
//                            $scope.currentItem.WOInfo = $sce.trustAsHtml($scope.currentItem.WOInfo);
//                            console.log($scope.currentItem.WOInfo);
//                        }
                    }
                    $scope.privileges = coreService.getPrivileges();
                    if ($scope.privileges.schedadmin) {
                        $scope.fieldsAccess.schedadmin = true;
                        $scope.fieldsAccess.scheduser = true;
                        $scope.fieldsAccess.schedship = true;
                        $scope.fieldsAccess.schedviewer = true;
                    } else if ($scope.privileges.schedcontract || $scope.privileges.schedtech) {
                        $scope.fieldsAccess.schedadmin = false;
                        $scope.fieldsAccess.scheduser = true;
                        $scope.fieldsAccess.schedship = true;
                        $scope.fieldsAccess.schedviewer = true;
                    } else if ($scope.privileges.schedship) {
                        $scope.fieldsAccess.schedadmin = false;
                        $scope.fieldsAccess.scheduser = false;
                        $scope.fieldsAccess.schedship = true;
                        $scope.fieldsAccess.schedviewer = true;
                    } else if ($scope.privileges.schedviewer) {
                        $scope.fieldsAccess.schedadmin = false;
                        $scope.fieldsAccess.scheduser = false;
                        $scope.fieldsAccess.schedship = false;
                        $scope.fieldsAccess.schedviewer = true;
                    }
                    console.log($scope.privileges);
                } else {
                    return
                }
            }
        }, true);
        $scope.CalculateManHour = function () {
            $scope.currentItem.ManHours = parseInt($scope.currentItem.LaborersReqd) * 8 * parseInt($scope.currentItem.OnSiteDays);
            console.log($scope.currentItem.ManHours);
        };
//        $scope.addNewNote = function () {
//            coreService.getUuid().then(function (response) {
//                if (!response.data.hasOwnProperty('file')) {
//                    var uuid = response.data.success
//                    var note = {
//                        salesrep_id: $scope.db.selectedRep.salesrep_id,
//                        note_text: "",
//                        note_date: new Date(),
//                        note_id: uuid,
//                        edit: true
//                    }
//                    $scope.db.selectedRep.notes.splice(0, 0, note)
//                } else {
//                    coreService.resetAlert()
//                    coreService.setAlert({type: 'exception', message: response.data})
//                }
//            }, function (response) {
//                coreService.resetAlert()
//                coreService.setAlert({type: 'exception', message: response.data})
//            })
//
//        }
        $scope.saveTechsched = function (name, value) {
            console.log(name);
            console.log(value);
            var isValid = true;
            var msg = "";
            var CorrectName = "";
            if (name != "") {
                if (name == "TechOnSiteDate" || name == "OnSiteDate" || name == "INCShipDate" || name == "LTDShipDate" || name == "DateCompleted" || name == "HideUntil") {
                    if (value != '') {
                        value = $filter('localToUtc')(value, 'datetime');
                        console.log(value);
                    }
                }
                else
                if (name == "TechOnSiteTime") {
                    if (value !== '') {
                        value = value.toLocaleString();
                    }
                }
                else if (name === 'LTDtoSite' || name === 'LTDtoSLC' || name === 'PaymentRequired'
                        || name === 'Hidden' || name === 'Contacted' || name === 'TechConfirmed'
                        || name === 'TechOnSiteConfirmed' || name === 'OnSiteConfirmed'
                        || name === 'Skylight' || name === 'Insulated' || name === 'ToolsIn' || name === 'ToolsOut') {
                    if (value == true) {
                        value = 'true';
                    } else if (value == false) {
                        value = 'false';
                    } else {
                        value = '';
                    }
                } else if (name === 'Logo') {
                    if (value.toLowerCase() === 'yes' || value.toLowerCase() === 'true') {
                        value = 'true';
                    } else if (value.toLowerCase() === 'no' || value.toLowerCase() === 'false') {
                        value = 'false';
                    } else {
                        value = '';
                    }
                } else if (name === 'WOInfo') {
                    var newstr = '';
                    var newstr2 = '';
                    value.replace('</p>', '');
                    console.log(value);
                    var str = value.split('<p>');
                    console.log(str);
                    angular.forEach(str, function (line) {
                        newstr += '&lt;p&gt;' + line;
                    });
                    console.log(newstr);
                    // to replace &amp; with &
                    if (newstr.indexOf('&amp;') !== -1) {
                        var str2 = newstr.split('&amp;');
                        console.log(str2);
                        angular.forEach(str2, function (part) {
                            if (newstr2 === '')
                                newstr2 += part;
                            else
                                newstr2 += '&' + part;
                        });
                    }
                    console.log(newstr2);
                    value = newstr2;
                }
                if (isValid)
                {
                    var data = {
                        SalesOrder: '',
                        ColumnName: name,
                        ColumnValue: value,
                        Company: $scope.db.selectedTechsched.Company
                    };
                    if ($scope.db.selectedTechsched.Company === 'INC')
                    {
                        data.SalesOrder = $scope.db.selectedTechsched.INC;
                    }
                    else if ($scope.db.selectedTechsched.Company === 'LTD')
                    {
                        data.SalesOrder = $scope.db.selectedTechsched.LTD;
                    }
                    console.log(data);
                    console.log($scope.db.selectedTechsched);
//            coreService.resetAlert()
//            coreService.setAlert({type: 'wait', message: 'Saving tech sched .. Please wait'})
                    TechSchedViewService.techschedUpdate(data).then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            coreService.resetAlert()
                            $scope.db.refresh = true
//                    $state.go('techsched');
                        } else {
                            console.log(response.data);
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
                    }, function (response) {
                        console.log(response.data);
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    })
                }
            }
        };
        $scope.backToTechSched = function () {

            $state.go('techsched');
        };
    }
    controller.$inject = ['$scope', 'coreService', '$state', 'TechSchedViewService', '$filter']
    angular.module('techschedviewModule')
            .controller('TechSchedViewController', controller)
}());(function () {
    var controller = function ($scope, $uibModal) {

        $scope.tinymceOptions = {
            selector: 'textarea',
            height: 45,
            min_height: 45,
            menubar: false,
            toolbar: false
        };

        $scope.tinymceOptionsbigger = {
            selector: 'textarea',
            height: 400,
            min_height: 400,
            max_height: 400,
            menubar: false,
            toolbar: false
        };


        $scope.tinymceOptionsbigger2 = {
            selector: 'textarea',
            height: 85,
            min_height: 85,
            max_height: 85,
            menubar: false,
            toolbar: false
        };





    }
    controller.$inject = ['$scope', '$uibModal']
    angular.module('techschedviewModule')
            .controller('TechSchedWOController', controller)
}())
;(function () {
    var controller = function ($scope, $uibModal, TechSchedViewService, coreService, $filter, $rootScope) {

        $scope.tinymceOption = {
            selector: 'textarea',
            height: 140,
            min_height: 140,
            max_height: 140,
            menubar: false,
            toolbar: false
        };


        $scope.animationsEnabled = true;

        $scope.InitialLetter = function (size) {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedviewModule/views/techschedinitialletter.html',
                controller: 'TechSchedEmailController'
            });
        };

        $scope.InternalUpdate = function (size) {

            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'app/techschedviewModule/views/techschedinternalupdate.html',
                controller: 'TechSchedEmailController'
            });
        };


        $scope.StatusUpdate = function (size) {
            var date = '';
            $scope.module = 'techsched';
            coreService.setCurrentState($scope.module);

            var techName = $scope.currentItem.TechName;
            var onSiteDate = $scope.currentItem.OnSiteDate;
            var stContact = $scope.currentItem.STContact;
            var emailAddress = $scope.currentItem.STEmail;
            var customer = $scope.currentItem.Customer;
            if (customer != "null" && customer != "undefined") {
                customer = customer.trim();
            }

            if (onSiteDate) {
                date = $filter('utcToLocal')(onSiteDate, 'datetime');
                date = moment(date).format('MM-DD-YYYY');
            }

            $scope.emails = [];
            $scope.to = {'contact': {'email': emailAddress, 'fullname': stContact}};
            $scope.emails.push($scope.to);

            $scope.subject = "Update re: " + customer;

            $scope.message = "Dear Mr. " + stContact + ",<br/><br/>" +
                    "This message will confirm the following:<br/>" +
                    "Your order is scheduled to arrive " + date + ".<br/>" +
                    "Our Technical Consultant's name is " + techName + "." + ".<br/>" +
                    "If you have any further questions or this information is incorrect please call me immediately.<br/><br/><br/>" +
                    "Regards,<br/><br/>";

            var email = {
                subject: $scope.subject,
                body: $scope.message,
                toArray: $scope.emails,
                attachments: []
            }
            if (emailAddress !== null && emailAddress.trim() != "") {
                $scope.db.email = email;
                console.log($scope.db);
                $rootScope.UpdateNotes('Update sent to customer via Email.');
                var uibModal = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/emailModule/views/email.html',
                    controller: 'EmailController',
                    size: 'lg'
                });
            }
            else {
                coreService.resetAlert();
                coreService.setAlert({type: 'error', message: "You must enter Email Address in Site Email in Work Order Notes"});

            }
        };


        $scope.Email = function (size) {
            var date = '';
            $scope.module = 'techsched';
            coreService.setCurrentState($scope.module);
            console.log($scope.db);
            $scope.customer = $scope.currentItem.Customer;
            $scope.techName = $scope.currentItem.TechName;
            $scope.emails = [];
            $scope.to = {'contact': {'email': $scope.currentItem.TechNameEmail, 'fullname': $scope.techName}};
            $scope.emails.push($scope.to);
            if ($scope.currentItem.TechOnSiteDate) {
                date = $filter('utcToLocal')($scope.currentItem.TechOnSiteDate, 'datetime');
                date = moment(date).format('MM-DD-YYYY');
            }
//            $scope.email.push($scope.currentItem.TechNameEmail + ";");
            $scope.subject = "Re: " + $scope.currentItem.Customer;
            $scope.message = "We have confirmed with the customer that you will arrive on site " +
                    date + " at " +
                    $scope.currentItem.TechOnSiteTime + " <br/>" +
                    "<br/><br/>";
            var email = {
                subject: $scope.subject,
                body: $scope.message,
                toArray: $scope.emails,
                attachments: []
            }
            $scope.db.email = email;
            console.log($scope.db);
            $rootScope.UpdateNotes('Update sent to Tech.');
            var uibModal = $uibModal.open({
                animation: true,
                templateUrl: 'app/emailModule/views/email.html',
                controller: 'EmailController',
                size: 'lg'
            });
        };

        $rootScope.UpdateNotes = function (addedText) {
            var text = '- \n' + addedText;
            var dateTime = moment().format("HH:mm:ss a DD/MM/YYYY");
            console.log(dateTime);
            var notes = $scope.currentItem.Comments;
            $scope.currentItem.Comments = '' + dateTime + '<br/>' + text + notes + '';
        };

        $scope.getAllTechs = function () {
            coreService.getAllTechs()
                    .then(function (response) {
                        if (!response.data.hasOwnProperty('file')) {
                            console.log(response.data);
                            $scope.techs = response.data;
                        } else {
                            coreService.resetAlert();
                            coreService.setAlert({type: 'exception', message: response.data});
                        }
                    }, function (error) {
                        coreService.resetAlert();
                        coreService.setAlert({type: 'exception', message: error.data});
                    });
        };

        $scope.selectedTechs = function () {
            console.log(this);
            $scope.currentItem.TechName = this.searchStr;
            console.log($scope.currentItem.TechName);
            var techData = $filter('filter')($scope.techs, {full_name: this.searchStr})[0];
            console.log(techData);
            if (techData) {
                $scope.currentItem.TechNameEmail = techData.user_email;
                console.log($scope.currentItem.TechNameEmail);
                $scope.currentItem.TechNameId = techData.user_id;
                console.log($scope.currentItem.TechNameId);
                $scope.saveTechsched('TechName', $scope.currentItem.TechName);
            }
        };

        $scope.getAllTechs();
    };
    controller.$inject = ['$scope', '$uibModal', 'TechSchedViewService', 'coreService', '$filter', '$rootScope']
    angular.module('techschedviewModule')
            .controller('TechSchedWONoteController', controller)
}())
;(function () {
    var factory = function ($http, coreService) {
        return {
            techschedUpdate: function(update){
                return $http.put(coreService.getApi()+'techschedupdate',update)
            },
            techschedGetByClause: function(clause){
                return $http.get(coreService.getApi() + 'techschedgetbyclause/'+ clause);
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('techschedviewModule')
            .factory('TechSchedViewService', factory)
}());(function () {
    var controller = function ($scope, coreService, treeService, $filter) {
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newValue) {
            if (newValue !== null) {
                $scope.db = newValue
            }
        }, true)
        $scope.getSelected = function (node, selected, parent) {
            if (selected) {
                treeService.getSelectedParents($scope.db.tree.treedata, node, $scope.module).then(function (response) {
                    $scope.db.tree.parents = response
                    $scope.db.tree.selectedNode = node
                })

            }
        }
        $scope.getToggled = function (node, expanded, parent) {
            if (expanded) {
                treeService.getSelectedParents($scope.db.tree.treedata, node, $scope.module).then(function (response) {
                    $scope.db.tree.parents = response
                })
            }
        }
    }
    controller.$inject = ['$scope', 'coreService', 'treeService', '$filter']
    angular.module('treeModule')
        .controller('TreeController', controller)
}());(function () {

    var factory = function (coreService, $q, $filter) {
        var vars = {
            type: null
        }
        return {
            getSelectedParents: function (treedata, mynode, scope) {
                if (mynode.type === "cattype") {
                    vars.type = mynode.name
                }
                /*
                if (scope === "photolib") {
                    if (mynode.type !== "subcat") {
                        db.tree.selectedNode = null
                    }
                }
                */
                var deferred = $q.defer()
                var expanded = []
                var node = treedata[0]
                expanded.push(node)
                var search;
                switch (scope) {
                case "workorder":
                    search = {
                        name: mynode.name
                        , workorder: mynode.workorder
                    }
                    break;
                default:
                    search = {
                        id: mynode.id, //name: mynode.name,
                        parentid: mynode.parentid
                    }
                    break;
                }

                var foundchild = $filter('filter')(node.children, search, true)[0]


                if (angular.isDefined(foundchild)) {
                    expanded.push(foundchild)
                } else {
                    for (var x = 0; x < node.children.length; x++) {
                        var xfoundchild;
                        xfoundchild = $filter('filter')(node.children[x].children, search, true)[0]
                        if (angular.isDefined(xfoundchild)) {
                            expanded.push(node.children[x])
                            expanded.push(xfoundchild)
                        } else {
                            for (var y = 0; y < node.children[x].children.length; y++) {
                                var yfoundchild;
                                yfoundchild = $filter('filter')(node.children[x].children[y].children, search, true)[0]
                                if (angular.isDefined(yfoundchild)) {
                                    expanded.push(node.children[x])
                                    expanded.push(node.children[x].children[y])
                                    expanded.push(yfoundchild)
                                } else {
                                    for (var z = 0; z < node.children[x].children[y].children.length; z++) {
                                        var zfoundchild
                                        zfoundchild = $filter('filter')(node.children[x].children[y].children[z].children, search, true)[0]

                                        if (angular.isDefined(zfoundchild)) {
                                            expanded.push(node.children[x])
                                            expanded.push(node.children[x].children[y])
                                            expanded.push(node.children[x].children[y].children[z])
                                            expanded.push(zfoundchild)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                console.log(vars.type)
                console.log(expanded.length)
                if (angular.isDefined(vars.type) && expanded.length > 4) {
                    console.log(expanded)
                    if (vars.type === "Staging") {
                        expandedret = []
                        expandedret.push(treedata[0])
                        expandedret = expandedret.concat(expanded.slice(4))
                    } else if (vars.type === "Global")
                        expandedret = expanded.slice(0, 4)
                } else {
                    expandedret = expanded
                }
                console.log(expandedret)
                deferred.resolve(expandedret)
                return deferred.promise
            }
        }
    }
    factory.$inject = ['coreService', '$q', '$filter']
    angular.module('treeModule')
        .factory('treeService', factory)
}());(function () {
    var controller = function ($scope, coreService, uploadService, Upload) {
        $scope.module = coreService.getCurrentState()
        $scope.files = []
        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal, oldVal) {
                $scope.db = newVal
                if(($scope.db !== null && angular.isDefined($scope.db))&& $scope.db.hasOwnProperty('files') && $scope.db.files.hasOwnProperty('data') && !$scope.db.upload.called){
                    $scope.db.upload.called = true
                    doUpload()
                }
        }, true)
        $scope.getFiles = function (files, file, newFiles, duplicateFiles, invalidFiles, event) {
            $scope.files = files
            if (files.length) {
                $scope.db.files = {
                    $files: files
                }
            }
        }
        var doUpload = function () {
            var names = []
            //var message = $scope.db.upload.uploadMessage
            for (var x = 0; x < $scope.db.files.$files.length; x++) {
                names.push($scope.db.files.$files[x].name)
            }

            var url = "api/common/receiveupload.php"
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Uploading files ... Please wait'})
            var upload = Upload.upload({
                url: url,
                methos: "POST",
                fields: $scope.db.files.data,
                fileFormDataNames: names,
                file: $scope.files
            })
            upload.then(function (response) {
                if (response.data.hasOwnProperty('success')) {
                    if (response.data.success == 1) {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'info', message: 'Files uploaded successfule'})
                        delete $scope.db.files
                        $scope.db.upload.doneUpload = true;
                    } else {
                        coreService.resetAlert()
                        coreService.setAlert({type: 'error', message: response.data.reason})
                        delete $scope.db.files
                    }
                }

            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error', message: response.data})
                delete $scope.db.files
            }, function (evt) {
                coreService.resetAlert()
                coreService.setAlert({type: 'info', message: "progress: " + parseInt(100.0 * evt.loaded / evt.total) + "%"})
            })
        }
    }
    controller.$inject = ['$scope', 'coreService', 'uploadService', 'Upload']
    angular.module('uploadModule')
            .controller('UploadController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('uploadModule')
            .factory('uploadService', factory)
}());(function () {
    var controller = function ($scope, coreService,userprofileService,$filter,$state) {
        $scope.original = coreService.getUser();
        $scope.previous = coreService.getPreviousState()
        $scope.user = {}
        angular.copy($scope.original,$scope.user)
        userprofileService.getQuestions().then(function(response){
            if(!response.data.hasOwnProperty('file')){
                $scope.questions = response.data
            }else{
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            }
        },function(response){
            coreService.resetAlert()
            coreService.setAlert({type: 'exception', message: response.data})
        })
        $scope.$watch('user.phone',function(newVal){
            if(newVal !== null && angular.isDefined(newVal))
            $scope.user.phone = $filter('phoneNumber')($scope.user.phone)
        })
        $scope.$watch('user.mobile',function(newVal){
            if(newVal !== null && angular.isDefined(newVal))
            $scope.user.mobile = $filter('phoneNumber')($scope.user.mobile)
        })
        $scope.save = function(){
            delete $scope.user.groups;
            userprofileService.updateProfile($scope.user)
                    .then(function(response){
                        if(!response.data.hasOwnProperty('file')){
                            $state.go($scope.previous)
                        }else{
                            $scope.coreCtrl.resetAlert()
                            $scope.coreCtrl.setAlert({type: 'exception', message: response.data})
                        }
            },function(response){
                        $scope.coreCtrl.resetAlert()
                        $scope.coreCtrl.setAlert({type: 'exception', message: response.data})
            })
        }
    }
    controller.$inject = ['$scope', 'coreService','userprofileService','$filter','$state']
    angular.module('userprofileModule')
            .controller('UserprofileController', controller)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            updateProfile: function(user){
                return $http.post(coreService.getApi()+'updateprofile',user)
            },
            getQuestions: function(){
                return $http.get(coreService.getApi()+'questions')
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('userprofileModule')
            .factory('userprofileService', factory)
}());(function () {
    var controller = function ($scope, coreService, workorderService, $filter, treeService, $uibModal) {
        $scope.selected = null
        $scope.search = coreService.getCurrentParams().search
        $scope.from = coreService.getCurrentParams().from
        $scope.user = coreService.getUser()

        $scope.$watch(function () {
            return coreService.getDB()
        }, function (newVal) {
            if (coreService.getCurrentState() === "workorder") {
                $scope.module = coreService.getCurrentState()
                $scope.privileges = coreService.getPrivileges()
                if (newVal !== null && angular.isDefined(newVal)) {
                    $scope.db = newVal
                    if (angular.isDefined($scope.db.tree) && angular.isDefined($scope.db.tree.selectedNode) && $scope.db.tree.selectedNode.name !== "Root" && $scope.db.tree.selectedNode !== $scope.selected) {
                        $scope.selected = $scope.db.tree.selectedNode
                        setMenuOptions()
                        $scope.db.tree.menuOptions = $scope.menuOptions
                        if ($scope.db.tree.selectedNode.isPhotos) {
                            $scope.db.upload = {
                                showUpload: true
                                , acceptedFiles: ".jpg,.zip"
                                , multiple: false
                                , uploadMessage: "Drop a JPG or ZIP file here to upload (One file at a time)"
                                , doneUpload: false
                            }
                            getThumbs()
                        } else {
                            $scope.db.upload = {
                                showUpload: true
                                , acceptedFiles: ".pdf,.dwfx"
                                , multiple: false
                                , uploadMessage: "Drop a PDF or DWFX file here to upload (One file at tim)"
                                , doneUpload: false
                            }
                            getFiles()
                        }
                    }
                    if ($scope.db.hasOwnProperty('files') && ($scope.db.files.$files.length && !$scope.db.files.hasOwnProperty('data'))) {
                        processFiles()
                        //console.log($scope.db.files)
                    }
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        if ($scope.db.tree.selectedNode.isPhotos) {
                            getThumbs()
                        } else {
                            getFiles()
                        }
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        console.log('fileschanged')
                        if ($scope.db.tree.selectedNode.isPhotos) {
                            getThumbs()
                        } else {
                            getFiles()
                        }
                    }

                } else {
                    console.log($scope.search);
                    $scope.db = {}
                    if ($scope.search !== null && $scope.from === null) {
                        if ($scope.search.indexOf('LTD') !== -1) {
                            $scope.searchArray = $scope.search.split('LTD');
                            $scope.searchLtd = $scope.searchArray[1];
                        } else {
                            $scope.searchArray = $scope.search.split('INC');
                            $scope.searchInc = $scope.searchArray[1];
                        }
                        $scope.post = {
                            search: $scope.search
                            , user: $scope.user
                        }
                        searchWorkOrder()
                    }
                }
            }
        }, true)
        var setMenuOptions = function () {
            if ($scope.privileges.woadmin) {
                if ($scope.db.tree.selectedNode.isWorkorder) {
                    $scope.menuOptions = [
                        ['New folder', function ($itemScope) {
                                newFolder()
                            }
                        ]

                                , ['New file name', function ($itemScope) {
                                        newFilename()
                                    }]
                    ]
                } else {
                    $scope.menuOptions = [
                        ['New file name', function ($itemScope) {
                                newFilename()
                            }]

                                , ['Change file name', function ($itemScope) {
                                        renameFile()
                                    }]

                                , null

                                , ['Delete file name', function ($itemScope) {
                                        deleteFile()
                                    }]

                                , null

                                , ['Rename folder', function ($itemScope) {
                                        renameFolder()
                                    }]
                    ]
                }
            } else {
                $scope.menuOptions = []
            }
        }

        var newFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/workorderModule/views/newfolder.html'
                , controller: 'WorkorderNewfolderController'
                , size: null
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                }
            })
            uibModalInstance.result.then(function (result) {
                if (result === "success") {
                    searchWorkOrder()
                }
            }, function (err) {

            })
        }

        var renameFolder = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/workorderModule/views/renamefolder.html'
                , controller: 'WorkorderRenamefolderController'
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                    , parent: function () {
                        return $scope.db.tree.parents[1]
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                if (response === 'success') {
                    searchWorkOrder()
                }
            }, function (err) {

            })
        }

        var renameFile = function () {
            $uibModal.open({
                templateUrl: 'app/workorderModule/views/renamefile.html'
                , controller: 'WorkorderRenamefileController'
                , size: null
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                }
            })
        }

        var deleteFile = function () {
            $uibModal.open({
                templateUrl: 'app/workorderModule/views/deletefile.html'
                , controller: 'WorkorderDeletefileController'
                , size: null
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                }
            })
        }

        var newFilename = function () {
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/workorderModule/views/newfile.html'
                , controller: 'WorkorderNewfileController'
                , size: null
                , resolve: {
                    node: function () {
                        return $scope.db.tree.selectedNode
                    }
                }
            })
            uibModalInstance.result.then(function (result) {
                if (result === "success") {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'info'
                        , message: 'File name has been added successfuly'
                    })

                }
            }, function (err) {

            })
        }
        $scope.searchLtd = ""
        $scope.searchInc = ""
        $scope.incSearch = function () {
            //$scope.db = null
            $scope.searchLtd = ""
            if ($scope.searchInc.length) {
                $scope.search = "INC" + $filter('leftPad')($scope.searchInc, 6)
                $scope.post = {
                    search: $scope.search
                    , user: $scope.user
                }
                searchWorkOrder()
            }
        }
        $scope.ltdSearch = function () {
            //$scope.db = null
            $scope.searchInc = ""
            if ($scope.searchLtd.length) {
                $scope.search = "LTD" + $filter('leftPad')($scope.searchLtd, 6)
                $scope.post = {
                    search: $scope.search
                    , user: $scope.user
                }
                searchWorkOrder()
            }
        }
        var searchWorkOrder = function () {
            console.log($scope.post)
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Fetching work orders...Please wait'
            })
            workorderService.searchWorkOrders($scope.post)
                    .then(function (response) {
                        console.log(response)
                        if (!response.data.hasOwnProperty('file')) {
                            coreService.resetAlert()
                            if (response.data.length) {
                                var treedata = $filter('sortWorkOrders')(response.data)
                                var node = $filter('filter')(response.data[0].children, {
                                    name: $scope.search
                                })[0]
                                treeService.getSelectedParents(treedata, node, $scope.module).then(function (response) {
                                    $scope.db.tree = {
                                        treedata: treedata
                                        , selectedNode: node
                                        , parents: response
                                    }
                                    coreService.setDB($scope.db)
                                })
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({
                                    type: 'error'
                                    , message: 'search was empty'
                                })
                                $scope.db = {}
                                coreService.setDB($scope.db)
                            }
                        } else {
                            coreService.resetAlert()
                            coreService.setAlert({
                                type: 'exception'
                                , message: response.data
                            })
                        }
                    }, function (response) {
                        coreService.resetAlert()
                        coreService.setAlert({
                            type: 'exception'
                            , message: response.data
                        })
                    })
        }
        var getThumbs = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Getting photo thumbs.. Please wait'
            })
            workorderService.getThumbs($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.photolist = response.data
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        $scope.db.upload.doneUpload = false;
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        $scope.db.filesChanged = false;
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception'
                    , message: response.data
                })
            })
        }
        var getFiles = function () {
            coreService.resetAlert()
            coreService.setAlert({
                type: 'wait'
                , message: 'Getting file .. Please wait'
            })
            workorderService.getFiles($scope.db.tree.selectedNode).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $scope.db.filelist = response.data
                    if ($scope.db.hasOwnProperty('upload') && $scope.db.upload.doneUpload) {
                        $scope.db.upload.doneUpload = false;
                    }
                    if ($scope.db.hasOwnProperty('filesChanged') && $scope.db.filesChanged) {
                        $scope.db.filesChanged = false;
                    }
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({
                        type: 'exception'
                        , message: response.data
                    })
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({
                    type: 'exception'
                    , message: response.data
                })
            })
        }
        var processFiles = function () {
            $scope.filenames = []
            var uibModalInstance = $uibModal.open({
                templateUrl: 'app/workorderModule/views/filenames.html'
                , controller: 'WorkorderFilenamesController'
                , size: null
                , resolve: {
                    selectedNode: function () {
                        return $scope.db.tree.selectedNode
                    }
                }
            })
            uibModalInstance.result.then(function (response) {
                $scope.db.upload.called = false;
                $scope.db.upload.doneUpload = false
                if (response !== 'cancel') {
                    $scope.db.files.data = {
                        db: $scope.module
                        , filenames: [{
                                filename: response.filename
                            }]
                        , dirname_id: response.dirname_id
                        , append: response.append
                        , user: $scope.user
                        , workorder: $scope.db.tree.selectedNode.workorder
                    }
                    console.log('sent one')
                    //$scope.db.files.data = data
                }
            }, function (err) {

            })
        }

        if ($scope.from !== null) {
            console.log($scope.from)
            $scope.searchLtd = ""
            $scope.searchInc = ""
            if ($scope.search !== null) {
                if ($scope.search.indexOf('LTD') !== -1) {
                    $scope.searchArray = $scope.search.split('LTD');
                    $scope.searchLtd = $scope.searchArray[1];
                } else {
                    $scope.searchArray = $scope.search.split('INC');
                    $scope.searchInc = $scope.searchArray[1];
                }
                $scope.post = {
                    search: $scope.search
                    , user: $scope.user
                }
                searchWorkOrder()
            }
        }
    }
    controller.$inject = ['$scope', 'coreService', 'workorderService', '$filter', 'treeService', '$uibModal']
    angular.module('workorderModule')
            .controller('WorkorderController', controller)
}());(function () {
    var controller = function ($scope, node, coreService, workorderService, $uibModalInstance, $filter) {
        $scope.folder = node
        workorderService.getFileNames($scope.folder.id).then(function (response) {
            if (!response.data.hasOwnProperty('file')) {
                $scope.filenames = response.data
                $scope.filename_id = $scope.filenames[0].filename_id
            } else {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            }
        }, function (response) {
            coreService.resetAlert()
            coreService.setAlert({type: 'exception', message: response.data})
        })
        $scope.deleteFile = function () {         
            workorderService.deleteFile($scope.filename_id).then(function(response){
                if(!response.data.hasOwnProperty('file')){
                    $uibModalInstance.close('success');
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            },function(response){
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel');
        }
    }
    controller.$inject = ['$scope', 'node', 'coreService', 'workorderService', '$uibModalInstance', '$filter']
    angular.module('workorderModule')
            .controller('WorkorderDeletefileController', controller)
}());(function () {
    var controller = function ($scope, selectedNode, coreService, $uibModalInstance, workorderService, $filter) {
        $scope.append = ''
        $scope.selectedNode = selectedNode
        workorderService.getDirNames().then(function (response) {
            if (!response.data.hasOwnProperty('file')) {
                $scope.dirnames = response.data
                $scope.dirname_id = $filter('filter')($scope.dirnames,{dirname_id: selectedNode.id})[0].dirname_id
            }
        }, function (response) {
            coreService.resetAlert()
            coreService.setAlert({type: 'exception', message: response.data})
        })
        $scope.$watch('dirname_id',function(newVal,oldVal){
            if(angular.isDefined(newVal) && newVal !== oldVal){
                workorderService.getFileNames($scope.dirname_id).then(function(response){
                    if(!response.data.hasOwnProperty('file')){
                        $scope.filenames = response.data
                        $scope.filename_id = $scope.filenames[0].filename_id
                    }else{
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
                },function(response){
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                })
            }
        })
        $scope.save = function(){
            $uibModalInstance.close({
                dirname_id: $scope.dirname_id,
                filename: $filter('filter')($scope.filenames,{filename_id: $scope.filename_id})[0].filename,
                append: $scope.append
            })
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'selectedNode', 'coreService', '$uibModalInstance', 'workorderService', '$filter']
    angular.module('workorderModule')
            .controller('WorkorderFilenamesController', controller)
}());(function () {
    var controller = function ($scope, node, coreService, $uibModalInstance, workorderService, $filter) {
        $scope.node = node
        $scope.filename = ""
        $scope.illegal = true

        
        $scope.addFile = function () {
            if ($scope.filename !== "") {
                if (!$scope.filename.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'file name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
                workorderService.getFileNames($scope.node.id)
                        .then(function (response) {
                            if (!response.data.hasOwnProperty('file')) {
                                if (response.data.length > 0) {
                                    $scope.file = {
                                        filename: $scope.filename
                                    }
                                    if ($filter('lowerCaseCompare')(response.data, $scope.file, 'filename')) {
                                        coreService.resetAlert()
                                        coreService.setAlert({type: 'error',
                                            message: 'A file with the same name exists under the same folder'})
                                        return
                                    }
                                }
                                var post = {
                                    filename: $scope.filename,
                                    dirnameid: $scope.node.id
                                }
                                workorderService.addFile(post)
                                        .then(function (response) {
                                            if (!response.data.hasOwnProperty('file')) {
                                                coreService.resetAlert()
                                                $uibModalInstance.close('success')
                                            } else {
                                                coreService.resetAlert()
                                                coreService.setAlert({type: 'exception', message: response.data})
                                            }
                                        }, function (response) {
                                            coreService.resetAlert()
                                            coreService.setAlert({type: 'exception', message: response.data})
                                        })
                            } else {
                                coreService.resetAlert()
                                coreService.setAlert({type: 'exception', message: response.data})
                            }
                        }, function (response) {
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        })
            }
        }
        $scope.cancel = function () {
            coreService.resetAlert()
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'coreService', '$uibModalInstance', 'workorderService', '$filter']
    angular.module('workorderModule')
            .controller('WorkorderNewfileController', controller)
}());(function () {
    var controller = function ($scope, node, coreService,$uibModalInstance,workorderService,$filter) {
        $scope.foldername = ""
        $scope.illegal = true
        $scope.$watch('foldername',function(newVal,oldVal){
            if(newVal !== oldVal && newVal.length > 0){
                if(!newVal.match(/^[0-9A-Za-z\s]+$/)){
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'folder name contains illegal characters<br/>Only alphabetic and spaces all allowed'})
                    $scope.illegal = true
                }else{
                    coreService.resetAlert()
                    $scope.illegal = false
                }
            } else {
                coreService.resetAlert()
                $scope.illegal = true
            }
        })
        workorderService.getWorkorderGroups()
                .then(function(response){
                    if(!response.data.hasOwnProperty('file')){
                        $scope.groups = response.data
                        $scope.foldergroup = $scope.groups[0].group_id
                    }else{
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
                    }
        },function(response){
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
        })
        $scope.addNewFolder = function(){
            var foldername = {
                name: $scope.foldername
            }
            if($filter('lowerCaseCompare')(node.children,foldername,'name')){
                coreService.resetAlert()
                coreService.setAlert({type: 'error',
                    message: 'A folder with the same name already exists'})
                return
            }
            var post = {
                foldername: $scope.foldername,
                groupid: $scope.foldergroup
            }
            workorderService.addNewFolder(post)
                    .then(function(response){
                        if(!response.data.hasOwnProperty('file')){
                            coreService.resetAlert()
                            $uibModalInstance.close('success')
                        }else{
                            coreService.resetAlert()
                            coreService.setAlert({type: 'exception', message: response.data})
                        }
            },function(response){
                        coreService.resetAlert()
                        coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel')
        }
    } 
    controller.$inject = ['$scope','node', 'coreService','$uibModalInstance','workorderService','$filter']
    angular.module('workorderModule')
            .controller('WorkorderNewfolderController', controller)
}());(function () {
    var controller = function ($scope, node, coreService, workorderService, $uibModalInstance, $filter) {
        $scope.folder = node
        workorderService.getFileNames($scope.folder.id).then(function (response) {
            if (!response.data.hasOwnProperty('file')) {
                $scope.filenames = response.data
                $scope.filename_id = $scope.filenames[0].filename_id
            } else {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            }
        }, function (response) {
            coreService.resetAlert()
            coreService.setAlert({type: 'exception', message: response.data})
        })
        $scope.renameFile = function () {
            if ($scope.filename !== "") {
                if (!$scope.filename.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error',
                        message: 'file name contains illegal characters\nOnly alphanumeric and spaces all allowed'})
                    return
                }
            }
            $scope.file = {
                filename: $scope.filename
            }
            if ($filter('lowerCaseCompare')($scope.filenames, $scope.file, 'filename')) {
                coreService.resetAlert()
                coreService.setAlert({type: 'error',
                    message: 'A file with the same name exists under the same folder'})
                return
            }
            var post = {
                id: $scope.filename_id,
                filename: $scope.filename
            }
            workorderService.renameFile(post).then(function(response){
                if(!response.data.hasOwnProperty('file')){
                    $uibModalInstance.close('success');
                }else{
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            },function(response){
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.cancel = function(){
            $uibModalInstance.close('cancel');
        }
    }
    controller.$inject = ['$scope', 'node', 'coreService', 'workorderService', '$uibModalInstance', '$filter']
    angular.module('workorderModule')
            .controller('WorkorderRenamefileController', controller)
}());(function () {
    var controller = function ($scope, node, parent, coreService, $uibModalInstance, $filter, workorderService) {
        $scope.foldername = ''
        $scope.illegal = true
        
        $scope.renameFolder = function () {
            if ($scope.foldername !== "") {
                if (!$scope.foldername.match(/^[0-9A-Za-z\s]+$/)) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error', message: 'Folder name contains illegal characters, Only alphanumeric and spaces are allowed'})
                    return
                }
                if ($filter('lowerCaseCompare')(parent.children, {name: $scope.foldername}, 'name')) {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'error', message: 'A folder with the same name exists'})
                    return
                }
            }else{
                return
            }
            coreService.resetAlert()
            coreService.setAlert({type: 'wait', message: 'Renaming folder .. Please wait'})
            var post = {
                id: node.id,
                name: $scope.foldername
            }
            workorderService.renameFolder(post).then(function (response) {
                if (!response.data.hasOwnProperty('file')) {
                    coreService.resetAlert()
                    $uibModalInstance.close('success')
                } else {
                    coreService.resetAlert()
                    coreService.setAlert({type: 'exception', message: response.data})
                }
            }, function (response) {
                coreService.resetAlert()
                coreService.setAlert({type: 'exception', message: response.data})
            })
        }
        $scope.cancel = function(){
            coreService.resetAlert()
            $uibModalInstance.close('cancel')
        }
    }
    controller.$inject = ['$scope', 'node', 'parent', 'coreService', '$uibModalInstance', '$filter', 'workorderService']
    angular.module('workorderModule')
            .controller('WorkorderRenamefolderController', controller)
}());(function () {
    var filter = function () {
        return function (items) {
            var sort_by = function (field, reverse, primer) {
                var key = primer ?
                        function (x) {
                            return primer(x[field])
                        } :
                        function (x) {
                            return x[field]
                        }
                reverse = !reverse ? 1 : -1
                return function (a, b) {
                    return a = key(a), b = key(b), reverse * ((a > b) - (b > a))
                }
            }
            items[0].children.sort(sort_by('name', false, function (a) {
                return a.toUpperCase()
            }))
            angular.forEach(items[0].children, function (item) {
                    item.children.sort(sort_by('name', false, function (a) {
                        return a.toUpperCase()
                    }))
            })
            return items
        }

    }
    angular.module('workorderModule')
            .filter('sortWorkOrders', filter)
}());(function () {
    var factory = function ($http, coreService) {
        return {
            searchWorkOrders: function(post){
                return $http.post(coreService.getApi()+'workordersearchworkorders',post)
            },
            getThumbs: function (node) {
                return $http.get(coreService.getApi() + 'workorderphotos/' + node.id + '/' + node.workorder)
            },
            getFiles: function(node){
                return $http.get(coreService.getApi()+'workorderfiles/'+node.id+'/'+node.workorder)
            },
            getDirNames: function(){
                return $http.get(coreService.getApi()+'workorderdirnames');
            },
            getFileNames: function(dirname_id){
                return $http.get(coreService.getApi()+'workorderfilenames/'+dirname_id);
            },
            getWorkorderGroups: function(){
                return $http.get(coreService.getApi()+'workordergroups');
            },
            addNewFolder: function(post){
                return $http.post(coreService.getApi()+'workorderfolder',post)
            },
            addFile: function(post){
                return $http.post(coreService.getApi()+'workorderfilename',post)
            },
            renameFolder: function(post){
                return $http.put(coreService.getApi()+'workorderfolder',post)
            },
            renameFile: function(post){
                return $http.put(coreService.getApi()+'workorderfilename',post)
            },
            deleteFile: function(filename_id){
                return $http.delete(coreService.getApi()+'workorderfilename/'+filename_id)
            }
        }
    }  
    factory.$inject = ['$http', 'coreService']
    angular.module('workorderModule')
            .factory('workorderService', factory)
}())